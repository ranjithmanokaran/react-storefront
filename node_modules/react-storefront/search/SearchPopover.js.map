{"version":3,"sources":["../../src/search/SearchPopover.js"],"names":["styles","theme","popoverPaper","boxShadow","minWidth","spacing","minHeight","border","palette","divider","useStyles","name","SearchPopover","classes","children","open","onClose","anchor","setQuery","others","handleNavigation","current","blur","vertical","horizontal","square","className","propTypes","PropTypes","object","node","bool","func","shape","any"],"mappings":";;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;AAEA;;AAEO,IAAMA,MAAM,GAAG,SAATA,MAAS,CAAAC,KAAK;AAAA,SAAK;AAC9B;;;AAGAC,IAAAA,YAAY,EAAE;AACZC,MAAAA,SAAS,EAAE,qEADC;AAEZC,MAAAA,QAAQ,EAAEH,KAAK,CAACI,OAAN,CAAc,EAAd,CAFE;AAGZC,MAAAA,SAAS,EAAEL,KAAK,CAACI,OAAN,CAAc,EAAd,CAHC;AAIZE,MAAAA,MAAM,sBAAeN,KAAK,CAACO,OAAN,CAAcC,OAA7B;AAJM;AAJgB,GAAL;AAAA,CAApB;;;AAYP,IAAMC,SAAS,GAAG,wBAAWV,MAAX,EAAmB;AAAEW,EAAAA,IAAI,EAAE;AAAR,CAAnB,CAAlB;AAEA;;;;AAGe,SAASC,aAAT,OAQZ;AAAA,MAPDC,OAOC,QAPDA,OAOC;AAAA,MANDC,QAMC,QANDA,QAMC;AAAA,MALDC,IAKC,QALDA,IAKC;AAAA,MAJDC,OAIC,QAJDA,OAIC;AAAA,MAHDC,MAGC,QAHDA,MAGC;AAAA,MAFDC,QAEC,QAFDA,QAEC;AAAA,MADEC,MACF;AACDN,EAAAA,OAAO,GAAGH,SAAS,CAAC;AAAEG,IAAAA,OAAO,EAAPA;AAAF,GAAD,CAAnB;;AAEA,MAAMO,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAC7B,QAAIJ,OAAJ,EAAa;AACXA,MAAAA,OAAO;AACR;;AAED,QAAIE,QAAJ,EAAc;AACZA,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACD;;AAEDD,IAAAA,MAAM,CAACI,OAAP,CAAeC,IAAf;AACD,GAVD;;AAYA,sCAAmBF,gBAAnB;AAEA,sBACE,gCAAC,mBAAD;AACE,IAAA,IAAI,EAAEL,IADR;AAEE,IAAA,gBAAgB,MAFlB;AAGE,IAAA,mBAAmB,MAHrB;AAIE,IAAA,mBAAmB,MAJrB;AAKE,IAAA,aAAa,MALf;AAME,IAAA,iBAAiB,MANnB;AAOE,IAAA,WAAW,MAPb;AAQE,IAAA,OAAO,EAAEC,OARX;AASE,IAAA,QAAQ,EAAEC,MAAM,CAACI,OATnB;AAUE,IAAA,YAAY,EAAE;AACZE,MAAAA,QAAQ,EAAE,QADE;AAEZC,MAAAA,UAAU,EAAE;AAFA,KAVhB;AAcE,IAAA,eAAe,EAAE;AACfD,MAAAA,QAAQ,EAAE,KADK;AAEfC,MAAAA,UAAU,EAAE;AAFG,KAdnB;AAkBE,IAAA,UAAU,EAAE;AACVC,MAAAA,MAAM,EAAE,IADE;AAEVC,MAAAA,SAAS,EAAEb,OAAO,CAACX;AAFT;AAlBd,KAsBMiB,MAtBN,GAwBGL,QAxBH,CADF;AA4BD;;AAEDF,aAAa,CAACe,SAAd,GAA0B;AACxB;;;AAGAd,EAAAA,OAAO,EAAEe,sBAAUC,MAJK;;AAKxB;;;AAGAf,EAAAA,QAAQ,EAAEc,sBAAUE,IARI;;AASxB;;;AAGAf,EAAAA,IAAI,EAAEa,sBAAUG,IAZQ;;AAaxB;;;AAGAf,EAAAA,OAAO,EAAEY,sBAAUI,IAhBK;;AAiBxB;;;AAGAf,EAAAA,MAAM,EAAEW,sBAAUK,KAAV,CAAgB;AAAEZ,IAAAA,OAAO,EAAEO,sBAAUM;AAArB,GAAhB,CApBgB;;AAqBxB;;;AAGAhB,EAAAA,QAAQ,EAAEU,sBAAUI;AAxBI,CAA1B","sourcesContent":["import React, { ElementType } from 'react'\nimport PropTypes from 'prop-types'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Popover } from '@material-ui/core'\nimport useNavigationEvent from 'react-storefront/hooks/useNavigationEvent'\n\nexport const styles = theme => ({\n  /**\n   * Styles applied to the popover paper\n   */\n  popoverPaper: {\n    boxShadow: '0px 5px 5px -3px rgba(0,0,0,0.2), 0px 8px 10px 1px rgba(0,0,0,0.14)',\n    minWidth: theme.spacing(84),\n    minHeight: theme.spacing(75),\n    border: `1px solid ${theme.palette.divider}`,\n  },\n})\n\nconst useStyles = makeStyles(styles, { name: 'RSFSearchPopover' })\n\n/**\n * Displays search results in a popover. Additional props are spread to the underlying Material UI Popover element.\n */\nexport default function SearchPopover({\n  classes,\n  children,\n  open,\n  onClose,\n  anchor,\n  setQuery,\n  ...others\n}) {\n  classes = useStyles({ classes })\n\n  const handleNavigation = () => {\n    if (onClose) {\n      onClose()\n    }\n\n    if (setQuery) {\n      setQuery('')\n    }\n\n    anchor.current.blur()\n  }\n\n  useNavigationEvent(handleNavigation)\n\n  return (\n    <Popover\n      open={open}\n      disableAutoFocus\n      disableEnforceFocus\n      disableRestoreFocus\n      disablePortal\n      disableScrollLock\n      keepMounted\n      onClose={onClose}\n      anchorEl={anchor.current}\n      anchorOrigin={{\n        vertical: 'bottom',\n        horizontal: 'right',\n      }}\n      transformOrigin={{\n        vertical: 'top',\n        horizontal: 'right',\n      }}\n      PaperProps={{\n        square: true,\n        className: classes.popoverPaper,\n      }}\n      {...others}\n    >\n      {children}\n    </Popover>\n  )\n}\n\nSearchPopover.propTypes = {\n  /**\n   * Override or extend the styles applied to the component. See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n  /**\n   * A list of `ExpandableSection`s that will be controlled.\n   */\n  children: PropTypes.node,\n  /**\n   * Boolean, which controls if popover is open.\n   */\n  open: PropTypes.bool,\n  /**\n   * Function, which is triggered on navigation and popover close.\n   */\n  onClose: PropTypes.func,\n  /**\n   * Popover anchor\n   */\n  anchor: PropTypes.shape({ current: PropTypes.any }),\n  /**\n   * Function, for setting query to empty after navigation\n   */\n  setQuery: PropTypes.func,\n}\n"],"file":"SearchPopover.js"}