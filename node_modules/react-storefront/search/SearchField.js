"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.styles = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _styles = require("@material-ui/core/styles");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _IconButton = _interopRequireDefault(require("@material-ui/core/IconButton"));

var _Clear = _interopRequireDefault(require("@material-ui/icons/Clear"));

var _SearchSubmitButton = _interopRequireDefault(require("./SearchSubmitButton"));

var _Fab = _interopRequireDefault(require("@material-ui/core/Fab"));

var _Button = _interopRequireDefault(require("@material-ui/core/Button"));

var _clsx4 = _interopRequireDefault(require("clsx"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var styles = function styles(theme) {
  return {
    /**
     * Styles applied to the root element.
     */
    root: {
      display: 'flex',
      alignItems: 'center'
    },

    /**
     * Styles applied to the wrapper element.
     */
    inputWrap: {
      display: 'flex',
      flexGrow: 1,
      border: 0,
      borderRadius: '35px',
      backgroundColor: theme.palette.background.paper,
      margin: 0,
      height: '48px'
    },

    /**
     * Styles applied to the input element.
     */
    input: _objectSpread(_objectSpread({
      border: 'none',
      background: 'none',
      flex: 1,
      padding: theme.spacing(0, 2.5, 0, 2.5)
    }, theme.typography.body1), {}, (0, _defineProperty2["default"])({
      '&:focus': {
        outline: 'none'
      }
    }, theme.breakpoints.up('sm'), {
      border: '1px solid',
      borderColor: theme.palette.divider,
      borderRadius: theme.spacing(1),
      margin: theme.spacing(0.5, 0, 0.5, 0),
      zIndex: 9999,
      transition: 'border-color linear 0.1s',
      '&:hover': {
        borderColor: (0, _styles.fade)(theme.palette.divider, 0.25)
      },
      '&:focus': {
        borderColor: theme.palette.primary.main
      }
    })),

    /**
     * Styles applied to the input if showClearnButton prop is true.
     */
    inputClearIcon: {
      paddingRight: 0
    },

    /**
     * Styles applied to the submit button element if [submitButtonVariant](#prop-submitButtonVariant)
     * is `'fab'`.
     */
    searchFab: {
      height: '48px',
      width: '48px',
      marginLeft: '10px',
      backgroundColor: theme.palette.background.paper,
      color: theme.palette.text.secondary
    },

    /**
     * Styles applied to the clear and submit buttons if the search field is empty.
     */
    hidden: {
      display: 'none'
    }
  };
};

exports.styles = styles;
var useStyles = (0, _styles.makeStyles)(styles, {
  name: 'RSFSearchField'
});
/**
 * A search text field. Additional props are spread to the underlying
 * [Input](https://material-ui.com/api/input/).
 */

var SearchField = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
  var _clsx, _clsx2, _clsx3;

  var ariaLabel = _ref.ariaLabel,
      classes = _ref.classes,
      _onChange = _ref.onChange,
      submitButtonVariant = _ref.submitButtonVariant,
      showClearButton = _ref.showClearButton,
      SubmitButtonComponent = _ref.SubmitButtonComponent,
      SubmitButtonIcon = _ref.SubmitButtonIcon,
      clearButtonProps = _ref.clearButtonProps,
      inputProps = _ref.inputProps,
      value = _ref.value,
      onFocus = _ref.onFocus,
      submitButtonProps = _ref.submitButtonProps,
      others = (0, _objectWithoutProperties2["default"])(_ref, ["ariaLabel", "classes", "onChange", "submitButtonVariant", "showClearButton", "SubmitButtonComponent", "SubmitButtonIcon", "clearButtonProps", "inputProps", "value", "onFocus", "submitButtonProps"]);
  classes = useStyles({
    classes: classes
  });
  var inputRef = ref || (0, _react.useRef)(null);
  var empty = value.trim().length === 0;

  var handleInputFocus = function handleInputFocus() {
    if (onFocus) {
      onFocus();
    }

    inputRef.current.setSelectionRange(0, inputRef.current.value.length);
  };

  var handleClearClick = function handleClearClick() {
    _onChange('');
  };

  return /*#__PURE__*/_react["default"].createElement("div", {
    className: classes.root,
    "data-empty": value.trim().length === 0 ? 'on' : 'off'
  }, /*#__PURE__*/_react["default"].createElement("div", {
    className: classes.inputWrap
  }, /*#__PURE__*/_react["default"].createElement("input", (0, _extends2["default"])({}, others, {
    "aria-label": ariaLabel,
    type: "text",
    value: value,
    onChange: function onChange(e) {
      return _onChange(e.target.value);
    },
    onFocus: handleInputFocus,
    ref: inputRef,
    className: (0, _clsx4["default"])(classes.input, showClearButton && classes.inputClearIcon)
  }, inputProps)), showClearButton ? /*#__PURE__*/_react["default"].createElement(_IconButton["default"], (0, _extends2["default"])({}, clearButtonProps, {
    onClick: handleClearClick,
    rel: "clear",
    className: (0, _clsx4["default"])((_clsx = {}, (0, _defineProperty2["default"])(_clsx, classes.searchReset, true), (0, _defineProperty2["default"])(_clsx, classes.hidden, empty), _clsx))
  }), /*#__PURE__*/_react["default"].createElement(_Clear["default"], {
    rel: "clear"
  })) : submitButtonVariant === 'icon' && /*#__PURE__*/_react["default"].createElement(SubmitButtonComponent, (0, _extends2["default"])({
    Component: _Button["default"],
    className: (0, _clsx4["default"])((_clsx2 = {}, (0, _defineProperty2["default"])(_clsx2, classes.searchButton, true), (0, _defineProperty2["default"])(_clsx2, classes.hidden, empty), _clsx2)),
    text: value
  }, submitButtonProps))), submitButtonVariant === 'fab' && /*#__PURE__*/_react["default"].createElement(SubmitButtonComponent, (0, _extends2["default"])({
    Component: _Fab["default"],
    className: (0, _clsx4["default"])((_clsx3 = {}, (0, _defineProperty2["default"])(_clsx3, classes.searchFab, true), (0, _defineProperty2["default"])(_clsx3, classes.hidden, empty), _clsx3)),
    text: value,
    ButtonIcon: SubmitButtonIcon
  }, submitButtonProps)));
});
SearchField.propTypes = {
  /**
   * Label for accessibility, defaults to search-text
   */
  ariaLabel: _propTypes["default"].string,

  /**
   * Override or extend the styles applied to the component. See [CSS API](#css) below for more details.
   */
  classes: _propTypes["default"].object,

  /**
   * The component to use for the submit button.
   */
  SubmitButtonComponent: _propTypes["default"].elementType,

  /**
   * An icon to use for the submit button.
   */
  SubmitButtonIcon: _propTypes["default"].elementType,

  /**
   * The type of submit button to display.
   */
  submitButtonVariant: _propTypes["default"].oneOf(['icon', 'fab', 'none']),

  /**
   * If `true`, show the clear button when text is entered.
   */
  showClearButton: _propTypes["default"].bool,

  /**
   * Additional props for the clear button.
   */
  clearButtonProps: _propTypes["default"].object,

  /**
   * Additional props for the Material UI [Input](https://material-ui.com/api/input/).
   */
  inputProps: _propTypes["default"].object,

  /**
   * Additional props for the submit button.
   */
  submitButtonProps: _propTypes["default"].object,

  /**
   * A function to call when the search query value is changed.
   */
  onChange: _propTypes["default"].func,

  /**
   * Input value.
   */
  value: _propTypes["default"].string,

  /**
   * A function to call when input is focused.
   */
  onFocus: _propTypes["default"].func
};
SearchField.defaultProps = {
  SubmitButtonComponent: _SearchSubmitButton["default"],
  submitButtonVariant: 'fab',
  showClearButton: true,
  placeholder: 'Search...',
  ariaLabel: 'search-text',
  name: 'q',
  value: ''
};
var _default = SearchField;
exports["default"] = _default;
//# sourceMappingURL=SearchField.js.map