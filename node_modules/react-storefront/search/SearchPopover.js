"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = SearchPopover;
exports.styles = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styles = require("@material-ui/core/styles");

var _Popover = _interopRequireDefault(require("@material-ui/core/Popover"));

var _useNavigationEvent = _interopRequireDefault(require("react-storefront/hooks/useNavigationEvent"));

var styles = function styles(theme) {
  return {
    /**
     * Styles applied to the popover paper
     */
    popoverPaper: {
      boxShadow: '0px 5px 5px -3px rgba(0,0,0,0.2), 0px 8px 10px 1px rgba(0,0,0,0.14)',
      minWidth: theme.spacing(84),
      minHeight: theme.spacing(75),
      border: "1px solid ".concat(theme.palette.divider)
    }
  };
};

exports.styles = styles;
var useStyles = (0, _styles.makeStyles)(styles, {
  name: 'RSFSearchPopover'
});
/**
 * Displays search results in a popover. Additional props are spread to the underlying Material UI Popover element.
 */

function SearchPopover(_ref) {
  var classes = _ref.classes,
      children = _ref.children,
      open = _ref.open,
      onClose = _ref.onClose,
      anchor = _ref.anchor,
      setQuery = _ref.setQuery,
      others = (0, _objectWithoutProperties2["default"])(_ref, ["classes", "children", "open", "onClose", "anchor", "setQuery"]);
  classes = useStyles({
    classes: classes
  });

  var handleNavigation = function handleNavigation() {
    if (onClose) {
      onClose();
    }

    if (setQuery) {
      setQuery('');
    }

    anchor.current.blur();
  };

  (0, _useNavigationEvent["default"])(handleNavigation);
  return /*#__PURE__*/_react["default"].createElement(_Popover["default"], (0, _extends2["default"])({
    open: open,
    disableAutoFocus: true,
    disableEnforceFocus: true,
    disableRestoreFocus: true,
    disablePortal: true,
    disableScrollLock: true,
    keepMounted: true,
    onClose: onClose,
    anchorEl: anchor.current,
    anchorOrigin: {
      vertical: 'bottom',
      horizontal: 'right'
    },
    transformOrigin: {
      vertical: 'top',
      horizontal: 'right'
    },
    PaperProps: {
      square: true,
      className: classes.popoverPaper
    }
  }, others), children);
}

SearchPopover.propTypes = {
  /**
   * Override or extend the styles applied to the component. See [CSS API](#css) below for more details.
   */
  classes: _propTypes["default"].object,

  /**
   * A list of `ExpandableSection`s that will be controlled.
   */
  children: _propTypes["default"].node,

  /**
   * Boolean, which controls if popover is open.
   */
  open: _propTypes["default"].bool,

  /**
   * Function, which is triggered on navigation and popover close.
   */
  onClose: _propTypes["default"].func,

  /**
   * Popover anchor
   */
  anchor: _propTypes["default"].shape({
    current: _propTypes["default"].any
  }),

  /**
   * Function, for setting query to empty after navigation
   */
  setQuery: _propTypes["default"].func
};
//# sourceMappingURL=SearchPopover.js.map