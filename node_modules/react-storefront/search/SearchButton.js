"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = SearchButton;
exports.styles = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _IconButton = _interopRequireDefault(require("@material-ui/core/IconButton"));

var _Search = _interopRequireDefault(require("@material-ui/icons/Search"));

var _styles = require("@material-ui/core/styles");

var styles = function styles(theme) {
  return {
    /**
     * Styles applied to the icon, if [children](#prop-children) is empty.
     */
    icon: {
      color: theme.palette.action.active
    },

    /**
     * Styles applied to the element containing the button's label.
     */
    large: {
      fontSize: '28px'
    }
  };
};

exports.styles = styles;
var useStyles = (0, _styles.makeStyles)(styles, {
  name: 'RSFSearchButton'
});
/**
 * A button that can be used to open a search drawer.
 */

function SearchButton(_ref) {
  var children = _ref.children,
      classes = _ref.classes,
      other = (0, _objectWithoutProperties2["default"])(_ref, ["children", "classes"]);
  classes = useStyles({
    classes: classes
  });
  return /*#__PURE__*/_react["default"].createElement(_IconButton["default"], (0, _extends2["default"])({
    "aria-label": "Search",
    color: "inherit",
    classes: {
      label: classes.large
    }
  }, other), children || /*#__PURE__*/_react["default"].createElement(_Search["default"], {
    className: classes.icon
  }));
}

SearchButton.propTypes = {
  /**
   * Override or extend the styles applied to the component. See [CSS API](#css) below for more details.
   */
  classes: _propTypes["default"].object,

  /**
   * Optional content to use for the button contents. If empty, a search icon is used.
   */
  children: _propTypes["default"].node
};
//# sourceMappingURL=SearchButton.js.map