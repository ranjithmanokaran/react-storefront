"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = DrawerCloseButton;
exports.styles = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _styles = require("@material-ui/core/styles");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _clsx2 = _interopRequireDefault(require("clsx"));

var _Clear = _interopRequireDefault(require("@material-ui/icons/Clear"));

var _Fab = _interopRequireDefault(require("@material-ui/core/Fab"));

var _IconButton = _interopRequireDefault(require("@material-ui/core/IconButton"));

var _Button = _interopRequireDefault(require("@material-ui/core/Button"));

var styles = function styles(theme) {
  return {
    /**
     * Styles applied to the root element.
     */
    button: {
      color: '#999',
      alignSelf: 'flex-end',
      position: 'absolute',
      top: 0,
      right: 0,
      zIndex: 1,
      '& span': {
        textTransform: 'uppercase',
        fontWeight: 'bold'
      }
    },

    /**
     * Styles applied to the root element, if [`text`](#prop-text) is defined.
     */
    buttonText: {
      border: "1px solid #999",
      margin: '0 0 10px 0'
    },

    /**
     * Styles applied to the root element, if [`text`](#prop-text) is not defined and
     * [`fullscreen`](#prop-fullscreen) is `false`.
     */
    buttonFab: {
      position: 'absolute',
      right: '10px',
      top: '-28px',
      zIndex: 1,
      color: 'white'
    },

    /**
     * Styles applied to hide the `Fab` button when [`open`](#prop-open) is `false`.
     */
    hidden: {
      display: 'none'
    }
  };
};

exports.styles = styles;
var useStyles = (0, _styles.makeStyles)(styles, {
  name: 'RSFDrawerCloseButton'
});
/**
 * A close button for drawers that can display text or an icon.
 */

function DrawerCloseButton(_ref) {
  var _clsx;

  var classes = _ref.classes,
      className = _ref.className,
      ampState = _ref.ampState,
      onClick = _ref.onClick,
      text = _ref.text,
      Icon = _ref.Icon,
      fullscreen = _ref.fullscreen,
      open = _ref.open,
      others = (0, _objectWithoutProperties2["default"])(_ref, ["classes", "className", "ampState", "onClick", "text", "Icon", "fullscreen", "open"]);
  classes = useStyles({
    classes: classes
  });
  var ButtonElement;

  if (text) {
    ButtonElement = _Button["default"];
  } else if (fullscreen) {
    ButtonElement = _IconButton["default"];
  } else {
    ButtonElement = function ButtonElement(props) {
      return /*#__PURE__*/_react["default"].createElement(_Fab["default"], (0, _extends2["default"])({
        color: "primary"
      }, props, {
        className: (0, _clsx2["default"])(props.className, !open && classes.hidden)
      }), /*#__PURE__*/_react["default"].createElement(Icon, null));
    };
  }

  return /*#__PURE__*/_react["default"].createElement(ButtonElement, (0, _extends2["default"])({
    color: "primary",
    on: "tap:AMP.setState({ ".concat(ampState, ": { open: false } })"),
    className: (0, _clsx2["default"])(className, (_clsx = {}, (0, _defineProperty2["default"])(_clsx, classes.button, true), (0, _defineProperty2["default"])(_clsx, classes.buttonText, text != null), (0, _defineProperty2["default"])(_clsx, classes.buttonFab, text == null && !fullscreen), _clsx)),
    onClick: onClick
  }, others), text || /*#__PURE__*/_react["default"].createElement(Icon, null));
}

DrawerCloseButton.propTypes = {
  /**
   * Override or extend the styles applied to the component. See [CSS API](#css) below for more details.
   */
  classes: _propTypes["default"].object,

  /**
   * CSS class to apply to the root element.
   */
  className: _propTypes["default"].string,

  /**
   * The name of the amp state corresponding to the drawer.
   */
  ampState: _propTypes["default"].string,

  /**
   * Fired when the button is clicked.  Call `e.preventDefault()` on the
   * provided event to prevent the drawer from closing.
   */
  onClick: _propTypes["default"].func,

  /**
   * When set, this text will be displayed instead of an icon.
   */
  text: _propTypes["default"].string,

  /**
   * Overrides the default icon.
   */
  Icon: _propTypes["default"].elementType,

  /**
   * If `true`, the drawer is open
   */
  open: _propTypes["default"].bool,

  /**
   * If `true`, the drawer is fullscreen and the close button will therefore be a `Fab` button.
   */
  fullscreen: _propTypes["default"].bool
};
DrawerCloseButton.defaultProps = {
  Icon: _Clear["default"],
  open: false
};
//# sourceMappingURL=DrawerCloseButton.js.map