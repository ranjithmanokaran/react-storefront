{"version":3,"sources":["../../src/drawer/Drawer.js"],"names":["styles","theme","root","closeButton","paper","overflowY","fullscreen","height","container","boxSizing","flexWrap","display","flexDirection","header","position","content","flexBasis","overflow","title","flexGrow","flexShrink","width","lineHeight","textAlign","borderBottom","palette","divider","useStyles","name","Drawer","variant","showCloseButton","open","onClose","children","className","classes","autoAdjustBodyPadding","anchor","rest","drawer","drawerResize","setPadding","requestAnimationFrame","el","current","document","body","style","paddingBottom","clientHeight","closeDrawer","ResizeObserver","observe","unobserve","zIndex","modal","propTypes","PropTypes","object","string","node","isRequired","bool","func","oneOfType","element","oneOf","defaultProps"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useCallback } from 'react'\nimport ResizeObserver from 'resize-observer-polyfill'\nimport { Drawer as MUIDrawer, Typography } from '@material-ui/core'\nimport { makeStyles, useTheme } from '@material-ui/core/styles'\nimport PropTypes from 'prop-types'\nimport clsx from 'clsx'\nimport DrawerCloseButton from './DrawerCloseButton'\n\nexport const styles = theme => ({\n  /**\n   * Styles applied to the root element.\n   */\n  root: {},\n\n  /**\n   * Styles applied to the close button element.\n   */\n  closeButton: {},\n\n  /**\n   * Styles applied to the drawer's `Paper` component.\n   */\n  paper: {\n    overflowY: 'visible',\n  },\n\n  /**\n   * Styles applied to the drawer's `Paper` component if [`fullscreen`](#prop-fullscreen) is `true`.\n   */\n  fullscreen: {\n    height: '100vh',\n  },\n\n  /**\n   * Styles applied to the drawer's wrapper element.\n   */\n  container: {\n    height: '100%',\n    boxSizing: 'border-box',\n    flexWrap: 'nowrap',\n    display: 'flex',\n    flexDirection: 'column',\n  },\n\n  /**\n   * Styles applied to the drawer's header element.\n   */\n  header: {\n    position: 'relative',\n  },\n\n  /**\n   * Styles applied to the wrapper around the drawer's children.\n   */\n  content: {\n    flexBasis: '100%',\n    overflow: 'auto',\n  },\n\n  /**\n   * Styles applied to the drawer's title element.\n   */\n  title: {\n    flexBasis: 'auto',\n    flexGrow: 0,\n    flexShrink: 1,\n    width: '100%',\n    height: '72px',\n    lineHeight: '72px',\n    textAlign: 'center',\n    borderBottom: `1px solid ${theme.palette.divider}`,\n  },\n})\n\nconst useStyles = makeStyles(styles, { name: 'RSFDrawer' })\n\n/**\n * A slide-in drawer with fab close button.\n */\nexport default function Drawer({\n  variant,\n  showCloseButton,\n  open,\n  onClose,\n  title,\n  children,\n  className,\n  classes,\n  autoAdjustBodyPadding,\n  anchor,\n  fullscreen,\n  ...rest\n}) {\n  classes = useStyles({ classes })\n\n  const theme = useTheme()\n  const drawer = useRef(null)\n  const drawerResize = useRef(null)\n\n  const setPadding = useCallback(() => {\n    if (autoAdjustBodyPadding) {\n      requestAnimationFrame(() => {\n        const el = drawer.current\n        document.body.style.paddingBottom = el && el.clientHeight + 'px'\n      })\n    }\n  }, [autoAdjustBodyPadding])\n\n  const closeDrawer = useCallback(() => {\n    if (onClose) {\n      onClose()\n    }\n\n    document.body.style.paddingBottom = 0\n  }, [onClose])\n\n  useEffect(() => {\n    const el = drawer.current\n\n    setPadding()\n\n    if (autoAdjustBodyPadding && el) {\n      drawerResize.current = new ResizeObserver(() => {\n        document.body.style.paddingBottom = el && el.clientHeight + 'px'\n      })\n      drawerResize.current.observe(el)\n    }\n\n    return () => {\n      if (drawerResize.current && el) {\n        drawerResize.current.unobserve(el)\n      }\n    }\n  }, [])\n\n  return (\n    <MUIDrawer\n      elevation={2}\n      anchor={anchor}\n      style={{\n        zIndex: theme.zIndex.modal + 20,\n      }}\n      classes={{\n        root: clsx({\n          className,\n          [classes.root]: true,\n        }),\n        paper: clsx({\n          [classes.paper]: true,\n          [classes.fullscreen]: fullscreen,\n        }),\n      }}\n      open={open}\n      variant={variant}\n      onClose={onClose}\n      {...rest}\n    >\n      <div className={classes.container} ref={drawer}>\n        <div className={classes.header}>\n          {title && (\n            <Typography className={classes.title} variant=\"h6\" component=\"div\">\n              {title}\n            </Typography>\n          )}\n          {showCloseButton && (\n            <DrawerCloseButton\n              onClick={closeDrawer}\n              fullscreen={fullscreen}\n              open={open}\n              className={clsx(classes.closeButton)}\n            />\n          )}\n        </div>\n        <div className={classes.content}>{children}</div>\n      </div>\n    </MUIDrawer>\n  )\n}\nDrawer.propTypes = {\n  /**\n   * Override or extend the styles applied to the component. See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * CSS class to apply to the root element.\n   */\n  className: PropTypes.string,\n\n  /**\n   * Child nodes to show inside the Drawer.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * If `false`, the close button will be hidden.\n   */\n  showCloseButton: PropTypes.bool,\n\n  /**\n   * If `true`, the drawer will cover the whole screen.\n   */\n  fullscreen: PropTypes.bool,\n\n  /**\n   * A function that is called when the user closes the drawer.\n   */\n  onClose: PropTypes.func.isRequired,\n\n  /**\n   * The title to display at the top of the drawer.\n   */\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n\n  /**\n   * If `true`, padding will be automatically added to the body when the drawer\n   * is open so that the user is able to scroll and see all of the body content.\n   */\n  autoAdjustBodyPadding: PropTypes.bool,\n\n  /**\n   * Side from which the drawer will appear (top, left, right, bottom).\n   */\n  anchor: PropTypes.oneOf(['top', 'bottom', 'left', 'right']),\n\n  /**\n   * The variant to use for the MaterialUI [`Drawer`)(https://material-ui.com/api/drawer/#props).\n   */\n  variant: PropTypes.oneOf(['permanent', 'persistent', 'temporary']),\n}\n\nDrawer.defaultProps = {\n  showCloseButton: true,\n  autoAdjustBodyPadding: false,\n  variant: 'temporary',\n  anchor: 'bottom',\n}\n"],"file":"Drawer.js"}