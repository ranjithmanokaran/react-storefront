{"version":3,"sources":["../../src/drawer/DrawerCloseButton.js"],"names":["styles","theme","button","color","alignSelf","position","top","right","zIndex","textTransform","fontWeight","buttonText","border","margin","buttonFab","hidden","display","useStyles","name","DrawerCloseButton","classes","className","ampState","onClick","text","Icon","fullscreen","open","others","ButtonElement","Button","IconButton","props","propTypes","PropTypes","object","string","func","elementType","bool","defaultProps","ClearIcon"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport PropTypes from 'prop-types'\nimport clsx from 'clsx'\nimport { Clear as ClearIcon } from '@material-ui/icons'\nimport { Fab, IconButton, Button } from '@material-ui/core'\n\nexport const styles = theme => ({\n  /**\n   * Styles applied to the root element.\n   */\n  button: {\n    color: '#999',\n    alignSelf: 'flex-end',\n    position: 'absolute',\n    top: 0,\n    right: 0,\n    zIndex: 1,\n    '& span': {\n      textTransform: 'uppercase',\n      fontWeight: 'bold',\n    },\n  },\n  /**\n   * Styles applied to the root element, if [`text`](#prop-text) is defined.\n   */\n  buttonText: {\n    border: `1px solid #999`,\n    margin: '0 0 10px 0',\n  },\n  /**\n   * Styles applied to the root element, if [`text`](#prop-text) is not defined and\n   * [`fullscreen`](#prop-fullscreen) is `false`.\n   */\n  buttonFab: {\n    position: 'absolute',\n    right: '10px',\n    top: '-28px',\n    zIndex: 1,\n    color: 'white',\n  },\n  /**\n   * Styles applied to hide the `Fab` button when [`open`](#prop-open) is `false`.\n   */\n  hidden: {\n    display: 'none',\n  },\n})\n\nconst useStyles = makeStyles(styles, { name: 'RSFDrawerCloseButton' })\n\n/**\n * A close button for drawers that can display text or an icon.\n */\nexport default function DrawerCloseButton({\n  classes,\n  className,\n  ampState,\n  onClick,\n  text,\n  Icon,\n  fullscreen,\n  open,\n  ...others\n}) {\n  classes = useStyles({ classes })\n\n  let ButtonElement\n\n  if (text) {\n    ButtonElement = Button\n  } else if (fullscreen) {\n    ButtonElement = IconButton\n  } else {\n    ButtonElement = props => (\n      <Fab color=\"primary\" {...props} className={clsx(props.className, !open && classes.hidden)}>\n        <Icon />\n      </Fab>\n    )\n  }\n\n  return (\n    <ButtonElement\n      color=\"primary\"\n      on={`tap:AMP.setState({ ${ampState}: { open: false } })`}\n      className={clsx(className, {\n        [classes.button]: true,\n        [classes.buttonText]: text != null,\n        [classes.buttonFab]: text == null && !fullscreen,\n      })}\n      onClick={onClick}\n      {...others}\n    >\n      {text || <Icon />}\n    </ButtonElement>\n  )\n}\n\nDrawerCloseButton.propTypes = {\n  /**\n   * Override or extend the styles applied to the component. See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * CSS class to apply to the root element.\n   */\n  className: PropTypes.string,\n\n  /**\n   * The name of the amp state corresponding to the drawer.\n   */\n  ampState: PropTypes.string,\n\n  /**\n   * Fired when the button is clicked.  Call `e.preventDefault()` on the\n   * provided event to prevent the drawer from closing.\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * When set, this text will be displayed instead of an icon.\n   */\n  text: PropTypes.string,\n\n  /**\n   * Overrides the default icon.\n   */\n  Icon: PropTypes.elementType,\n\n  /**\n   * If `true`, the drawer is open\n   */\n  open: PropTypes.bool,\n\n  /**\n   * If `true`, the drawer is fullscreen and the close button will therefore be a `Fab` button.\n   */\n  fullscreen: PropTypes.bool,\n}\n\nDrawerCloseButton.defaultProps = {\n  Icon: ClearIcon,\n  open: false,\n}\n"],"file":"DrawerCloseButton.js"}