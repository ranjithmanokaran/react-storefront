"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = Drawer;
exports.styles = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _resizeObserverPolyfill = _interopRequireDefault(require("resize-observer-polyfill"));

var _Drawer = _interopRequireDefault(require("@material-ui/core/Drawer"));

var _Typography = _interopRequireDefault(require("@material-ui/core/Typography"));

var _styles = require("@material-ui/core/styles");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _clsx3 = _interopRequireDefault(require("clsx"));

var _DrawerCloseButton = _interopRequireDefault(require("./DrawerCloseButton"));

var styles = function styles(theme) {
  return {
    /**
     * Styles applied to the root element.
     */
    root: {},

    /**
     * Styles applied to the close button element.
     */
    closeButton: {},

    /**
     * Styles applied to the drawer's `Paper` component.
     */
    paper: {
      overflowY: 'visible'
    },

    /**
     * Styles applied to the drawer's `Paper` component if [`fullscreen`](#prop-fullscreen) is `true`.
     */
    fullscreen: {
      height: '100vh'
    },

    /**
     * Styles applied to the drawer's wrapper element.
     */
    container: {
      height: '100%',
      boxSizing: 'border-box',
      flexWrap: 'nowrap',
      display: 'flex',
      flexDirection: 'column'
    },

    /**
     * Styles applied to the drawer's header element.
     */
    header: {
      position: 'relative'
    },

    /**
     * Styles applied to the wrapper around the drawer's children.
     */
    content: {
      flexBasis: '100%',
      overflow: 'auto'
    },

    /**
     * Styles applied to the drawer's title element.
     */
    title: {
      flexBasis: 'auto',
      flexGrow: 0,
      flexShrink: 1,
      width: '100%',
      height: '72px',
      lineHeight: '72px',
      textAlign: 'center',
      borderBottom: "1px solid ".concat(theme.palette.divider)
    }
  };
};

exports.styles = styles;
var useStyles = (0, _styles.makeStyles)(styles, {
  name: 'RSFDrawer'
});
/**
 * A slide-in drawer with fab close button.
 */

function Drawer(_ref) {
  var _clsx2;

  var variant = _ref.variant,
      showCloseButton = _ref.showCloseButton,
      open = _ref.open,
      onClose = _ref.onClose,
      title = _ref.title,
      children = _ref.children,
      className = _ref.className,
      classes = _ref.classes,
      autoAdjustBodyPadding = _ref.autoAdjustBodyPadding,
      anchor = _ref.anchor,
      fullscreen = _ref.fullscreen,
      rest = (0, _objectWithoutProperties2["default"])(_ref, ["variant", "showCloseButton", "open", "onClose", "title", "children", "className", "classes", "autoAdjustBodyPadding", "anchor", "fullscreen"]);
  classes = useStyles({
    classes: classes
  });
  var theme = (0, _styles.useTheme)();
  var drawer = (0, _react.useRef)(null);
  var drawerResize = (0, _react.useRef)(null);
  var setPadding = (0, _react.useCallback)(function () {
    if (autoAdjustBodyPadding) {
      requestAnimationFrame(function () {
        var el = drawer.current;
        document.body.style.paddingBottom = el && el.clientHeight + 'px';
      });
    }
  }, [autoAdjustBodyPadding]);
  var closeDrawer = (0, _react.useCallback)(function () {
    if (onClose) {
      onClose();
    }

    document.body.style.paddingBottom = 0;
  }, [onClose]);
  (0, _react.useEffect)(function () {
    var el = drawer.current;
    setPadding();

    if (autoAdjustBodyPadding && el) {
      drawerResize.current = new _resizeObserverPolyfill["default"](function () {
        document.body.style.paddingBottom = el && el.clientHeight + 'px';
      });
      drawerResize.current.observe(el);
    }

    return function () {
      if (drawerResize.current && el) {
        drawerResize.current.unobserve(el);
      }
    };
  }, []);
  return /*#__PURE__*/_react["default"].createElement(_Drawer["default"], (0, _extends2["default"])({
    elevation: 2,
    anchor: anchor,
    style: {
      zIndex: theme.zIndex.modal + 20
    },
    classes: {
      root: (0, _clsx3["default"])((0, _defineProperty2["default"])({
        className: className
      }, classes.root, true)),
      paper: (0, _clsx3["default"])((_clsx2 = {}, (0, _defineProperty2["default"])(_clsx2, classes.paper, true), (0, _defineProperty2["default"])(_clsx2, classes.fullscreen, fullscreen), _clsx2))
    },
    open: open,
    variant: variant,
    onClose: onClose
  }, rest), /*#__PURE__*/_react["default"].createElement("div", {
    className: classes.container,
    ref: drawer
  }, /*#__PURE__*/_react["default"].createElement("div", {
    className: classes.header
  }, title && /*#__PURE__*/_react["default"].createElement(_Typography["default"], {
    className: classes.title,
    variant: "h6",
    component: "div"
  }, title), showCloseButton && /*#__PURE__*/_react["default"].createElement(_DrawerCloseButton["default"], {
    onClick: closeDrawer,
    fullscreen: fullscreen,
    open: open,
    className: (0, _clsx3["default"])(classes.closeButton)
  })), /*#__PURE__*/_react["default"].createElement("div", {
    className: classes.content
  }, children)));
}

Drawer.propTypes = {
  /**
   * Override or extend the styles applied to the component. See [CSS API](#css) below for more details.
   */
  classes: _propTypes["default"].object,

  /**
   * CSS class to apply to the root element.
   */
  className: _propTypes["default"].string,

  /**
   * Child nodes to show inside the Drawer.
   */
  children: _propTypes["default"].node.isRequired,

  /**
   * If `false`, the close button will be hidden.
   */
  showCloseButton: _propTypes["default"].bool,

  /**
   * If `true`, the drawer will cover the whole screen.
   */
  fullscreen: _propTypes["default"].bool,

  /**
   * A function that is called when the user closes the drawer.
   */
  onClose: _propTypes["default"].func.isRequired,

  /**
   * The title to display at the top of the drawer.
   */
  title: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].element]),

  /**
   * If `true`, padding will be automatically added to the body when the drawer
   * is open so that the user is able to scroll and see all of the body content.
   */
  autoAdjustBodyPadding: _propTypes["default"].bool,

  /**
   * Side from which the drawer will appear (top, left, right, bottom).
   */
  anchor: _propTypes["default"].oneOf(['top', 'bottom', 'left', 'right']),

  /**
   * The variant to use for the MaterialUI [`Drawer`)(https://material-ui.com/api/drawer/#props).
   */
  variant: _propTypes["default"].oneOf(['permanent', 'persistent', 'temporary'])
};
Drawer.defaultProps = {
  showCloseButton: true,
  autoAdjustBodyPadding: false,
  variant: 'temporary',
  anchor: 'bottom'
};
//# sourceMappingURL=Drawer.js.map