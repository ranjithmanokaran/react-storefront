{"version":3,"sources":["../src/ResponsiveTiles.js"],"names":["ResponsiveTiles","props","Tiles","createTiles","cols","spacing","others","propTypes","autoScrollToNewTiles","PropTypes","bool","shape","xs","number","sm","md","lg","xl","defaultProps","useStyles","theme","breakpoints","Object","keys","map","width","key","value","sort","a","b","forEach","up","root","display","flexWrap","overflowY","listStyle","padding","margin","WebkitOverflowScrolling","tile","height","maybeWrapInAutoScroll","doWrap","elements","className","classes","children","other","React","Children","child","i","isValidElement"],"mappings":"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","sourcesContent":["import React, { useRef } from 'react'\nimport { GridListTile } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport clsx from 'clsx'\nimport PropTypes from 'prop-types'\nimport AutoScrollToNewChildren from './AutoScrollToNewChildren'\n\n/**\n * A responsive grid of tiles that changes the number of columns based on the viewport size.\n * This component commonly used in product listings and search results.\n */\nexport default function ResponsiveTiles(props) {\n  const Tiles = useRef(createTiles(props))\n  const { cols, spacing, ...others } = props\n  return <Tiles.current {...others} />\n}\n\nResponsiveTiles.propTypes = {\n  /**\n   * If `true`, automatically scroll to the first new tile when the\n   * number of tiles is increased.\n   */\n  autoScrollToNewTiles: PropTypes.bool,\n\n  /**\n   * A map of viewport widths to number of columns.  For example:\n   * ```\n   *  cols={{\n   *    xs: 2,\n   *    sm: 3,\n   *    md: 4,\n   *    lg: 5,\n   *    xl: 5\n   *  }}\n   * ```\n   */\n  cols: PropTypes.shape({\n    xs: PropTypes.number,\n    sm: PropTypes.number,\n    md: PropTypes.number,\n    lg: PropTypes.number,\n    xl: PropTypes.number,\n  }),\n\n  /**\n   * The spacing between the tiles in theme spacing units.\n   */\n  spacing: PropTypes.number,\n}\n\nResponsiveTiles.defaultProps = {\n  autoScrollToNewTiles: false,\n  cols: {\n    xs: 2,\n    sm: 3,\n    md: 4,\n    lg: 5,\n    xl: 5,\n  },\n  spacing: 1,\n}\n\nfunction createTiles({ cols, spacing }) {\n  const useStyles = makeStyles(theme => {\n    let breakpoints = {}\n\n    // Breakpoints MUST be set in order from smallest to largest\n    Object.keys(cols)\n      .map(width => {\n        return {\n          key: width,\n          value: cols[width],\n          width: `${100 / cols[width]}%`,\n        }\n      })\n      .sort((a, b) => a.value - b.value)\n      .forEach(({ key, width }) => {\n        breakpoints[theme.breakpoints.up(key)] = { width }\n      })\n\n    return {\n      root: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        overflowY: 'auto',\n        listStyle: 'none',\n        padding: 0,\n        margin: `-${theme.spacing(spacing)}px`,\n        WebkitOverflowScrolling: 'touch', // Add iOS momentum scrolling.\n      },\n      tile: {\n        ...breakpoints,\n        padding: `${theme.spacing(spacing)}px`,\n        height: 'auto',\n      },\n    }\n  }, 'RSFResponsiveTiles')\n\n  function maybeWrapInAutoScroll(doWrap) {\n    return function(elements) {\n      if (doWrap) {\n        return <AutoScrollToNewChildren>{elements}</AutoScrollToNewChildren>\n      } else {\n        return elements\n      }\n    }\n  }\n\n  return function Tiles({ className, classes, autoScrollToNewTiles, children, ...other }) {\n    classes = useStyles({ classes })\n\n    return (\n      <ul className={clsx(className, classes.root)} {...other}>\n        {maybeWrapInAutoScroll(autoScrollToNewTiles)(\n          React.Children.map(children, (child, i) => {\n            if (!React.isValidElement(child)) {\n              return null\n            }\n            return (\n              <GridListTile key={i} classes={{ root: classes.tile }}>\n                {child}\n              </GridListTile>\n            )\n          }),\n        )}\n      </ul>\n    )\n  }\n}\n"],"file":"ResponsiveTiles.js"}