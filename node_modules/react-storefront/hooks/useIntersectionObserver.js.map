{"version":3,"sources":["../../src/hooks/useIntersectionObserver.js"],"names":["getElement","ref","current","useIntersectionObserver","getRef","cb","deps","notSupportedCallback","window","IntersectionObserver","Error","observer","entries","intersectionRatio","disconnect","el","observe"],"mappings":";;;;;;;AAAA;;AAEA,SAASA,UAAT,CAAoBC,GAApB,EAAyB;AACvB,MAAIA,GAAG,IAAIA,GAAG,CAACC,OAAf,EAAwB;AACtB,WAAOD,GAAG,CAACC,OAAX;AACD;;AACD,SAAOD,GAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8Be,SAASE,uBAAT,CAAiCC,MAAjC,EAAyCC,EAAzC,EAA6CC,IAA7C,EAAmDC,oBAAnD,EAAyE;AACtF,wBAAU,YAAM;AACd,QAAI,CAACC,MAAM,CAACC,oBAAZ,EAAkC;AAChCF,MAAAA,oBAAoB,IAClBA,oBAAoB,CAAC,IAAIG,KAAJ,CAAU,uCAAV,CAAD,CADtB;AAEA;AACD;;AACD,QAAMC,QAAQ,GAAG,IAAIF,oBAAJ,CAAyB,UAAAG,OAAO,EAAI;AACnD;AACAP,MAAAA,EAAE,CAACO,OAAO,CAAC,CAAD,CAAP,CAAWC,iBAAX,GAA+B,CAAhC,EAAmC;AAAA,eAAMF,QAAQ,CAACG,UAAT,EAAN;AAAA,OAAnC,CAAF;AACD,KAHgB,CAAjB;AAIA,QAAMC,EAAE,GAAGf,UAAU,CAACI,MAAM,EAAP,CAArB;;AACA,QAAIW,EAAJ,EAAQ;AACNJ,MAAAA,QAAQ,CAACK,OAAT,CAAiBD,EAAjB;AACA,aAAO;AAAA,eAAMJ,QAAQ,CAACG,UAAT,EAAN;AAAA,OAAP;AACD;AACF,GAfD,EAeGR,IAfH;AAgBD","sourcesContent":["import { useEffect } from 'react'\n\nfunction getElement(ref) {\n  if (ref && ref.current) {\n    return ref.current\n  }\n  return ref\n}\n\n/**\n * Calls a provided callback when the provided element moves into or out of the viewport.\n *\n * Example:\n *\n * ```js\n *  import React, { useRef, useCallback } from 'react'\n *  import useIntersectionObserver from 'react-storefront/hooks/useIntersectionObserver'\n *\n *  function MyComponent() {\n *    const ref = useRef(null)\n *\n *    const onVisibilityChange = useCallback((visible, disconnect) => {\n *      if (visible) {\n *        // do some side effect here\n *        // and optionally stop observing by calling: disconnect()\n *      }\n *    }, [])\n *\n *    useIntersectionObserver(() => ref, onVisibilityChange, [])\n *    return <div ref={ref}></div>\n *  }\n *\n * ```\n *\n * @param {Function} getRef A function that returns a ref pointing to the element to observe OR the element itself\n * @param {Function} cb A callback to call when visibility changes\n * @param {Object[]} deps The IntersectionObserver will be updated to observe a new ref whenever any of these change\n * @param {Function} notSupportedCallback Callback fired when IntersectionObserver is not supported\n */\nexport default function useIntersectionObserver(getRef, cb, deps, notSupportedCallback) {\n  useEffect(() => {\n    if (!window.IntersectionObserver) {\n      notSupportedCallback &&\n        notSupportedCallback(new Error('IntersectionObserver is not available'))\n      return\n    }\n    const observer = new IntersectionObserver(entries => {\n      // if intersectionRatio is 0, the element is out of view and we do not need to do anything.\n      cb(entries[0].intersectionRatio > 0, () => observer.disconnect())\n    })\n    const el = getElement(getRef())\n    if (el) {\n      observer.observe(el)\n      return () => observer.disconnect()\n    }\n  }, deps)\n}\n"],"file":"useIntersectionObserver.js"}