{"version":3,"sources":["../../src/hooks/useStateFromProp.js"],"names":["useStateFromProp","prop","state","_value","setValue","mounted","current"],"mappings":";;;;;;;;;;;AAAA;;AAEA;;;;;AAKe,SAASA,gBAAT,CAA0BC,IAA1B,EAAgC;AAC7C,MAAMC,KAAK,GAAG,qBAASD,IAAT,CAAd;;AAD6C,+CAElBC,KAFkB;AAAA,MAEtCC,MAFsC;AAAA,MAE9BC,QAF8B;;AAG7C,MAAMC,OAAO,GAAG,mBAAO,KAAP,CAAhB;AAEA,wBAAU,YAAM;AACd,QAAIA,OAAO,CAACC,OAAZ,EAAqB;AACnBF,MAAAA,QAAQ,CAACH,IAAD,CAAR;AACD;;AACDI,IAAAA,OAAO,CAACC,OAAR,GAAkB,IAAlB;AACD,GALD,EAKG,CAACL,IAAD,CALH;AAOA,SAAOC,KAAP;AACD","sourcesContent":["import { useState, useEffect, useRef } from 'react'\n\n/**\n * The same as React's `useState`, but automatically updated when the specified prop value changes.\n * @param {Object} prop\n * @return {Array} The same as what's returned from React's useState hook.\n */\nexport default function useStateFromProp(prop) {\n  const state = useState(prop)\n  const [_value, setValue] = state\n  const mounted = useRef(false)\n\n  useEffect(() => {\n    if (mounted.current) {\n      setValue(prop)\n    }\n    mounted.current = true\n  }, [prop])\n\n  return state\n}\n"],"file":"useStateFromProp.js"}