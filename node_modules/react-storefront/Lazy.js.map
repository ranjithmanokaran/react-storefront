{"version":3,"sources":["../src/Lazy.js"],"names":["styles","root","minHeight","minWidth","useStyles","name","Lazy","ssrOnly","className","classes","children","otherProps","amp","PWAContext","hydrating","visible","setVisible","onChange","v","propTypes","PropTypes","object","string","bool","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEO,IAAMA,MAAM,GAAG,SAATA,MAAS;AAAA,SAAO;AAC3B;;;AAGAC,IAAAA,IAAI,EAAE;AACJC,MAAAA,SAAS,EAAE,CADP;AAEJC,MAAAA,QAAQ,EAAE;AAFN;AAJqB,GAAP;AAAA,CAAf;;;AAUP,IAAMC,SAAS,GAAG,wBAAWJ,MAAX,EAAmB;AAAEK,EAAAA,IAAI,EAAE;AAAR,CAAnB,CAAlB;AAEA;;;;;;;;;;;;;;;;AAee,SAASC,IAAT,OAAwE;AAAA,MAAxDC,OAAwD,QAAxDA,OAAwD;AAAA,MAA/CC,SAA+C,QAA/CA,SAA+C;AAAA,MAApCC,OAAoC,QAApCA,OAAoC;AAAA,MAA3BC,QAA2B,QAA3BA,QAA2B;AAAA,MAAdC,UAAc;AACrF,MAAMC,GAAG,GAAG,kBAAZ;;AADqF,oBAE/D,uBAAWC,sBAAX,CAF+D;AAAA,MAE7EC,SAF6E,eAE7EA,SAF6E;;AAAA,kBAGvD,qBAASF,GAAG,IAAKL,OAAO,IAAI,CAACO,SAA7B,CAHuD;AAAA;AAAA,MAG9EC,OAH8E;AAAA,MAGrEC,UAHqE;;AAIrFP,EAAAA,OAAO,GAAGL,SAAS,CAAC;AAAEK,IAAAA,OAAO,EAAPA;AAAF,GAAD,CAAnB;;AAEA,WAASQ,QAAT,CAAkBC,CAAlB,EAAqB;AACnB,QAAI,CAACH,OAAD,IAAYG,CAAhB,EAAmB;AACjBF,MAAAA,UAAU,CAAC,IAAD,CAAV;AACD;AACF;;AAED,sBACE,gCAAC,iCAAD;AAAuB,IAAA,QAAQ,EAAEC,QAAjC;AAA2C,IAAA,MAAM,EAAE,CAACF,OAApD;AAA6D,IAAA,iBAAiB;AAA9E,kBACE;AAAK,IAAA,SAAS,EAAE,sBAAKN,OAAO,CAACR,IAAb,EAAmBO,SAAnB;AAAhB,KAAmDG,UAAnD,GACGI,OAAO,IAAIL,QADd,CADF,CADF;AAOD;;AAEDJ,IAAI,CAACa,SAAL,GAAiB;AACf;;;AAGAV,EAAAA,OAAO,EAAEW,sBAAUC,MAJJ;;AAKf;;;AAGAb,EAAAA,SAAS,EAAEY,sBAAUE,MARN;;AASf;;;AAGAf,EAAAA,OAAO,EAAEa,sBAAUG;AAZJ,CAAjB;AAeAjB,IAAI,CAACkB,YAAL,GAAoB;AAClBjB,EAAAA,OAAO,EAAE;AADS,CAApB","sourcesContent":["import React, { useContext, useState } from 'react'\nimport ReactVisibilitySensor from 'react-visibility-sensor'\nimport clsx from 'clsx'\nimport { makeStyles } from '@material-ui/core/styles'\nimport PWAContext from './PWAContext'\nimport PropTypes from 'prop-types'\nimport { useAmp } from 'next/amp'\n\nexport const styles = () => ({\n  /**\n   * Styles applied to the root element.\n   */\n  root: {\n    minHeight: 1,\n    minWidth: 1,\n  },\n})\n\nconst useStyles = makeStyles(styles, { name: 'RSFLazy' })\n\n/**\n * Defers the rendering of children until the component is visible in the viewport. When\n * using Lazy we recommend assigning a CSS class that defines minHeight and minWidth to prevent\n * layout instability when children are lazy loaded.\n *\n * You can use `<Lazy ssrOnly>` to only implement lazy behavior during server side rendering.\n *\n * Example:\n *\n * ```js\n * <Lazy style={{ minHeight: 200 }}>\n *   <SomeExpensiveComponent/>\n * </Lazy>\n * ```\n */\nexport default function Lazy({ ssrOnly, className, classes, children, ...otherProps }) {\n  const amp = useAmp()\n  const { hydrating } = useContext(PWAContext)\n  const [visible, setVisible] = useState(amp || (ssrOnly && !hydrating))\n  classes = useStyles({ classes })\n\n  function onChange(v) {\n    if (!visible && v) {\n      setVisible(true)\n    }\n  }\n\n  return (\n    <ReactVisibilitySensor onChange={onChange} active={!visible} partialVisibility>\n      <div className={clsx(classes.root, className)} {...otherProps}>\n        {visible && children}\n      </div>\n    </ReactVisibilitySensor>\n  )\n}\n\nLazy.propTypes = {\n  /**\n   * Override or extend the styles applied to the component. See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n  /**\n   * CSS class to apply to the root element\n   */\n  className: PropTypes.string,\n  /**\n   * Set to `true` to render children immediately when this component is mounted after initial hydration.\n   */\n  ssrOnly: PropTypes.bool,\n}\n\nLazy.defaultProps = {\n  ssrOnly: false,\n}\n"],"file":"Lazy.js"}