"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _addVersion = _interopRequireDefault(require("./api/addVersion"));

var _isSameOrigin = _interopRequireDefault(require("./utils/isSameOrigin"));

/**
 * Returns the parsed URL for the specified request
 * @param {Request|String} request A request instance or a URL string
 * @return {URL}
 */
function getURL(request) {
  var url = request.url;

  if (typeof request === 'string') {
    url = request;
  }

  return new URL(url, window.location.href);
} // Here we patch fetch and XMLHttpRequest to always add version parameter to api calls so that cached results
// from previous versions of the app aren't served to new versions.

/* istanbul ignore else */


if (typeof window !== 'undefined') {
  var originalFetch = window.fetch;

  window.fetch = function rsfVersionedFetch(url, init) {
    var parsed = getURL(url);

    if (!(0, _isSameOrigin["default"])(parsed)) {
      return originalFetch(url, init);
    }

    if (typeof url === 'string') {
      url = (0, _addVersion["default"])(parsed).toString();
    } else {
      // the first param can be a request object
      url = new Request((0, _addVersion["default"])(parsed).toString(), url);
    }

    return originalFetch(url, init);
  };
}
/* istanbul ignore else */


if (typeof XMLHttpRequest !== 'undefined') {
  var originalOpen = XMLHttpRequest.prototype.open;

  XMLHttpRequest.prototype.open = function rsfVersionedOpen(method, url) {
    var parsed = getURL(url);

    for (var _len = arguments.length, others = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      others[_key - 2] = arguments[_key];
    }

    if ((0, _isSameOrigin["default"])(parsed)) {
      return originalOpen.call.apply(originalOpen, [this, method, (0, _addVersion["default"])(parsed).toString()].concat(others));
    } else {
      return originalOpen.call.apply(originalOpen, [this, method, url].concat(others));
    }
  };
}
/**
 * An isomorphic implementation of the fetch API. You should always use this to fetch data on both the client and server.
 * When making requests to /api routes, ?__v__={next_build_id} will always be added to ensure that cached results
 * from previous versions of the app aren't served to new versions.
 */


var _default = require('isomorphic-unfetch');

exports["default"] = _default;
//# sourceMappingURL=fetch.js.map