"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = SwatchProductOption;
exports.styles = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _clsx8 = _interopRequireDefault(require("clsx"));

var _Box = require("../Box");

var _Typography = _interopRequireDefault(require("@material-ui/core/Typography"));

var _styles = require("@material-ui/core/styles");

var _Check = _interopRequireDefault(require("@material-ui/icons/Check"));

var _Image = _interopRequireDefault(require("../Image"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Skeleton = _interopRequireDefault(require("@material-ui/lab/Skeleton"));

var styles = function styles(theme) {
  return {
    /**
     * Styles applied to the root element.
     */
    root: {},

    /**
     * Styles applied to the button element.
     */
    button: {
      position: 'relative',
      marginBottom: theme.spacing(0.5),
      padding: 2,
      borderRadius: '50%',
      backgroundColor: 'transparent',
      minWidth: 0,
      borderWidth: 1,
      borderStyle: 'solid',
      borderColor: theme.palette.grey[500],
      cursor: 'pointer',
      '&:focus': {
        outline: 0
      }
    },

    /**
     * Styles applied to the button element when [`disabled`](#prop-disabled) is `true`.
     */
    buttonDisabled: {
      cursor: 'default',
      borderColor: theme.palette.grey['A100']
    },

    /**
     * Styles applied to the image element.
     */
    image: {
      height: '100%',
      width: '100%',
      borderRadius: '50%'
    },

    /**
     * Styles applied for mobile devices.
     */
    '@media not all and (hover: none)': {
      SwatchButton: {
        '&:hover': {
          backgroundColor: 'transparent'
        }
      }
    },

    /**
     * Styles applied to the wrapper element of the selected icon.
     */
    checkMark: {
      transition: 'opacity 0.1s linear',
      opacity: 0,
      position: 'absolute',
      zIndex: 1,
      color: 'white',
      top: 2,
      left: 2,
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      backgroundColor: 'rgba(0,0,0,0.2)',
      padding: 2,
      height: 'calc(100% - 4px)',
      width: 'calc(100% - 4px)',
      boxSizing: 'border-box',
      borderRadius: '50%',
      '.rsf-po-selected &': {
        opacity: 1
      }
    },

    /**
     * Styles applied to the wrapper element of the selected icon when this option is selected.
     */
    selected: {
      opacity: 1
    },

    /**
     * Styles applied to the label element when this option is selected.
     */
    selectedLabel: {
      fontWeight: 'bold'
    },

    /**
     * Styles applied to the skeleton and button elements when [`size`](#prop-size) is `'default'`.
     */
    "default": {
      height: 48,
      width: 48,
      '& svg': {
        height: 24,
        width: 24
      }
    },

    /**
     * Styles applied to the skeleton and button elements when [`size`](#prop-size) is `'small'`.
     */
    small: {
      height: 32,
      width: 32,
      '& svg': {
        height: 16,
        width: 16
      }
    },

    /**
     * Styles applied to the skeleton and button elements when [`size`](#prop-size) is `'tiny'`.
     */
    tiny: {
      height: 24,
      width: 24,
      '& svg': {
        height: 12,
        width: 12
      }
    },

    /**
     * Styles applied to the image element when [`disabled`](#prop-disabled) is `true`.
     */
    disabled: {
      opacity: 0.3
    },

    /**
     * Styles applied to the element used as a strikethrough when [`disabled`](#prop-disabled) and
     * [`strikeThroughDisabled`](#prop-disabled) are both `true`.
     */
    strikeThrough: {
      height: '7px',
      borderWidth: '2px 0',
      borderStyle: 'solid',
      borderColor: '#f2f2f2',
      backgroundColor: '#666',
      position: 'relative',
      width: '100%',
      borderRadius: 10
    },

    /**
     * Styles applied to the element used as a strikethrough when [`disabled`](#prop-disabled) and
     * [`strikeThroughDisabled`](#prop-disabled) are both `true`, and [`size`](#prop-size) is `'default'`.
     */
    defaultStrikeThrough: {
      top: -24
    },

    /**
     * Styles applied to the element used as a strikethrough when [`disabled`](#prop-disabled) and
     * [`strikeThroughDisabled`](#prop-disabled) are both `true`, and [`size`](#prop-size) is `'small'`.
     */
    smallStrikeThrough: {
      top: -16
    },

    /**
     * Styles applied to the element used as a strikethrough when [`disabled`](#prop-disabled) and
     * [`strikeThroughDisabled`](#prop-disabled) are both `true`, and [`size`](#prop-size) is `'tiny'`.
     */
    tinyStrikeThrough: {
      top: -12
    }
  };
};

exports.styles = styles;
var useStyles = (0, _styles.makeStyles)(styles, {
  name: 'RSFSwatchProductOption'
});
/**
 * A variant of [`ProductOption`](/apiReference/option/ProductOption] that shows an image swatch to
 * represent a product option.
 */

function SwatchProductOption(_ref) {
  var _clsx2, _clsx3, _clsx4, _clsx6;

  var selected = _ref.selected,
      label = _ref.label,
      classes = _ref.classes,
      color = _ref.color,
      imageProps = _ref.imageProps,
      onClick = _ref.onClick,
      SelectedIcon = _ref.SelectedIcon,
      size = _ref.size,
      skeleton = _ref.skeleton,
      ImageComponent = _ref.ImageComponent,
      className = _ref.className,
      buttonProps = _ref.buttonProps,
      disabled = _ref.disabled,
      strikeThroughDisabled = _ref.strikeThroughDisabled,
      strikeThroughAngle = _ref.strikeThroughAngle;
  classes = useStyles({
    classes: classes
  });

  if (skeleton) {
    var _clsx;

    return /*#__PURE__*/_react["default"].createElement(_Skeleton["default"], {
      variant: "circle",
      style: {
        marginTop: 0,
        marginBottom: 4,
        margintLeft: 4,
        marginRight: 4
      },
      className: (0, _clsx8["default"])((_clsx = {}, (0, _defineProperty2["default"])(_clsx, buttonProps.className, true), (0, _defineProperty2["default"])(_clsx, classes[size], true), _clsx))
    });
  }

  return /*#__PURE__*/_react["default"].createElement(_Box.Vbox, {
    className: classes.root
  }, /*#__PURE__*/_react["default"].createElement("button", (0, _extends2["default"])({}, buttonProps, {
    type: "button",
    onClick: disabled ? Function.prototype : onClick,
    className: (0, _clsx8["default"])((_clsx2 = {}, (0, _defineProperty2["default"])(_clsx2, className, className != null), (0, _defineProperty2["default"])(_clsx2, classes.button, true), (0, _defineProperty2["default"])(_clsx2, classes[size], true), (0, _defineProperty2["default"])(_clsx2, classes.buttonDisabled, disabled), _clsx2))
  }), /*#__PURE__*/_react["default"].createElement("div", {
    className: (0, _clsx8["default"])((_clsx3 = {}, (0, _defineProperty2["default"])(_clsx3, classes.checkMark, true), (0, _defineProperty2["default"])(_clsx3, classes.selected, selected), _clsx3))
  }, /*#__PURE__*/_react["default"].createElement(SelectedIcon, {
    className: classes.icon
  })), color ? /*#__PURE__*/_react["default"].createElement("div", {
    className: (0, _clsx8["default"])((_clsx4 = {}, (0, _defineProperty2["default"])(_clsx4, classes.image, true), (0, _defineProperty2["default"])(_clsx4, classes.disabled, disabled), _clsx4)),
    style: {
      backgroundColor: color
    }
  }) : /*#__PURE__*/_react["default"].createElement(ImageComponent, (0, _extends2["default"])({
    className: (0, _clsx8["default"])((0, _defineProperty2["default"])({}, classes.disabled, disabled)),
    classes: {
      image: classes.image
    },
    fill: true,
    aspectRatio: 1
  }, imageProps)), disabled && strikeThroughDisabled && /*#__PURE__*/_react["default"].createElement("div", {
    className: (0, _clsx8["default"])((_clsx6 = {}, (0, _defineProperty2["default"])(_clsx6, classes.strikeThrough, true), (0, _defineProperty2["default"])(_clsx6, classes["".concat(size, "StrikeThrough")], disabled), _clsx6)),
    style: {
      transform: "rotate(".concat(strikeThroughAngle, "deg)")
    }
  })), label && /*#__PURE__*/_react["default"].createElement(_Typography["default"], {
    variant: "caption",
    className: (0, _clsx8["default"])((0, _defineProperty2["default"])({}, classes.selectedLabel, selected))
  }, label));
}

SwatchProductOption.propTypes = {
  /**
   * Override or extend the styles applied to the component. See [CSS API](#css) below for more details.
   */
  classes: _propTypes["default"].object,

  /**
   * A CSS class to apply to the option.
   */
  className: _propTypes["default"].string,

  /**
   * Text to display below the button.
   */
  label: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].element]),

  /**
   * A CSS color value to set the color of the swatch. Use either `color` or `imageProps`.
   */
  color: _propTypes["default"].string,

  /**
   * Props for the `Image` element. Use either `color` or `imageProps`.
   */
  imageProps: _propTypes["default"].shape(_Image["default"].propTypes),

  /**
   * Controls the size of the button.
   */
  size: _propTypes["default"].oneOf(['default', 'small', 'tiny']),

  /**
   * The component type to use to display images.
   */
  ImageComponent: _propTypes["default"].elementType,

  /**
   * If `true`, this option is selected.
   */
  selected: _propTypes["default"].bool,

  /**
   * Set to `true` to make the option disabled.
   */
  disabled: _propTypes["default"].bool,

  /**
   * Set to `true` to show a slash through the item when disabled.
   */
  strikeThroughDisabled: _propTypes["default"].bool,

  /**
   * The angle in degrees for the disabled indicator.
   */
  strikeThroughAngle: _propTypes["default"].number,

  /**
   * A function to call when this option is clicked.
   */
  onClick: _propTypes["default"].func,

  /**
   * An icon component type to display for when this option is selected.
   */
  SelectedIcon: _propTypes["default"].elementType,

  /**
   * If `true`, show this option as just a skeleton.
   */
  skeleton: _propTypes["default"].bool,

  /**
   * Props to pass to the button element.
   */
  buttonProps: _propTypes["default"].object
};
SwatchProductOption.defaultProps = {
  imageProps: {},
  SelectedIcon: _Check["default"],
  ImageComponent: _Image["default"],
  size: 'default',
  buttonProps: {},
  strikeThroughDisabled: false,
  strikeThroughAngle: 45
};
//# sourceMappingURL=SwatchProductOption.js.map