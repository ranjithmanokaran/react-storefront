"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = ProductOption;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _TextProductOption = _interopRequireDefault(require("./TextProductOption"));

var _SwatchProductOption = _interopRequireDefault(require("./SwatchProductOption"));

var _withDefaultHandler = _interopRequireDefault(require("../utils/withDefaultHandler"));

var _get = _interopRequireDefault(require("lodash/get"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * A button or swatch that displays a representation of a product option within a
 * [`ProductOptionSelector`](/apiReference/option/ProductOptionSelector].
 */
function ProductOption(props) {
  var value = props.value,
      selected = props.selected,
      selectedOption = props.selectedOption,
      onSelectedOptionChange = props.onSelectedOptionChange,
      onClick = props.onClick,
      variant = props.variant,
      showLabel = props.showLabel,
      wrapperProps = props.wrapperProps,
      optionProps = props.optionProps,
      selectedClassName = props.selectedClassName,
      others = (0, _objectWithoutProperties2["default"])(props, ["value", "selected", "selectedOption", "onSelectedOptionChange", "onClick", "variant", "showLabel", "wrapperProps", "optionProps", "selectedClassName"]);

  if (selectedOption) {
    selected = (0, _get["default"])(value, 'id') == (0, _get["default"])(selectedOption, 'id');
  }

  var handleClick = (0, _withDefaultHandler["default"])(onClick, function (_e) {
    if (onSelectedOptionChange) {
      onSelectedOptionChange(selected ? null : value);
    }
  });
  var Variant = variant === 'text' ? _TextProductOption["default"] : _SwatchProductOption["default"];

  var propArgs = _objectSpread({
    selected: selected
  }, props);

  return /*#__PURE__*/_react["default"].createElement("div", (0, _extends2["default"])({
    className: selected ? selectedClassName : ''
  }, wrapperProps(propArgs)), /*#__PURE__*/_react["default"].createElement(Variant, (0, _extends2["default"])({}, others, optionProps(propArgs), {
    label: showLabel ? value && value.text : undefined,
    selected: selected,
    onClick: handleClick,
    disabled: (0, _get["default"])(value, 'disabled')
  })));
}

ProductOption.propTypes = {
  /**
   * The UI variant that controls how the option is displayed.
   */
  variant: _propTypes["default"].oneOf(['text', 'swatch']).isRequired,

  /**
   * Set to `false` to hide the label text.
   */
  showLabel: _propTypes["default"].bool,

  /**
   * The CSS class name applied to a selected option.
   */
  selectedClassName: _propTypes["default"].string,

  /**
   * The value for the product option.
   */
  value: _propTypes["default"].object,

  /**
   * If `true`, this option is the selected option.
   */
  selected: _propTypes["default"].bool,

  /**
   * An alternative to using [`selected`](#prop-selected), this is a value that will be tested against
   * the [`value`](#prop-value) prop to determine if this option is selected.
   */
  selectedOption: _propTypes["default"].object,

  /**
   * Called when the selected option is changed.
   */
  onSelectedOptionChange: _propTypes["default"].func,

  /**
   * Called with this option is clicked.
   */
  onClick: _propTypes["default"].func,

  /**
   * A function that returns props to pass to the wrapper element.
   */
  wrapperProps: _propTypes["default"].func,

  /**
   * A function that returns props to pass to the option element.
   */
  optionProps: _propTypes["default"].func
};
ProductOption.defaultProps = {
  showLabel: true,
  wrapperProps: Function.prototype,
  optionProps: Function.prototype,
  selectedClassName: 'rsf-po-selected'
};
//# sourceMappingURL=ProductOption.js.map