"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = ProductOptionSelector;
exports.styles = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styles = require("@material-ui/core/styles");

var _clsx = _interopRequireDefault(require("clsx"));

var _ProductOption = _interopRequireDefault(require("./ProductOption"));

var styles = function styles(theme) {
  return {
    root: {
      display: 'flex',
      flexWrap: 'wrap'
    },
    button: {
      margin: theme.spacing(0, 0.5, 0.5, 0)
    }
  };
};

exports.styles = styles;
var useStyles = (0, _styles.makeStyles)(styles, {
  name: 'RSFProductOptionSelector'
});
/**
 * A selector for product options rendered as a set of buttons. Buttons can either have
 * text or an image. The text for the selected option can optionally be displayed below
 * the buttons.
 *
 * This component supports AMP.
 */

function ProductOptionSelector(_ref) {
  var options = _ref.options,
      name = _ref.name,
      classes = _ref.classes,
      optionProps = _ref.optionProps,
      skeleton = _ref.skeleton,
      value = _ref.value,
      onChange = _ref.onChange,
      variant = _ref.variant,
      strikeThroughDisabled = _ref.strikeThroughDisabled,
      OptionComponent = _ref.OptionComponent;
  classes = useStyles({
    classes: classes
  });

  if (skeleton) {
    options = new Array(skeleton).fill(0).map(function (_item, i) {
      return {
        id: i,
        text: ''
      };
    });
  }

  if (!options) return null;
  return /*#__PURE__*/_react["default"].createElement("div", {
    "data-id": "ProductOptionSelector",
    className: classes.root
  }, options.map(function (option, i) {
    return /*#__PURE__*/_react["default"].createElement(OptionComponent, (0, _extends2["default"])({
      selectedOption: value,
      onSelectedOptionChange: onChange
    }, optionProps, {
      variant: variant || (option.image || option.color ? 'swatch' : 'text'),
      name: name,
      key: option.id,
      className: (0, _clsx["default"])(classes.button, optionProps.className),
      index: i,
      color: option.color,
      imageProps: option.image,
      value: option,
      skeleton: skeleton != null,
      strikeThroughDisabled: strikeThroughDisabled
    }));
  }));
}

ProductOptionSelector.propTypes = {
  /**
   * Override or extend the styles applied to the component. See [CSS API](#css) below for more details.
   */
  classes: _propTypes["default"].object,

  /**
   * Props for displayed images. See <Image /> component for details
   */
  imageProps: _propTypes["default"].object,

  /**
   * The name of property in amp state to bind to
   */
  name: _propTypes["default"].string,

  /**
   * Function to call when a new option is selected. Called with the new selected
   * option or `null` when a selected option is deselected.
   */
  onChange: _propTypes["default"].func,

  /**
   * Props to apply to each `SwatchProductOption` or `TextProductOption` element.
   */
  optionProps: _propTypes["default"].object,

  /**
   * If specified, this number of skeleton buttons will be displayed instead of
   * displaying the actual buttons.
   */
  skeleton: _propTypes["default"].number,

  /**
   * Current selected value among provided options or `null` when no option is selected.
   */
  value: _propTypes["default"].object,

  /**
   * If `true`, disabled options will have a line through them.
   */
  strikeThroughDisabled: _propTypes["default"].bool,

  /**
   * Allows you to override the default component which is used to render a product option.
   */
  OptionComponent: _propTypes["default"].elementType
};
ProductOptionSelector.defaultProps = {
  items: [],
  optionProps: {},
  imageProps: {},
  OptionComponent: _ProductOption["default"],
  strikeThroughDisabled: false
};
//# sourceMappingURL=ProductOptionSelector.js.map