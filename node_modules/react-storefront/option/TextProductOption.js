"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = TextProductOption;
exports.styles = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _makeStyles = _interopRequireDefault(require("@material-ui/core/styles/makeStyles"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _clsx = _interopRequireDefault(require("clsx"));

var _Button = _interopRequireDefault(require("@material-ui/core/Button"));

var _Skeleton = _interopRequireDefault(require("@material-ui/lab/Skeleton"));

var styles = function styles(theme) {
  return {
    /**
     * Styles applied to the root element.
     */
    root: {
      '.rsf-po-selected &': {
        borderColor: theme.palette.primary.main,
        backgroundColor: theme.palette.primary.main,
        color: theme.palette.primary.contrastText,
        '&:hover': {
          borderColor: theme.palette.primary.main,
          backgroundColor: theme.palette.primary.main,
          color: theme.palette.primary.contrastText
        }
      }
    },

    /**
     * Styles applied to the element used as a strikethrough when [`disabled`](#prop-disabled) and
     * [`strikeThroughDisabled`](#prop-disabled) are both `true`.
     */
    strikeThrough: {
      height: '7px',
      borderWidth: '2px 0',
      borderStyle: 'solid',
      borderColor: '#f2f2f2',
      backgroundColor: '#666',
      position: 'relative',
      width: '100%',
      top: 'calc(-50% - 2px)',
      left: -2,
      borderRadius: 10
    }
  };
};

exports.styles = styles;
var useStyles = (0, _makeStyles["default"])(styles, {
  name: 'RSFTextProductOption'
});
/**
 * Represents a single product option value as a button with text. All additional
 * props are spread to the underlying Material UI Button component.
 *
 * Example:
 *
 * ```js
 * <TextProductOption label="SM" selected />
 * ```
 */

function TextProductOption(_ref) {
  var classes = _ref.classes,
      className = _ref.className,
      selected = _ref.selected,
      label = _ref.label,
      skeleton = _ref.skeleton,
      buttonProps = _ref.buttonProps,
      onClick = _ref.onClick,
      disabled = _ref.disabled,
      strikeThroughDisabled = _ref.strikeThroughDisabled,
      strikeThroughAngle = _ref.strikeThroughAngle;
  classes = useStyles({
    classes: classes
  });

  if (skeleton) {
    return /*#__PURE__*/_react["default"].createElement(_Skeleton["default"], {
      className: className,
      width: 64,
      height: 36
    });
  }

  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(_Button["default"], (0, _extends2["default"])({}, buttonProps, {
    disabled: disabled,
    className: (0, _clsx["default"])(className, classes.root),
    variant: selected ? 'contained' : 'outlined',
    color: selected ? 'primary' : 'default',
    onClick: onClick
  }), label), disabled && strikeThroughDisabled && /*#__PURE__*/_react["default"].createElement("div", {
    className: classes.strikeThrough,
    style: {
      transform: "rotate(".concat(strikeThroughAngle, "deg)")
    }
  }));
}

TextProductOption.propTypes = {
  /**
   * Override or extend the styles applied to the component. See [CSS API](#css) below for more details.
   */
  classes: _propTypes["default"].object,

  /**
   * A CSS class to apply to the option.
   */
  className: _propTypes["default"].string,

  /**
   * Set to `true` to display a skeleton instead of the actual button.
   */
  skeleton: _propTypes["default"].bool,

  /**
   * The text for the button.
   */
  label: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].element]).isRequired,

  /**
   * Set to `true` to mark the option as selected.
   */
  selected: _propTypes["default"].bool,

  /**
   * Set to `true` to make the option disabled.
   */
  disabled: _propTypes["default"].bool,

  /**
   * Set to `true` to show a slash through the item when disabled.
   */
  strikeThroughDisabled: _propTypes["default"].bool,

  /**
   * The angle in degrees for the disabled indicator.
   */
  strikeThroughAngle: _propTypes["default"].number,

  /**
   * This prop is intentionally ignored so that `TextProductOption` can be used interchangeably with
   * `SwatchProductOption without` displaying a warning.
   */
  imageProps: _propTypes["default"].object,

  /**
   * Props to pass to the button element.
   */
  buttonProps: _propTypes["default"].object,

  /**
   * A function to call when this option is clicked.
   */
  onClick: _propTypes["default"].func
};
TextProductOption.defaultProps = {
  selected: false,
  strikeThroughDisabled: false,
  strikeThroughAngle: 27
};
//# sourceMappingURL=TextProductOption.js.map