{"version":3,"sources":["../src/ForwardThumbnail.js"],"names":["ForwardThumbnail","children","ref","context","PWAContext","srcRef","setSrcRef","current","querySelector","getAttribute","handleClick","thumbnail","src"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AAEA;;;;;;;;;;;;;;;;;;;AAmBe,SAASA,gBAAT,OAAwC;AAAA,MAAZC,QAAY,QAAZA,QAAY;AACrD,MAAMC,GAAG,GAAG,mBAAO,IAAP,CAAZ;AACA,MAAMC,OAAO,GAAG,uBAAWC,sBAAX,CAAhB;AACA,MAAMC,MAAM,GAAG,mBAAO,IAAP,CAAf;AAEA,MAAMC,SAAS,GAAG,wBAAY,YAAM;AAClC,QAAIJ,GAAG,CAACK,OAAJ,CAAYC,aAAZ,CAA0B,KAA1B,CAAJ,EAAsC;AACpCH,MAAAA,MAAM,CAACE,OAAP,GAAiBL,GAAG,CAACK,OAAJ,CAAYC,aAAZ,CAA0B,KAA1B,EAAiCC,YAAjC,CAA8C,KAA9C,CAAjB;AACD;AACF,GAJiB,EAIf,EAJe,CAAlB;AAMA,wBAAUH,SAAV,EAAqB,CAACL,QAAD,CAArB;AAEA,MAAMS,WAAW,GAAG,wBAAY,YAAM;AACpC,QAAI,CAACL,MAAM,CAACE,OAAZ,EAAqB;AACnBD,MAAAA,SAAS;AACV;;AACDH,IAAAA,OAAO,CAACQ,SAAR,CAAkBJ,OAAlB,GAA4B;AAAEK,MAAAA,GAAG,EAAEP,MAAM,CAACE;AAAd,KAA5B;AACD,GALmB,EAKjB,EALiB,CAApB;AAOA,sBACE;AAAK,IAAA,GAAG,EAAEL,GAAV;AAAe,IAAA,OAAO,EAAEQ;AAAxB,KACGT,QADH,CADF;AAKD","sourcesContent":["import React, { useCallback, useRef, useContext, useEffect } from 'react'\nimport PWAContext from './PWAContext'\n\n/**\n * Wrap product links in this component to reuse the thumbnail as the main image in the product\n * skeleton when transitioning to the PDP to make the transition feel instant. This component\n * sets the `thumbnail` ref on the provided `PWAContext` to the `src` prop of the first `img`\n * element found amongst the descendant elements in the tree.\n *\n * Example:\n *\n * ```js\n *  <ForwardThumbnail>\n *    <Link href=\"/p/[productId]\" as={product.url}>\n *      <a>\n *        <Image src={product.media.thumbnail.src} alt={product.media.thumbnail.alt} />\n *        <div>{product.name}</div>\n *      </a>\n *    </Link>\n *  </ForwardThumbnail>\n * ```\n */\nexport default function ForwardThumbnail({ children }) {\n  const ref = useRef(null)\n  const context = useContext(PWAContext)\n  const srcRef = useRef(null)\n\n  const setSrcRef = useCallback(() => {\n    if (ref.current.querySelector('img')) {\n      srcRef.current = ref.current.querySelector('img').getAttribute('src')\n    }\n  }, [])\n\n  useEffect(setSrcRef, [children])\n\n  const handleClick = useCallback(() => {\n    if (!srcRef.current) {\n      setSrcRef()\n    }\n    context.thumbnail.current = { src: srcRef.current }\n  }, [])\n\n  return (\n    <div ref={ref} onClick={handleClick}>\n      {children}\n    </div>\n  )\n}\n"],"file":"ForwardThumbnail.js"}