"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

/**
 * An internal component that catches errors durring rendering, sets the
 * error, stack, and page properties of the app state accordingly, and calls
 * the registered error reporter if one is configured.
 */
var ErrorBoundary = /*#__PURE__*/function (_Component) {
  (0, _inherits2["default"])(ErrorBoundary, _Component);

  var _super = _createSuper(ErrorBoundary);

  function ErrorBoundary() {
    var _this;

    (0, _classCallCheck2["default"])(this, ErrorBoundary);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "state", {
      error: null
    });
    return _this;
  }

  (0, _createClass2["default"])(ErrorBoundary, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var onError = this.props.onError;
      this.windowErrorEvent = window.addEventListener('error', function (event) {
        onError({
          error: event.error
        });
      });
      this.windowUnhandledRejectionEvent = window.addEventListener('unhandledrejection', function (event) {
        onError({
          error: event.reason
        });
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      window.removeEventListener('error', this.windowErrorEvent);
      window.removeEventListener('unhandledrejection', this.windowUnhandledRejectionEvent);
    }
    /**
     * When an error is caught, call the error reporter and update the app state
     * @param {Error} error
     * @param {Object} info
     */

  }, {
    key: "componentDidCatch",
    value: function componentDidCatch(error, info) {
      var onError = this.props.onError; // report the error

      onError({
        error: error
      });
    }
  }, {
    key: "render",
    value: function render() {
      if (this.state.error) {
        return /*#__PURE__*/_react["default"].createElement("div", null, this.state.error.message);
      }

      return this.props.children;
    }
  }], [{
    key: "getDerivedStateFromError",
    value: function getDerivedStateFromError(error) {
      return {
        error: error
      };
    }
  }]);
  return ErrorBoundary;
}(_react.Component);

exports["default"] = ErrorBoundary;
(0, _defineProperty2["default"])(ErrorBoundary, "propTypes", {
  /**
   * A function to call whenever an error occurs.  The function is passed an
   * object with `error` (the error message) and `stack` (the stack trace as a string).
   */
  onError: _propTypes["default"].func
});
(0, _defineProperty2["default"])(ErrorBoundary, "defaultProps", {
  onError: Function.prototype
});
//# sourceMappingURL=ErrorBoundary.js.map