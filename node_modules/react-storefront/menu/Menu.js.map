{"version":3,"sources":["../../src/menu/Menu.js"],"names":["styles","menuStyles","useStyles","name","Menu","React","memo","props","classes","className","anchor","drawerWidth","persistent","root","open","onClose","renderFooter","renderHeader","renderBack","renderItem","renderItemContent","renderDrawer","others","card","cards","state","setState","stateRef","current","nextKey","onItemClick","item","depth","key","length","push","slice","goBack","context","close","keepMounted","style","width","paper","drawer","drawerFixed","modal","propTypes","PropTypes","object","number","rootHeader","element","rootFooter","func","bool","objectOf","string","ExpandIcon","elementType","CollapseIcon","oneOf","trackSelected","defaultProps","DrawerComponent","Drawer"],"mappings":"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","sourcesContent":["import React, { useMemo, useState, useRef, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport menuStyles from './menuStyles'\nimport MenuContext from './MenuContext'\nimport { Drawer } from '@material-ui/core'\nimport clsx from 'clsx'\nimport SEOLinks from './SEOLinks'\nimport MenuBody from './MenuBody'\nimport PropTypes from 'prop-types'\n\nexport const styles = menuStyles\n\nconst useStyles = makeStyles(styles, { name: 'RSFMenu' })\n\nconst Menu = React.memo(props => {\n  let {\n    classes,\n    className,\n    anchor,\n    drawerWidth,\n    persistent,\n    root,\n    open,\n    onClose,\n    renderFooter,\n    renderHeader,\n    renderBack,\n    renderItem,\n    renderItemContent,\n    renderDrawer,\n    ...others\n  } = props\n\n  classes = useStyles({ classes })\n\n  const [state, setState] = useState(() => {\n    return {\n      card: 0,\n      cards: [{ ...root, root: true }],\n    }\n  })\n\n  // this is needed so we can always update the *current* state, not the snapshot that\n  // was present when the callbacks were memoized\n  const stateRef = useRef(state)\n\n  useEffect(() => {\n    stateRef.current = state\n  }, [state])\n\n  useEffect(() => {\n    setState({\n      card: 0,\n      cards: [{ ...root, root: true }],\n    })\n  }, [root])\n\n  // this ensures that the expanded state is reset when showing a new card\n  const nextKey = useRef(0)\n\n  const onItemClick = (item, depth) => {\n    const cards = [...stateRef.current.cards]\n    const card = depth + 1\n\n    item.key = nextKey.current++ // this ensures that the expanded state is reset when showing a new card\n\n    if (card >= cards.length) {\n      cards.push(item)\n    } else {\n      cards[card] = item\n    }\n\n    setState({\n      card,\n      cards: cards.slice(0, card + 1),\n    })\n  }\n\n  const goBack = card => {\n    setState({\n      card,\n      cards: stateRef.current.cards,\n    })\n  }\n\n  // it is important to memoize the context, otherwise it will cause all consumers to rerender\n  // every time Menu rerenders\n  const context = useMemo(\n    () => ({\n      classes,\n      onItemClick,\n      goBack,\n      renderFooter,\n      renderHeader,\n      renderBack,\n      renderItem,\n      renderItemContent,\n      close: onClose,\n      drawerWidth,\n    }),\n    [classes],\n  )\n\n  return (\n    <>\n      <MenuContext.Provider value={context}>\n        {renderDrawer ? (\n          renderDrawer()\n        ) : (\n          <Drawer\n            variant={persistent ? 'persistent' : 'temporary'}\n            open={open || persistent}\n            onClose={onClose}\n            anchor={anchor}\n            ModalProps={{\n              keepMounted: true,\n            }}\n            PaperProps={{\n              style: { width: `${drawerWidth}px` },\n            }}\n            classes={{\n              root: className,\n              paper: clsx(classes.drawer, {\n                [classes.drawerFixed]: persistent,\n              }),\n              modal: classes.modal,\n            }}\n          >\n            <MenuBody\n              card={state.card}\n              cards={state.cards}\n              root={root}\n              drawerWidth={drawerWidth}\n              {...others}\n            />\n          </Drawer>\n        )}\n        <SEOLinks root={root} />\n      </MenuContext.Provider>\n    </>\n  )\n})\n\nMenu.propTypes = {\n  root: PropTypes.object,\n\n  /**\n   * The width of the drawer in pixels\n   */\n  drawerWidth: PropTypes.number,\n\n  /**\n   * An element to display at the top of the root of the menu\n   */\n  rootHeader: PropTypes.element,\n\n  /**\n   * An element to display at the bottom of the root of the menu\n   */\n  rootFooter: PropTypes.element,\n\n  /**\n   * A function to render a custom header in menu cards.  It is passed an object\n   * with:\n   *\n   * - item: The menu item record being rendered\n   *\n   * The function should return a React element or fragment.\n   */\n  renderHeader: PropTypes.func,\n\n  /**\n   * A function to render a custom footer menu cards.  It is passed an object\n   * with:\n   *\n   * - item: The menu item record being rendered\n   *\n   * The function should return a React element or fragment.\n   */\n  renderFooter: PropTypes.func,\n\n  /**\n   * A function to render a custom back navigation for menu cards.  It is passed\n   * an object with:\n   *\n   * - item: The menu item record being rendered\n   *\n   * The function should return a React element or fragment.\n   */\n  renderBack: PropTypes.func,\n\n  /**\n   * Set to true to display the menu\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Set to true to dock the menu so that it's always open and not modal\n   */\n  persistent: PropTypes.bool,\n\n  /**\n   * CSS classes for this component\n   */\n  classes: PropTypes.objectOf(PropTypes.string),\n\n  /**\n   * Called when the menu is closed\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * The icon to use for collapsed groups\n   */\n  ExpandIcon: PropTypes.elementType,\n\n  /**\n   * The icon to use for expanded groups\n   */\n  CollapseIcon: PropTypes.elementType,\n\n  /**\n   * Sets the side of the screen from which the menu appears.\n   */\n  anchor: PropTypes.oneOf(['left', 'right']),\n\n  /**\n   * Overrides the default rendering of a menu item.  It is passed the following arguments:\n   *\n   * - item - the menu item record being rendered.\n   *\n   * Return undefined to render the default contents\n   *\n   * Example:\n   *\n   * ```js\n   *  renderItem={item => {\n   *    return item.text === 'My Special Item ? <MySpecialItem/> : null\n   *  }}\n   * ```\n   */\n  renderItem: PropTypes.func,\n\n  /**\n   * Overrides the content of a menu item.  It is passed the following arguments:\n   *\n   * - item - the menu item record being rendered.\n   *\n   * Return null to render the default contents\n   *\n   * Example:\n   *\n   * ```js\n   *  renderItemContent={item => {\n   *    return leaf ? <ListItemText primary={item.text}/> : null\n   *  }}\n   * ```\n   */\n  renderItemContent: PropTypes.func,\n\n  /**\n   * Set to `true` to show the item corresponding to the current URL as selected.\n   */\n  trackSelected: PropTypes.bool,\n\n  /**\n   * A function to override the rendering the drawer\n   */\n  renderDrawer: PropTypes.func,\n}\n\nMenu.defaultProps = {\n  drawerWidth: 330,\n  anchor: 'left',\n  trackSelected: false,\n  DrawerComponent: Drawer,\n}\n\nexport default Menu\n"],"file":"Menu.js"}