{"version":3,"sources":["../../src/mock-connector/product.js"],"names":["asciiSum","string","split","reduce","s","e","charCodeAt","product","params","req","res","id","color","size","appData","createAppData","pageData","getPageData","result","data","carousel","index","mockPrice","price","priceText","toFixed","title","breadcrumbs","text","href","as","mainProductImage","media","full","src"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA,SAASA,QAAT,GAA+B;AAAA,MAAbC,MAAa,uEAAJ,EAAI;AAC7B,SAAOA,MAAM,CAACC,KAAP,CAAa,EAAb,EAAiBC,MAAjB,CAAwB,UAACC,CAAD,EAAIC,CAAJ;AAAA,WAAUD,CAAC,GAAGC,CAAC,CAACC,UAAF,EAAd;AAAA,GAAxB,EAAsD,CAAtD,CAAP;AACD;;SAE6BC,O;;;;;2FAAf,iBAAuBC,MAAvB,EAA+BC,GAA/B,EAAoCC,GAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AACLC,YAAAA,EADK,GACeH,MADf,CACLG,EADK,EACDC,KADC,GACeJ,MADf,CACDI,KADC,EACMC,IADN,GACeL,MADf,CACMK,IADN;AAAA;AAAA,mBAGQ,mCAAkBJ,GAAlB,EAAuB;AAC1CK,cAAAA,OAAO,EAAEC,yBADiC;AAE1CC,cAAAA,QAAQ,EAAE;AAAA,uBAAMC,WAAW,CAACN,EAAD,CAAjB;AAAA;AAFgC,aAAvB,CAHR;;AAAA;AAGPO,YAAAA,MAHO;;AAAA,kBAUTN,KAAK,IAAIC,IAVA;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAWQI,WAAW,CAACN,EAAD,CAXnB;;AAAA;AAWLQ,YAAAA,IAXK;AAYXA,YAAAA,IAAI,CAACC,QAAL,GAAgB;AAAEC,cAAAA,KAAK,EAAE;AAAT,aAAhB,CAZW,CAaX;AACA;AACA;;AACMC,YAAAA,SAhBK,GAgBO,CAACtB,QAAQ,CAACY,KAAD,CAAR,GAAkBZ,QAAQ,CAACa,IAAD,CAA3B,IAAqC,GAhB5C;AAiBXM,YAAAA,IAAI,CAACZ,OAAL,CAAagB,KAAb,GAAqBD,SAArB;AACAH,YAAAA,IAAI,CAACZ,OAAL,CAAaiB,SAAb,cAA6BF,SAAS,CAACG,OAAV,CAAkB,CAAlB,CAA7B;AAlBW,6CAmBJN,IAnBI;;AAAA;AAAA,6CAsBND,MAtBM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAyBAD,W;;;;;+FAAf,kBAA2BN,EAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AACQO,YAAAA,MADR,GACiB;AACbQ,cAAAA,KAAK,oBAAaf,EAAb,CADQ;AAEbJ,cAAAA,OAAO,EAAE,+BAAcI,EAAd,CAFI;AAGbgB,cAAAA,WAAW,EAAE,CACX;AACEC,gBAAAA,IAAI,QADN;AAEEC,gBAAAA,IAAI,EAAE;AAFR,eADW,EAKX;AACED,gBAAAA,IAAI,wBAAiBjB,EAAjB,CADN;AAEEmB,gBAAAA,EAAE,eAAQnB,EAAR,CAFJ;AAGEkB,gBAAAA,IAAI,EAAE;AAHR,eALW;AAHA,aADjB;AAiBQE,YAAAA,gBAjBR,GAiB2Bb,MAAM,CAACX,OAAP,CAAeyB,KAAf,CAAqBC,IAArB,CAA0B,CAA1B,CAjB3B;AAAA;AAAA,mBAkB+B,mCAAkBF,gBAAgB,CAACG,GAAnC,CAlB/B;;AAAA;AAkBEH,YAAAA,gBAAgB,CAACG,GAlBnB;AAAA,8CAoBShB,MApBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import fulfillAPIRequest from '../props/fulfillAPIRequest'\nimport createProduct from './utils/createProduct'\nimport createAppData from './utils/createAppData'\nimport getBase64ForImage from 'react-storefront/utils/getBase64ForImage'\n\nfunction asciiSum(string = '') {\n  return string.split('').reduce((s, e) => s + e.charCodeAt(), 0)\n}\n\nexport default async function product(params, req, res) {\n  const { id, color, size } = params\n\n  const result = await fulfillAPIRequest(req, {\n    appData: createAppData,\n    pageData: () => getPageData(id),\n  })\n\n  // When a query parameter exists, we can fetch custom product data\n  // pertaining to specific filters.\n  if (color || size) {\n    const data = await getPageData(id)\n    data.carousel = { index: 0 }\n    // A price for the fetched product variant would be included in\n    // the response, but for demo purposes only, we are setting the\n    // price based on the color name.\n    const mockPrice = (asciiSum(color) + asciiSum(size)) / 100\n    data.product.price = mockPrice\n    data.product.priceText = `$${mockPrice.toFixed(2)}`\n    return data\n  }\n\n  return result\n}\n\nasync function getPageData(id) {\n  const result = {\n    title: `Product ${id}`,\n    product: createProduct(id),\n    breadcrumbs: [\n      {\n        text: `Home`,\n        href: '/',\n      },\n      {\n        text: `Subcategory ${id}`,\n        as: `/s/${id}`,\n        href: '/s/[subcategoryId]',\n      },\n    ],\n  }\n\n  const mainProductImage = result.product.media.full[0]\n  mainProductImage.src = await getBase64ForImage(mainProductImage.src)\n\n  return result\n}\n"],"file":"product.js"}