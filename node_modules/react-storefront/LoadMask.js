"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = LoadMask;
exports.styles = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _clsx2 = _interopRequireDefault(require("clsx"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styles = require("@material-ui/core/styles");

var _CircularProgress = _interopRequireDefault(require("@material-ui/core/CircularProgress"));

var styles = function styles(theme) {
  return {
    /**
     * Styles applied to the root element.
     */
    root: {
      position: 'absolute',
      top: 0,
      left: 0,
      height: '100%',
      width: '100%',
      display: 'none',
      justifyContent: 'center',
      alignItems: 'center',
      background: theme.palette.background["default"],
      zIndex: 1
    },

    /**
     * Styles applied to the root element when [`fullscreen`](#prop-fullscreen) is `true`.
     */
    fullscreen: {
      height: "calc(100vh - ".concat(theme.loadMaskOffsetTop, "px)"),
      bottom: 'initial',
      zIndex: theme.zIndex.modal - 20,
      'body.moov-amp &': {
        position: 'fixed',
        marginTop: 0,
        opacity: 0.8
      }
    },

    /**
     * Styles applied to the root element when [`transparent`](#prop-transparent) is `true`.
     */
    transparent: {
      backgroundColor: 'rgba(255,255,255,0.5)'
    },

    /**
     * Styles applied to the root element when [`align`](#prop-align) is `'top'`.
     */
    alignTop: {
      alignItems: 'flex-start',
      paddingTop: '200px'
    },

    /**
     * Styles applied to the root element when [`show`](#prop-show) is `true`.
     */
    show: {
      display: 'flex'
    }
  };
};

exports.styles = styles;
var useStyles = (0, _styles.makeStyles)(styles, {
  name: 'RSFLoadMask'
});
/**
 * A load mask to display when fetching data from the server.
 */

function LoadMask(_ref) {
  var _clsx;

  var classes = _ref.classes,
      show = _ref.show,
      style = _ref.style,
      className = _ref.className,
      children = _ref.children,
      fullscreen = _ref.fullscreen,
      transparent = _ref.transparent,
      align = _ref.align;
  classes = useStyles({
    classes: classes
  });
  (0, _react.useEffect)(function () {
    if (fullscreen) {
      document.body.style.overflow = show ? 'hidden' : 'visible';
    }
  }, [show, fullscreen]);
  (0, _react.useEffect)(function () {
    return function () {
      if (fullscreen) {
        document.body.style.overflow = 'visible';
      }
    };
  });
  return /*#__PURE__*/_react["default"].createElement("div", {
    style: style,
    className: (0, _clsx2["default"])(className, classes.root, (_clsx = {}, (0, _defineProperty2["default"])(_clsx, classes.show, show !== false), (0, _defineProperty2["default"])(_clsx, classes.fullscreen, fullscreen), (0, _defineProperty2["default"])(_clsx, classes.transparent, transparent), (0, _defineProperty2["default"])(_clsx, classes.alignTop, align === 'top'), _clsx))
  }, children || /*#__PURE__*/_react["default"].createElement(_CircularProgress["default"], {
    className: classes.progress,
    color: "secondary"
  }));
}

LoadMask.propTypes = {
  /**
   * Override or extend the styles applied to the component. See [CSS API](#css) below for more details.
   */
  classes: _propTypes["default"].object,

  /**
   * If defined, `true` will display the load mask, while `false` will be hide it.
   */
  show: _propTypes["default"].bool,

  /**
   * Set to `true` to toggle the overflow style on the body when showing.
   */
  fullscreen: _propTypes["default"].bool,

  /**
   * Set to `true` to show partially background through the load mask
   */
  transparent: _propTypes["default"].bool,

  /**
   * Set to `'top'` to show the spinner near the top.
   */
  align: _propTypes["default"].oneOf(['center', 'top'])
};
LoadMask.defaultProps = {
  fullscreen: false,
  transparent: false,
  align: 'center'
};
//# sourceMappingURL=LoadMask.js.map