{"version":3,"sources":["../src/ErrorBoundary.js"],"names":["ErrorBoundary","error","onError","props","windowErrorEvent","window","addEventListener","event","windowUnhandledRejectionEvent","reason","removeEventListener","info","state","message","children","Component","PropTypes","func","Function","prototype"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;AAEA;;;;;IAKqBA,a;;;;;;;;;;;;;;;8FAiBX;AACNC,MAAAA,KAAK,EAAE;AADD,K;;;;;;wCAIY;AAAA,UACVC,OADU,GACE,KAAKC,KADP,CACVD,OADU;AAGlB,WAAKE,gBAAL,GAAwBC,MAAM,CAACC,gBAAP,CAAwB,OAAxB,EAAiC,UAAAC,KAAK,EAAI;AAChEL,QAAAA,OAAO,CAAC;AAAED,UAAAA,KAAK,EAAEM,KAAK,CAACN;AAAf,SAAD,CAAP;AACD,OAFuB,CAAxB;AAIA,WAAKO,6BAAL,GAAqCH,MAAM,CAACC,gBAAP,CAAwB,oBAAxB,EAA8C,UAAAC,KAAK,EAAI;AAC1FL,QAAAA,OAAO,CAAC;AAAED,UAAAA,KAAK,EAAEM,KAAK,CAACE;AAAf,SAAD,CAAP;AACD,OAFoC,CAArC;AAGD;;;2CAEsB;AACrBJ,MAAAA,MAAM,CAACK,mBAAP,CAA2B,OAA3B,EAAoC,KAAKN,gBAAzC;AACAC,MAAAA,MAAM,CAACK,mBAAP,CAA2B,oBAA3B,EAAiD,KAAKF,6BAAtD;AACD;AAED;;;;;;;;sCAKkBP,K,EAAOU,I,EAAM;AAAA,UACrBT,OADqB,GACT,KAAKC,KADI,CACrBD,OADqB,EAG7B;;AACAA,MAAAA,OAAO,CAAC;AAAED,QAAAA,KAAK,EAALA;AAAF,OAAD,CAAP;AACD;;;6BAEQ;AACP,UAAI,KAAKW,KAAL,CAAWX,KAAf,EAAsB;AACpB,4BAAO,6CAAM,KAAKW,KAAL,CAAWX,KAAX,CAAiBY,OAAvB,CAAP;AACD;;AAED,aAAO,KAAKV,KAAL,CAAWW,QAAlB;AACD;;;6CA3C+Bb,K,EAAO;AACrC,aAAO;AAAEA,QAAAA,KAAK,EAALA;AAAF,OAAP;AACD;;;EAfwCc,gB;;;iCAAtBf,a,eACA;AACjB;;;;AAIAE,EAAAA,OAAO,EAAEc,sBAAUC;AALF,C;iCADAjB,a,kBASG;AACpBE,EAAAA,OAAO,EAAEgB,QAAQ,CAACC;AADE,C","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\n/**\n * An internal component that catches errors durring rendering, sets the\n * error, stack, and page properties of the app state accordingly, and calls\n * the registered error reporter if one is configured.\n */\nexport default class ErrorBoundary extends Component {\n  static propTypes = {\n    /**\n     * A function to call whenever an error occurs.  The function is passed an\n     * object with `error` (the error message) and `stack` (the stack trace as a string).\n     */\n    onError: PropTypes.func,\n  }\n\n  static defaultProps = {\n    onError: Function.prototype,\n  }\n\n  static getDerivedStateFromError(error) {\n    return { error }\n  }\n\n  state = {\n    error: null,\n  }\n\n  componentDidMount() {\n    const { onError } = this.props\n\n    this.windowErrorEvent = window.addEventListener('error', event => {\n      onError({ error: event.error })\n    })\n\n    this.windowUnhandledRejectionEvent = window.addEventListener('unhandledrejection', event => {\n      onError({ error: event.reason })\n    })\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('error', this.windowErrorEvent)\n    window.removeEventListener('unhandledrejection', this.windowUnhandledRejectionEvent)\n  }\n\n  /**\n   * When an error is caught, call the error reporter and update the app state\n   * @param {Error} error\n   * @param {Object} info\n   */\n  componentDidCatch(error, info) {\n    const { onError } = this.props\n\n    // report the error\n    onError({ error })\n  }\n\n  render() {\n    if (this.state.error) {\n      return <div>{this.state.error.message}</div>\n    }\n\n    return this.props.children\n  }\n}\n"],"file":"ErrorBoundary.js"}