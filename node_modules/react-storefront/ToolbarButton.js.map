{"version":3,"sources":["../src/ToolbarButton.js"],"names":["styles","theme","wrap","display","flexDirection","justifyContent","alignItems","typography","caption","useStyles","name","ToolbarButton","ref","icon","label","classes","children","others","buttonClasses","propTypes","PropTypes","object","element","oneOfType","string"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AACA;;;;AAEA;;;;;;AAEO,IAAMA,MAAM,GAAG,SAATA,MAAS,CAAAC,KAAK;AAAA,SAAK;AAC9B;;;AAGAC,IAAAA,IAAI;AACFC,MAAAA,OAAO,EAAE,MADP;AAEFC,MAAAA,aAAa,EAAE,QAFb;AAGFC,MAAAA,cAAc,EAAE,QAHd;AAIFC,MAAAA,UAAU,EAAE;AAJV,OAKCL,KAAK,CAACM,UAAN,CAAiBC,OALlB;AAJ0B,GAAL;AAAA,CAApB;;;AAaP,IAAMC,SAAS,GAAG,wBAAWT,MAAX,EAAmB;AAAEU,EAAAA,IAAI,EAAE;AAAR,CAAnB,CAAlB;AAEA;;;;;AAIA,IAAMC,aAAa,gBAAG,uBAAW,gBAAqDC,GAArD,EAA6D;AAAA,MAA1DC,IAA0D,QAA1DA,IAA0D;AAAA,MAApDC,KAAoD,QAApDA,KAAoD;AAAA,0BAA7CC,OAA6C;AAAA,MAA7CA,OAA6C,6BAAnC,EAAmC;AAAA,MAA/BC,QAA+B,QAA/BA,QAA+B;AAAA,MAAlBC,MAAkB;AAAA,iBAC3DF,OAD2D;AAAA,MACtFb,IADsF,YACtFA,IADsF;AAAA,MAC7EgB,aAD6E;AAE5FH,EAAAA,OAAO,GAAGN,SAAS,CAAC;AAAEM,IAAAA,OAAO,EAAE;AAAEb,MAAAA,IAAI,EAAJA;AAAF;AAAX,GAAD,CAAnB;AAEA,sBACE,gCAAC,sBAAD;AAAY,IAAA,GAAG,EAAEU,GAAjB;AAAsB,IAAA,OAAO,EAAEM;AAA/B,KAAkDD,MAAlD,gBACE;AAAK,IAAA,SAAS,EAAEF,OAAO,CAACb;AAAxB,KACGW,IADH,eAEE,6CAAMC,KAAN,CAFF,CADF,EAKGE,QALH,CADF;AASD,CAbqB,CAAtB;AAeAL,aAAa,CAACQ,SAAd,GAA0B;AACxB;;;AAGAJ,EAAAA,OAAO,EAAEK,sBAAUC,MAJK;;AAMxB;;;AAGAR,EAAAA,IAAI,EAAEO,sBAAUE,OATQ;;AAWxB;;;AAGAR,EAAAA,KAAK,EAAEM,sBAAUG,SAAV,CAAoB,CAACH,sBAAUI,MAAX,EAAmBJ,sBAAUE,OAA7B,CAApB;AAdiB,CAA1B;eAiBeX,a","sourcesContent":["import React, { forwardRef } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { IconButton } from '@material-ui/core'\nimport PropTypes from 'prop-types'\n\nexport const styles = theme => ({\n  /**\n   * Styles applied to the content wrapper element inside the button\n   */\n  wrap: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    ...theme.typography.caption,\n  },\n})\n\nconst useStyles = makeStyles(styles, { name: 'RSFToolbarButton' })\n\n/**\n * A toolbar button with optional label.  Use these in your AppBar. All additional\n * props are spread to the underlying material-ui IconButton.\n */\nconst ToolbarButton = forwardRef(({ icon, label, classes = {}, children, ...others }, ref) => {\n  let { wrap, ...buttonClasses } = classes\n  classes = useStyles({ classes: { wrap } })\n\n  return (\n    <IconButton ref={ref} classes={buttonClasses} {...others}>\n      <div className={classes.wrap}>\n        {icon}\n        <div>{label}</div>\n      </div>\n      {children}\n    </IconButton>\n  )\n})\n\nToolbarButton.propTypes = {\n  /**\n   * Override or extend the styles applied to the component. See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * The icon to use for the button.\n   */\n  icon: PropTypes.element,\n\n  /**\n   * The label text for the button.\n   */\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n}\n\nexport default ToolbarButton\n"],"file":"ToolbarButton.js"}