"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = Breadcrumbs;
exports.styles = void 0;

var _react = _interopRequireDefault(require("react"));

var _KeyboardArrowRight = _interopRequireDefault(require("@material-ui/icons/KeyboardArrowRight"));

var _Link = _interopRequireDefault(require("./link/Link"));

var _clsx = _interopRequireDefault(require("clsx"));

var _Typography = _interopRequireDefault(require("@material-ui/core/Typography"));

var _Container = _interopRequireDefault(require("@material-ui/core/Container"));

var _styles = require("@material-ui/core/styles");

var _propTypes = _interopRequireDefault(require("prop-types"));

var styles = function styles(theme) {
  return {
    /**
     * Styles applied to the root element.
     */
    breadcrumbs: {
      backgroundColor: '#F4F2F1',
      padding: '12px 0',
      '& a': {
        color: theme.palette.text.primary,
        textDecoration: 'none'
      }
    },

    /**
     * Styles applied to the separators.
     */
    separator: {
      height: '12px',
      position: 'relative',
      top: '2px',
      width: '16px'
    },

    /**
     * Styles applied to the currently active breadcrumb's element.
     */
    current: {
      fontWeight: 'bold',
      color: theme.palette.text.primary
    }
  };
};

exports.styles = styles;
var useStyles = (0, _styles.makeStyles)(styles, 'RSFBreadcrumbs');

function Breadcrumbs(_ref) {
  var items = _ref.items,
      classes = _ref.classes;
  classes = useStyles({
    classes: classes
  });
  return /*#__PURE__*/_react["default"].createElement(_Typography["default"], {
    display: "block",
    className: classes.breadcrumbs,
    variant: "caption"
  }, /*#__PURE__*/_react["default"].createElement(_Container["default"], null, items && items.map(function (item, i) {
    var arrow = i > 0 ? /*#__PURE__*/_react["default"].createElement(_KeyboardArrowRight["default"], {
      className: classes.separator
    }) : null;
    var isLastItem = items.length - 1 === i;

    if (item.href) {
      return /*#__PURE__*/_react["default"].createElement("span", {
        key: i,
        className: (0, _clsx["default"])(isLastItem && classes.current)
      }, arrow, /*#__PURE__*/_react["default"].createElement(_Link["default"], {
        href: item.href,
        as: item.as
      }, item.text));
    } else {
      return /*#__PURE__*/_react["default"].createElement("span", {
        key: i,
        className: (0, _clsx["default"])(isLastItem && classes.current)
      }, arrow, item.text);
    }
  }), /*#__PURE__*/_react["default"].createElement("span", null, "\xA0")));
}

Breadcrumbs.propTypes = {
  /**
   * Override or extend the styles applied to the component. See [CSS API](#css) below for more details.
   */
  classes: _propTypes["default"].object,

  /**
   * The items to display, each with text, [`href`](/apiReference/link/Link#prop-href), and
   * [`as`](/apiReference/link/Link#props-as) values. If `false`, no breadcrumbs will be displayed.
   */
  items: _propTypes["default"].oneOfType([_propTypes["default"].arrayOf(_propTypes["default"].shape({
    text: _propTypes["default"].string,
    as: _propTypes["default"].string,
    href: _propTypes["default"].string
  })), _propTypes["default"].bool])
};
//# sourceMappingURL=Breadcrumbs.js.map