"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = ExpandableSection;
exports.styles = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _clsx5 = _interopRequireDefault(require("clsx"));

var _ExpansionPanel = _interopRequireDefault(require("@material-ui/core/ExpansionPanel"));

var _ExpansionPanelDetails = _interopRequireDefault(require("@material-ui/core/ExpansionPanelDetails"));

var _ExpansionPanelSummary = _interopRequireDefault(require("@material-ui/core/ExpansionPanelSummary"));

var _Typography = _interopRequireDefault(require("@material-ui/core/Typography"));

var _ExpandMore = _interopRequireDefault(require("@material-ui/icons/ExpandMore"));

var _styles = require("@material-ui/core/styles");

var _useStateFromProp3 = _interopRequireDefault(require("./hooks/useStateFromProp"));

var _withDefaultHandler = _interopRequireDefault(require("./utils/withDefaultHandler"));

var styles = function styles(theme) {
  return {
    /**
     * Styles applied to the root element.
     */
    root: {
      boxShadow: 'none',
      borderBottom: "1px solid ".concat(theme.palette.divider),
      background: 'transparent',
      '&::before': {
        display: 'none'
      },
      '& > *:first-child': {
        padding: '0',
        minHeight: '0'
      }
    },

    /**
     * Styles applied to the root element if [`margins`](#prop-margins) is `true`.
     */
    margins: {
      padding: "0 ".concat(theme.spacing(2), "px")
    },

    /**
     * Styles applied to the caption element.
     */
    caption: {
      transition: 'opacity .2s linear'
    },

    /**
     * Styles applied to the caption element when the section is expanded.
     */
    expandedCaption: {
      opacity: 0
    },

    /**
     * Styles applied to the body element of the expansion panel.
     */
    details: {
      padding: theme.spacing(0, 0, 2, 0),
      display: 'flex',
      flexDirection: 'column'
    },

    /**
     * Styles applied to the summary element of the expansion panel.
     */
    summary: {
      '&:first-child': {
        padding: theme.spacing(1, 0)
      }
    },

    /**
     * Styles applied to the content of the summary element of the expansion panel.
     */
    summaryContent: {
      display: 'flex',
      justifyContent: 'space-between',
      alignItems: 'center',
      margin: 0,
      '[aria-expanded=true] > &': {
        margin: '0 !important'
      }
    },

    /**
     * Styles applied to the summary element of the expansion panel when the section is expanded.
     */
    summaryExpanded: {},

    /**
     * Styles applied to the expand icon of the expansion panel when the section is expanded if the
     * [`ExpandIcon`](#prop-ExpandIcon) is different than the [`CollapseIcon`](#prop-CollapseIcon).
     */
    expandIconExpanded: {},

    /**
     * Styles applied to the expand icon of the expansion panel when the [`ExpandIcon`](#prop-ExpandIcon)
     * is different than the [`CollapseIcon`](#prop-CollapseIcon).
     */
    summaryIconWrap: {
      right: 0,
      padding: theme.spacing(0, 1)
    },

    /**
     * Styles applied to the summary element of the expansion panel.
     */
    withCollapseIcon: {
      transform: 'rotate(0deg) !important'
    },

    /**
     * Styles applied to the root element when the section is expanded.
     */
    expandedPanel: {
      '&$root': {
        margin: 0
      }
    },

    /**
     * Styles applied to the title element.
     */
    title: {},

    /**
     * Styles applied to the expand icon element.
     */
    expandIcon: {
      height: 24,
      width: 24
    },

    /**
     * Styles applied to the collapse icon element.
     */
    collapseIcon: {
      height: 24,
      width: 24
    }
  };
};

exports.styles = styles;
var useStyles = (0, _styles.makeStyles)(styles, {
  name: 'RSFExpandableSection'
});
/**
 * An expandable info section.  Example:
 *
 * ```js
 *  <ExpandableSection title="Help" caption="Click here for more info">
 *    <Typography>This is a help section</Typography>
 *  </ExpandableSection>
 * ```
 */

function ExpandableSection(props) {
  var _clsx3, _clsx4;

  var classes = props.classes,
      _props$children = props.children,
      children = _props$children === void 0 ? [] : _props$children,
      title = props.title,
      caption = props.caption,
      expanded = props.expanded,
      defaultExpanded = props.defaultExpanded,
      ExpandIcon = props.ExpandIcon,
      CollapseIcon = props.CollapseIcon,
      margins = props.margins,
      onChange = props.onChange,
      others = (0, _objectWithoutProperties2["default"])(props, ["classes", "children", "title", "caption", "expanded", "defaultExpanded", "ExpandIcon", "CollapseIcon", "margins", "onChange"]);
  classes = useStyles({
    classes: classes
  });

  var _useStateFromProp = (0, _useStateFromProp3["default"])(expanded || defaultExpanded || false),
      _useStateFromProp2 = (0, _slicedToArray2["default"])(_useStateFromProp, 2),
      expandedState = _useStateFromProp2[0],
      setExpandedState = _useStateFromProp2[1];
  /**
   * Gets the classes for the ExpansionPanelSummary
   * Here we add a class to remove the rotate transform if we're using a
   * separate icon for the collapse state.
   */


  function getSummaryClasses() {
    var _clsx, _clsx2;

    var result = {
      root: (0, _clsx5["default"])((_clsx = {}, (0, _defineProperty2["default"])(_clsx, classes.summary, true), (0, _defineProperty2["default"])(_clsx, classes.summaryExpanded, expandedState), _clsx)),
      content: classes.summaryContent,
      expandIcon: (0, _clsx5["default"])((_clsx2 = {}, (0, _defineProperty2["default"])(_clsx2, classes.summaryIconWrap, true), (0, _defineProperty2["default"])(_clsx2, classes.expandIconExpanded, expandedState), _clsx2))
    };

    if (CollapseIcon !== ExpandIcon) {
      result.expandIcon = classes.withCollapseIcon;
    }

    return result;
  }

  var handleChange = (0, _withDefaultHandler["default"])(onChange, function (e, expanded) {
    if (props.expanded == null) {
      setExpandedState(expanded);
    }
  });
  return /*#__PURE__*/_react["default"].createElement(_ExpansionPanel["default"], (0, _extends2["default"])({
    classes: {
      root: (0, _clsx5["default"])((_clsx3 = {}, (0, _defineProperty2["default"])(_clsx3, classes.root, true), (0, _defineProperty2["default"])(_clsx3, classes.margins, margins), _clsx3)),
      expanded: classes.expandedPanel
    },
    expanded: expandedState,
    defaultExpanded: defaultExpanded
  }, others, {
    onChange: handleChange
  }), /*#__PURE__*/_react["default"].createElement(_ExpansionPanelSummary["default"], {
    expandIcon: expandedState ? /*#__PURE__*/_react["default"].createElement(CollapseIcon, {
      className: classes.collapseIcon
    }) : /*#__PURE__*/_react["default"].createElement(ExpandIcon, {
      className: classes.expandIcon
    }),
    classes: getSummaryClasses()
  }, /*#__PURE__*/_react["default"].createElement(_Typography["default"], {
    variant: "subtitle1",
    className: classes.title
  }, title), caption && /*#__PURE__*/_react["default"].createElement(_Typography["default"], {
    variant: "caption",
    className: (0, _clsx5["default"])((_clsx4 = {}, (0, _defineProperty2["default"])(_clsx4, classes.caption, true), (0, _defineProperty2["default"])(_clsx4, classes.expandedCaption, expandedState), _clsx4))
  }, caption)), /*#__PURE__*/_react["default"].createElement(_ExpansionPanelDetails["default"], {
    classes: {
      root: classes.details
    }
  }, children));
}

ExpandableSection.propTypes = {
  /**
   * The title for the header of the expandable section.
   */
  title: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].element]),

  /**
   * Text to display to the right of the heading.
   */
  caption: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].element]),

  /**
   * The icon to use for collapsed groups.
   */
  ExpandIcon: _propTypes["default"].elementType,

  /**
   * The icon to use for expanded groups.
   */
  CollapseIcon: _propTypes["default"].elementType,

  /**
   * If `false`, the default left and right margins are removed.
   */
  margins: _propTypes["default"].bool,

  /**
   * Can be defined to control the expanded state externally with props, rather than having it
   * controlled internally by state.
   */
  expanded: _propTypes["default"].bool,

  /**
   * Defaults the panel to being expanded, without controlling the state.
   */
  defaultExpanded: _propTypes["default"].bool
};
ExpandableSection.defaultProps = {
  margins: true,
  defaultExpanded: false,
  ExpandIcon: _ExpandMore["default"],
  CollapseIcon: _ExpandMore["default"]
};
//# sourceMappingURL=ExpandableSection.js.map