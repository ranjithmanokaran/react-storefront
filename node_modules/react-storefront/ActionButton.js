"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.styles = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _styles = require("@material-ui/core/styles");

var _Button = _interopRequireDefault(require("@material-ui/core/Button"));

var _Typography = _interopRequireDefault(require("@material-ui/core/Typography"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var styles = function styles(theme) {
  return {
    /**
     * Styles passed through to the [`Button`](https://material-ui.com/api/button/#css) element's
     * `label` CSS rule.
     */
    label: {
      justifyContent: 'space-between',
      alignItems: 'baseline',
      textTransform: 'none'
    },

    /**
     * Styles applied to the label container.
     */
    caption: {
      textTransform: 'none',
      fontWeight: 'bold'
    },

    /**
     * Styles passed through to the [`Button`](https://material-ui.com/api/button/#css) element's
     * `contained` CSS rule.
     */
    button: {
      boxShadow: 'none',
      backgroundColor: theme.palette.grey[200]
    },

    /**
     * Styles applied to the values container.
     */
    value: {
      color: theme.palette.text.primary,
      whiteSpace: 'nowrap',
      textOverflow: 'ellipses',
      marginLeft: '10px'
    }
  };
};

exports.styles = styles;
var useStyles = (0, _styles.makeStyles)(styles, {
  name: 'RSFActionButton'
});
/**
 * This button class displays a label and value.
 *
 * Example:
 *
 * ```js
 *  <ActionButton label="Sort" value="Lowest Price" onClick={openSortMenu} />
 * ```
 */

var ActionButton = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
  var label = _ref.label,
      value = _ref.value,
      children = _ref.children,
      _ref$classes = _ref.classes,
      classes = _ref$classes === void 0 ? {} : _ref$classes,
      props = (0, _objectWithoutProperties2["default"])(_ref, ["label", "value", "children", "classes"]);
  var _classes = classes,
      caption = _classes.caption,
      valueClasses = _classes.value,
      button = _classes.button,
      labelClasses = _classes.label,
      otherClasses = (0, _objectWithoutProperties2["default"])(_classes, ["caption", "value", "button", "label"]);
  classes = useStyles({
    classes: {
      caption: caption,
      value: valueClasses,
      button: button,
      label: labelClasses
    }
  });
  return /*#__PURE__*/_react["default"].createElement(_Button["default"], (0, _extends2["default"])({
    ref: ref,
    variant: "contained",
    classes: _objectSpread({
      contained: classes.button,
      label: classes.label
    }, otherClasses)
  }, props), /*#__PURE__*/_react["default"].createElement(_Typography["default"], {
    variant: "button",
    className: classes.caption
  }, label), /*#__PURE__*/_react["default"].createElement(_Typography["default"], {
    variant: "caption",
    className: classes.value
  }, value));
});
ActionButton.propTypes = {
  /**
   * Override or extend the styles applied to the component. See [CSS API](#css) below for more details.
   */
  classes: _propTypes["default"].object,

  /**
   * The label to display on the left side of the button.
   */
  label: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].element]),

  /**
   * The value to display on the right side of the button.
   */
  value: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].element])
};
var _default = ActionButton;
exports["default"] = _default;
//# sourceMappingURL=ActionButton.js.map