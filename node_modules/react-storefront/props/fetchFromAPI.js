"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = fetchFromAPI;

var _fetch = _interopRequireDefault(require("../fetch"));

var _getAPIURL = _interopRequireDefault(require("../api/getAPIURL"));

/**
 * A convenience function to be used in `getInitialProps` to fetch data for the page from an
 * API endpoint at the same path as the page being requested.  So for example, when rendering
 * `/p/1`, this function will fetch data from `/api/p/1?__v__={__NEXT_DATA__.buildId}`.
 *
 * ```js
 * import fetchFromAPI from 'react-storefront/props/fetchFromAPI'
 * import createLazyProps from 'react-storefront/props/createLazyProps'
 *
 * Product.getInitialProps = createLazyProps(opts => {
 *   return fetchFromAPI(opts)
 * })
 * ```
 *
 * Or simply:
 *
 * ```js
 * Product.getInitialProps = createLazyProps(fetchFromAPI)
 * ```
 *
 * @param {Object} opts The options object provided to `getInitialProps`
 * @return {Promise} A promise that resolves to the data that the page should display
 */
function fetchFromAPI(_ref) {
  var req = _ref.req,
      asPath = _ref.asPath,
      pathname = _ref.pathname;
  var host = req ? process.env.API_HOST || req.headers['host'] : '';
  var protocol = '';

  if (req) {
    protocol = 'https://';

    if (host.startsWith('localhost') || host.startsWith('127.0.0.1')) {
      protocol = 'http://';
    }
  }

  var uri = (0, _getAPIURL["default"])(asPath);
  var headers = {};

  if (req) {
    // on the server
    if (uri.indexOf('?') === -1) {
      uri = uri + '?_includeAppData=1';
    } else {
      uri = uri + '&_includeAppData=1';
    }

    headers = {
      host: req.headers['host'],
      'x-next-page': "/api".concat(pathname.replace(/\/$/, '')),
      cookie: req.headers.cookie
    };
  }

  var url = "".concat(protocol).concat(host).concat(uri);
  return (0, _fetch["default"])(url, {
    credentials: 'include',
    headers: headers
  }).then(function (res) {
    return res.json();
  });
}
//# sourceMappingURL=fetchFromAPI.js.map