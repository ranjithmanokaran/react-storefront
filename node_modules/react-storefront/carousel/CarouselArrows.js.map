{"version":3,"sources":["../../src/carousel/CarouselArrows.js"],"names":["styles","theme","arrows","arrow","position","top","marginTop","leftArrow","left","rightArrow","right","icon","useStyles","name","CarouselArrows","className","classes","selected","count","setSelected","infinite","leftArrowLabel","rightArrowLabel","createOnClickArrow","idxChange","evt","preventDefault","nextSelectedIndex","root","propTypes","PropTypes","object","string","number","func","defaultProps"],"mappings":";;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;AAIO,IAAMA,MAAM,GAAG,SAATA,MAAS,CAAAC,KAAK;AAAA,SAAK;AAC9B;;;AAGAC,IAAAA,MAAM,EAAE,EAJsB;;AAM9B;;;AAGAC,IAAAA,KAAK,EAAE;AACLC,MAAAA,QAAQ,EAAE,UADL;AAELC,MAAAA,GAAG,EAAE,KAFA;AAGLC,MAAAA,SAAS,EAAE;AAHN,KATuB;;AAe9B;;;AAGAC,IAAAA,SAAS,EAAE;AACTC,MAAAA,IAAI,EAAE;AADG,KAlBmB;;AAsB9B;;;AAGAC,IAAAA,UAAU,EAAE;AACVC,MAAAA,KAAK,EAAE;AADG,KAzBkB;;AA6B9B;;;AAGAC,IAAAA,IAAI,EAAE;AAhCwB,GAAL;AAAA,CAApB;;;AAmCP,IAAMC,SAAS,GAAG,4BAAWZ,MAAX,EAAmB;AAAEa,EAAAA,IAAI,EAAE;AAAR,CAAnB,CAAlB;AAEA;;;;;AAIe,SAASC,cAAT,OASZ;AAAA,MARDC,SAQC,QARDA,SAQC;AAAA,MAPDC,OAOC,QAPDA,OAOC;AAAA,MANDC,QAMC,QANDA,QAMC;AAAA,MALDC,KAKC,QALDA,KAKC;AAAA,MAJDC,WAIC,QAJDA,WAIC;AAAA,MAHDC,QAGC,QAHDA,QAGC;AAAA,MAFDC,cAEC,QAFDA,cAEC;AAAA,MADDC,eACC,QADDA,eACC;AACDN,EAAAA,OAAO,GAAGJ,SAAS,CAAC;AAAEI,IAAAA,OAAO,EAAPA;AAAF,GAAD,CAAnB;AAEA,MAAMO,kBAAkB,GAAG,wBACzB,UAAAC,SAAS;AAAA,WAAI,UAAAC,GAAG,EAAI;AAClBA,MAAAA,GAAG,CAACC,cAAJ;;AAEA,UAAI,CAACN,QAAL,EAAe;AACbD,QAAAA,WAAW,CAACF,QAAQ,GAAGO,SAAZ,CAAX;AACA;AACD,OANiB,CAQlB;;;AACA,UAAIG,iBAAiB,GAAGV,QAAQ,GAAGO,SAAnC;;AACA,UAAIG,iBAAiB,GAAG,CAApB,GAAwBT,KAA5B,EAAmC;AACjCS,QAAAA,iBAAiB,GAAG,CAApB;AACD,OAFD,MAEO,IAAIA,iBAAiB,GAAG,CAAxB,EAA2B;AAChCA,QAAAA,iBAAiB,GAAGT,KAAK,GAAG,CAA5B;AACD;;AAEDC,MAAAA,WAAW,CAACQ,iBAAD,CAAX;AACD,KAjBQ;AAAA,GADgB,EAmBzB,CAACV,QAAD,EAAWE,WAAX,EAAwBD,KAAxB,EAA+BE,QAA/B,CAnByB,CAA3B;AAsBA,sBACE;AAAK,IAAA,SAAS,EAAE,sBAAKJ,OAAO,CAACd,MAAb,EAAqBa,SAArB;AAAhB,KACG,CAACE,QAAQ,KAAK,CAAb,IAAkBG,QAAnB,kBACC,gCAAC,sBAAD;AACE,IAAA,SAAS,EAAE,sBAAKJ,OAAO,CAACb,KAAb,EAAoBa,OAAO,CAACT,SAA5B,CADb;AAEE,IAAA,OAAO,EAAEgB,kBAAkB,CAAC,CAAC,CAAF,CAF7B;AAGE,kBAAYF;AAHd,kBAKE,gCAAC,uBAAD;AAAa,IAAA,OAAO,EAAE;AAAEO,MAAAA,IAAI,EAAEZ,OAAO,CAACL;AAAhB;AAAtB,IALF,CAFJ,EAUG,CAACM,QAAQ,KAAKC,KAAK,GAAG,CAArB,IAA0BE,QAA3B,kBACC,gCAAC,sBAAD;AACE,IAAA,SAAS,EAAE,sBAAKJ,OAAO,CAACb,KAAb,EAAoBa,OAAO,CAACP,UAA5B,CADb;AAEE,IAAA,OAAO,EAAEc,kBAAkB,CAAC,CAAD,CAF7B;AAGE,kBAAYD;AAHd,kBAKE,gCAAC,wBAAD;AAAc,IAAA,OAAO,EAAE;AAAEM,MAAAA,IAAI,EAAEZ,OAAO,CAACL;AAAhB;AAAvB,IALF,CAXJ,CADF;AAsBD;;AAEDG,cAAc,CAACe,SAAf,GAA2B;AACzB;;;AAGAb,EAAAA,OAAO,EAAEc,sBAAUC,MAJM;;AAMzB;;;AAGAhB,EAAAA,SAAS,EAAEe,sBAAUE,MATI;;AAWzB;;;AAGAf,EAAAA,QAAQ,EAAEa,sBAAUG,MAdK;;AAgBzB;;;AAGAd,EAAAA,WAAW,EAAEW,sBAAUI,IAnBE;;AAqBzB;;;AAGAhB,EAAAA,KAAK,EAAEY,sBAAUG,MAxBQ;;AA0BzB;;;AAGAZ,EAAAA,cAAc,EAAES,sBAAUE,MA7BD;;AA+BzB;;;AAGAV,EAAAA,eAAe,EAAEQ,sBAAUE;AAlCF,CAA3B;AAqCAlB,cAAc,CAACqB,YAAf,GAA8B;AAC5Bd,EAAAA,cAAc,EAAE,UADY;AAE5BC,EAAAA,eAAe,EAAE;AAFW,CAA9B","sourcesContent":["import PropTypes from 'prop-types'\nimport React, { useCallback } from 'react'\nimport clsx from 'clsx'\nimport makeStyles from '@material-ui/core/styles/makeStyles'\nimport { IconButton } from '@material-ui/core'\nimport { ChevronLeft, ChevronRight } from '@material-ui/icons'\n\nexport const styles = theme => ({\n  /**\n   * Styles applied to the root element.\n   */\n  arrows: {},\n\n  /**\n   * Styles applied to each of the arrow icon buttons.\n   */\n  arrow: {\n    position: 'absolute',\n    top: '50%',\n    marginTop: '-24px',\n  },\n\n  /**\n   * Styles applied to the left arrow icon buttons.\n   */\n  leftArrow: {\n    left: 0,\n  },\n\n  /**\n   * Styles applied to the right arrow icon buttons.\n   */\n  rightArrow: {\n    right: 0,\n  },\n\n  /**\n   * Styles applied to each of the icon elements.\n   */\n  icon: {},\n})\n\nconst useStyles = makeStyles(styles, { name: 'RSFCarouselArrows' })\n\n/**\n * Arrows that are overlaid onto a [`Carousel`](/apiReference/carousel/Carousel) that will change\n * the slide shown when clicked.\n */\nexport default function CarouselArrows({\n  className,\n  classes,\n  selected,\n  count,\n  setSelected,\n  infinite,\n  leftArrowLabel,\n  rightArrowLabel,\n}) {\n  classes = useStyles({ classes })\n\n  const createOnClickArrow = useCallback(\n    idxChange => evt => {\n      evt.preventDefault()\n\n      if (!infinite) {\n        setSelected(selected + idxChange);\n        return;\n      }\n\n      // carousel loop-around calculations\n      let nextSelectedIndex = selected + idxChange;\n      if (nextSelectedIndex + 1 > count) {\n        nextSelectedIndex = 0;\n      } else if (nextSelectedIndex < 0) {\n        nextSelectedIndex = count - 1;\n      }\n\n      setSelected(nextSelectedIndex);\n    },\n    [selected, setSelected, count, infinite],\n  )\n\n  return (\n    <div className={clsx(classes.arrows, className)}>\n      {(selected !== 0 || infinite) && (\n        <IconButton\n          className={clsx(classes.arrow, classes.leftArrow)}\n          onClick={createOnClickArrow(-1)}\n          aria-label={leftArrowLabel}\n        >\n          <ChevronLeft classes={{ root: classes.icon }} />\n        </IconButton>\n      )}\n      {(selected !== count - 1 || infinite) && (\n        <IconButton\n          className={clsx(classes.arrow, classes.rightArrow)}\n          onClick={createOnClickArrow(1)}\n          aria-label={rightArrowLabel}\n        >\n          <ChevronRight classes={{ root: classes.icon }} />\n        </IconButton>\n      )}\n    </div>\n  )\n}\n\nCarouselArrows.propTypes = {\n  /**\n   * Override or extend the styles applied to the component. See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * CSS class to apply to the root element.\n   */\n  className: PropTypes.string,\n\n  /**\n   * Index of the currently selected slide in the [`Carousel`](/apiReference/carousel/Carousel).\n   */\n  selected: PropTypes.number,\n\n  /**\n   * Function to change the value of [`selected`](#prop-selected).\n   */\n  setSelected: PropTypes.func,\n\n  /**\n   * Total number of slides in the [`Carousel`](/apiReference/carousel/Carousel).\n   */\n  count: PropTypes.number,\n\n  /**\n   * Label given to the left arrow for accessbility purposes.\n   */\n  leftArrowLabel: PropTypes.string,\n\n  /**\n   * Label given to the right arrow for accessbility purposes.\n   */\n  rightArrowLabel: PropTypes.string,\n}\n\nCarouselArrows.defaultProps = {\n  leftArrowLabel: 'Previous',\n  rightArrowLabel: 'Next',\n}\n"],"file":"CarouselArrows.js"}