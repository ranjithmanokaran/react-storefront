{"version":3,"sources":["../../src/carousel/Carousel.js"],"names":["styles","theme","root","display","flexDirection","alignItems","position","flexBasis","swipeWrap","overflow","flex","height","autoPlaySwipeableViews","overflowY","hideTouchArrows","useStyles","name","AutoPlaySwipeableViews","SwipeableViews","VirtualizeSwipeableViews","AutoPlayVirtualizeSwipeableViews","useSelected","props","setSelected","selected","Carousel","React","forwardRef","ref","children","classes","className","style","swipeStyle","slideStyle","arrows","aboveAdornments","belowAdornments","onMouseEnter","onMouseLeave","onClick","indicators","autoplay","interval","infinite","count","length","Tag","slideRenderer","index","key","child","slide","cloneElement","onChangeIndex","nextSelectedIndex","propTypes","PropTypes","object","oneOf","arrayOf","element","bool","number","defaultProps"],"mappings":"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","sourcesContent":["import React, { Fragment, useCallback, useState } from 'react'\nimport clsx from 'clsx'\nimport { makeStyles } from '@material-ui/core/styles'\nimport SwipeableViews from 'react-swipeable-views'\nimport { autoPlay, virtualize } from 'react-swipeable-views-utils'\nimport PropTypes from 'prop-types'\nimport CarouselDots from './CarouselDots'\nimport CarouselArrows from './CarouselArrows'\nimport mod from '../utils/mod'\nimport Fill from '../Fill'\n\nconst styles = theme => ({\n  /**\n   * Styles applied to the root element.\n   */\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'stretch',\n    position: 'relative',\n    flexBasis: '100%',\n    '& img': {\n      display: 'block',\n    },\n  },\n\n  /**\n   * Styles applied to wrapper element of the swipe container.\n   */\n  swipeWrap: {\n    position: 'relative',\n    overflow: 'hidden',\n    flex: 1,\n    height: '100%',\n    '& .react-swipeable-view-container, & .react-swipeable-view-container > div': {\n      height: '100%',\n    },\n  },\n\n  autoPlaySwipeableViews: {\n    overflowY: 'hidden',\n    height: '100%',\n  },\n\n  '@media not all and (hover:none)': {\n    hideTouchArrows: {\n      display: 'none',\n    },\n  },\n})\n\nconst useStyles = makeStyles(styles, { name: 'RSFCarousel' })\n\nexport const AutoPlaySwipeableViews = autoPlay(SwipeableViews)\nexport const VirtualizeSwipeableViews = virtualize(SwipeableViews)\nexport const AutoPlayVirtualizeSwipeableViews = autoPlay(VirtualizeSwipeableViews)\n\nfunction useSelected(props) {\n  if (props.setSelected) {\n    return props\n  } else {\n    const [selected, setSelected] = useState(0)\n    return { selected, setSelected }\n  }\n}\n\n/**\n * A grouped display of elements that shows one element at a time, and changes to peer elements by\n * swiping to the left or right, or by clicking arrows on the sides of the component. Generally used\n * as a non-Amp option for the [`CarouselComponent`](/apiReference/carousel/MediaCarousel#prop-CarouselComponent)\n * prop within a [`MediaCarousel`](/apiReference/carousel/MediaCarousel).\n */\nconst Carousel = React.forwardRef((props, ref) => {\n  let {\n    height,\n    children,\n    classes,\n    className,\n    style,\n    swipeStyle,\n    slideStyle,\n    arrows,\n    aboveAdornments,\n    belowAdornments,\n    onMouseEnter,\n    onMouseLeave,\n    onClick,\n    indicators,\n    autoplay,\n    interval,\n    infinite,\n  } = props\n\n  classes = useStyles({ classes })\n\n  const { selected, setSelected } = useSelected(props)\n  const count = children && children.length\n\n  let Tag = infinite ? VirtualizeSwipeableViews : SwipeableViews\n  Tag = autoplay ? AutoPlaySwipeableViews : Tag\n  Tag = infinite && autoplay ? AutoPlayVirtualizeSwipeableViews : Tag\n\n  const slideRenderer = ({ index }) => {\n    const key = `slide-renderer-${index}`\n    const child = children[mod(index, count)]\n    if (!child) return null\n    const slide = React.cloneElement(child)\n    return <Fragment key={key}>{slide}</Fragment>\n  }\n\n  const onChangeIndex = useCallback((index) => {\n    if (!infinite) {\n      setSelected(index)\n      return\n    }\n\n    // carousel loop-around calculations\n    let nextSelectedIndex = index;\n    if (nextSelectedIndex + 1 > count) {\n      nextSelectedIndex = 0;\n    } else if (nextSelectedIndex < 0) {\n      nextSelectedIndex = count - 1;\n    }\n\n    setSelected(nextSelectedIndex)\n  }, [infinite, count, selected, setSelected])\n\n  return (\n    <div\n      ref={ref}\n      className={clsx(className, classes.root)}\n      style={style}\n      onMouseEnter={onMouseEnter}\n      onMouseLeave={onMouseLeave}\n      onClick={onClick}\n    >\n      {aboveAdornments}\n      <Fill height={height}>\n        <div className={classes.swipeWrap}>\n          <Tag\n            index={selected}\n            onChangeIndex={onChangeIndex}\n            className={classes.autoPlaySwipeableViews}\n            style={swipeStyle}\n            slideStyle={slideStyle}\n            slideRenderer={props.slideRenderer || slideRenderer}\n            interval={interval}\n            containerStyle={{ alignItems: 'center' }}\n          />\n          {arrows !== false && (\n            <CarouselArrows\n              className={arrows === 'desktop' ? classes.hideTouchArrows : null}\n              selected={selected}\n              setSelected={setSelected}\n              count={count}\n              infinite={infinite}\n            />\n          )}\n          {indicators && <CarouselDots count={count} selected={selected} />}\n        </div>\n      </Fill>\n      {belowAdornments}\n    </div>\n  )\n})\n\nCarousel.propTypes = {\n  /**\n   * Override or extend the styles applied to the component. See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * Set to `false` to hide arrows, `'desktop'` to only show them\n   * on non-touch devices, `'all'` to always show arrows.\n   */\n  arrows: PropTypes.oneOf([false, 'desktop', 'all']),\n\n  /**\n   * Nodes to render above the Carousel.\n   */\n  aboveAdornments: PropTypes.arrayOf(PropTypes.element),\n\n  /**\n   * Nodes to render below the Carousel.\n   */\n  belowAdornments: PropTypes.arrayOf(PropTypes.element),\n\n  /**\n   * If `true`, the Carousel will automatically cycle through the media elements.\n   */\n  autoplay: PropTypes.bool,\n\n  /**\n   * If true, scrolling past the last slide will cycle back to the first\n   */\n  infinite: PropTypes.bool,\n\n  /**\n   * The interval time (in milliseconds) for [`autoplay`](#prop-autoplay).\n   */\n  interval: PropTypes.number,\n}\n\nCarousel.defaultProps = {\n  indicators: true,\n  arrows: 'desktop',\n  autoplay: false,\n  interval: 3000,\n  infinite: true,\n}\n\nexport default Carousel\n"],"file":"Carousel.js"}