"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.styles = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _clsx2 = _interopRequireDefault(require("clsx"));

var _styles = require("@material-ui/core/styles");

var _useMediaQuery = _interopRequireDefault(require("@material-ui/core/useMediaQuery"));

var _Carousel = _interopRequireDefault(require("./Carousel"));

var _Image = _interopRequireDefault(require("../Image"));

var _Lightbox = _interopRequireDefault(require("./Lightbox"));

var _Media = _interopRequireDefault(require("./Media"));

var _MagnifyHint = _interopRequireDefault(require("./MagnifyHint"));

var _CarouselThumbnails = _interopRequireDefault(require("./CarouselThumbnails"));

var _get = _interopRequireDefault(require("lodash/get"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var THUMBNAIL_IMAGE_ID = '__rsf-placeholder-thumbnail';

var styles = function styles(theme) {
  return {
    /**
     * Styles applied to the root component.
     */
    root: (0, _defineProperty2["default"])({
      display: 'flex',
      flexDirection: 'column',
      flex: 1
    }, theme.breakpoints.up('sm'), {
      overflow: 'hidden'
    }),

    /**
     * Styles applied to the root component when `thumbnailPosition` is `left` or `right`.
     */
    rootSideThumbs: (0, _defineProperty2["default"])({}, theme.breakpoints.up('sm'), {
      flexDirection: 'row'
    }),

    /**
     * Styles applied to the wrapper element of each media component.
     */
    mediaWrap: {
      height: '100%',
      width: '100%',
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'stretch',
      '& img': {
        maxHeight: '100%',
        maxWidth: '100%',
        objectFit: 'contain'
      }
    },

    /**
     * Styles applied to each of the thumbnail elements.
     */
    thumbnail: {
      position: 'absolute',
      top: 0,
      left: 0,
      height: '100%',
      width: '100%'
    },

    /**
     * Styles applied to the thumbnail component when thumbnailPosition is `left`.
     */
    thumbnailsLeft: (0, _defineProperty2["default"])({}, theme.breakpoints.up('sm'), {
      order: -1
    }),

    /**
     * Styles applied to the thumbnail component when thumbnailPosition is `top`.
     */
    thumbnailsTop: {
      order: -1
    },

    /**
     * Styles applied to the carousel component when the lightbox is shown.
     */
    lightboxCarousel: {
      flex: 1,
      justifyContent: 'center',
      overflow: 'hidden'
    },

    /**
     * Styles applied to the thumbnails in the lightbox.
     */
    lightboxThumbs: {
      paddingBottom: theme.spacing(2)
    }
  };
};

exports.styles = styles;
var useStyles = (0, _styles.makeStyles)(styles, {
  name: 'RSFMediaCarousel'
});
/**
 * A carousel that displays images and videos for a product.  Specify
 * images and videos via the media prop, which should be of the form:
 *
 * ```js
 *  <MediaCarousel
 *    media={[
 *      { src: 'https://domain.com/path/to/image.jpg', alt: 'Red Shirt', type: 'image' },
 *      { src: 'https://domain.com/path/to/image.mpeg', alt: 'Demonstration', type: 'video' },
 *    ]}
 *    thumbnail={{
 *      src: 'https://domain.com/path/to/thumbnail.jpg', alt: 'thumbnail'
 *    }}
 *  />
 * ```
 *
 * To display a low-res thumbnail while high res images are loading, specify a `thumbnail` prop with `src` and `alt`
 *
 * Alternatively, you can provide a `product` prop as an object with `media` and `thumbnail` values that
 * adhere to the formats described above.
 *
 * ```js
 *  <MediaCarousel
 *      media={[
 *        { src: 'https://domain.com/path/to/image.jpg', alt: 'Red Shirt', type: 'image' },
 *        { src: 'https://domain.com/path/to/image.mpeg', alt: 'Demonstration', type: 'video' },
 *      ],
 *      thumbnail: {
 *        src: 'https://domain.com/path/to/thumbnail.jpg', alt: 'thumbnail'
 *      }
 *    }]}
 *  />
 * ```
 */

function MediaCarousel(props) {
  var thumbnails = props.thumbnails,
      thumbnail = props.thumbnail,
      thumbsClassName = props.thumbsClassName,
      thumbnailPosition = props.thumbnailPosition,
      magnifyHintClassName = props.magnifyHintClassName,
      videoProps = props.videoProps,
      imageProps = props.imageProps,
      lightboxProps = props.lightboxProps,
      lightboxClassName = props.lightboxClassName,
      classes = props.classes,
      media = props.media,
      magnifyProps = props.magnifyProps,
      id = props.id,
      CarouselComponent = props.CarouselComponent,
      ImageComponent = props.ImageComponent,
      MediaComponent = props.MediaComponent,
      CarouselThumbnailsComponent = props.CarouselThumbnailsComponent,
      others = (0, _objectWithoutProperties2["default"])(props, ["thumbnails", "thumbnail", "thumbsClassName", "thumbnailPosition", "magnifyHintClassName", "videoProps", "imageProps", "lightboxProps", "lightboxClassName", "classes", "media", "magnifyProps", "id", "CarouselComponent", "ImageComponent", "MediaComponent", "CarouselThumbnailsComponent"]);

  var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      imagesLoaded = _useState2[0],
      setImagesLoaded = _useState2[1];

  var styles = useStyles({
    classes: classes
  });
  var ref = (0, _react.useRef)(null);

  var _useState3 = (0, _react.useState)(false),
      _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
      over = _useState4[0],
      setOver = _useState4[1];

  var _useState5 = (0, _react.useState)(0),
      _useState6 = (0, _slicedToArray2["default"])(_useState5, 2),
      selected = _useState6[0],
      setSelected = _useState6[1];

  var _useState7 = (0, _react.useState)(false),
      _useState8 = (0, _slicedToArray2["default"])(_useState7, 2),
      video = _useState8[0],
      setVideo = _useState8[1];

  var _useState9 = (0, _react.useState)(),
      _useState10 = (0, _slicedToArray2["default"])(_useState9, 2),
      lightboxActive = _useState10[0],
      setLightboxActive = _useState10[1];

  var theme = (0, _styles.useTheme)();
  var isSmall = (0, _useMediaQuery["default"])(theme.breakpoints.down('xs'));
  var isTouchScreen = (0, _useMediaQuery["default"])('(hover:none)');
  var isThumbsSide = ['right', 'left'].includes(thumbnailPosition);
  (0, _react.useEffect)(function () {
    // Reset selection index when media changes
    setSelected(0);
  }, [media]);
  (0, _react.useEffect)(function () {
    if (media && media.full && media.full[selected] && media.full[selected].type === 'video') {
      setVideo(true);
    } else {
      setVideo(false);
    }
  }, [selected]);
  var timeout = (0, _react.useRef)(null);
  var handleMouseEnter = (0, _react.useCallback)(function () {
    timeout.current = window.setTimeout(function () {
      setOver(true);
      timeout.current = null;
    }, 250);
  }, []);
  var handleMouseLeave = (0, _react.useCallback)(function () {
    setOver(false);

    if (timeout.current) {
      window.clearTimeout(timeout.current);
    }
  }, []);
  var onFullSizeImagesLoaded = (0, _react.useCallback)(function () {
    setImagesLoaded(true);
  }, []);
  var onClickCarousel = (0, _react.useCallback)(function (evt) {
    if (!evt.defaultPrevented && !video) {
      setLightboxActive(true);
    }
  });
  (0, _react.useEffect)(function () {
    if (!ref.current || imagesLoaded || !thumbnail) return;
    var firstImage = ref.current.querySelector('img');

    if (firstImage && firstImage.id !== THUMBNAIL_IMAGE_ID) {
      firstImage.addEventListener('load', onFullSizeImagesLoaded);
      return function () {
        return firstImage.removeEventListener('load', onFullSizeImagesLoaded);
      };
    }
  }, [media, imagesLoaded, thumbnail]);
  var belowAdornments = [];

  if (thumbnail && !imagesLoaded) {
    belowAdornments.push( /*#__PURE__*/_react["default"].createElement(ImageComponent, (0, _extends2["default"])({
      id: THUMBNAIL_IMAGE_ID,
      key: "thumbnail",
      className: styles.thumbnail,
      fill: true
    }, thumbnail)));
  }

  if (media && media.full && media.full.some(function (item) {
    return item.magnify;
  })) {
    // we use the media's magnify.width prop to test if the image is larger than the screen size, and
    // hide the magnify hint if so. this is a magic large number just used to ensure that the hint is
    // shown if the width property is not defined for the given media
    var MAX_WIDTH = 10000;
    var showHint = true;

    if (lightboxActive) {
      var _window = window,
          innerWidth = _window.innerWidth;
      var mediaWidth = (0, _get["default"])(media.full[selected], 'magnify.width', MAX_WIDTH);

      if (mediaWidth <= innerWidth) {
        showHint = false;
      }
    }

    if (showHint && !video) {
      belowAdornments.push( /*#__PURE__*/_react["default"].createElement(_MagnifyHint["default"], {
        key: "magnify-hint",
        over: over,
        disableExpand: lightboxActive,
        className: magnifyHintClassName
      }));
    }
  }

  if (lightboxActive) {
    Object.assign(others, {
      autoplay: false,
      className: (0, _clsx2["default"])(others.className, styles.lightboxCarousel, lightboxActive && lightboxClassName),
      height: isSmall ? '100%' : null,
      slideStyle: _objectSpread(_objectSpread({}, others.slideStyle || {}), {}, {
        display: 'flex',
        justifyContent: 'center'
      })
    });
  }

  var handleLightboxClose = (0, _react.useCallback)(function () {
    setLightboxActive(false);
  }, []);

  var body = /*#__PURE__*/_react["default"].createElement("div", {
    className: (0, _clsx2["default"])(styles.root, (0, _defineProperty2["default"])({}, styles.rootSideThumbs, !lightboxActive && isThumbsSide))
  }, /*#__PURE__*/_react["default"].createElement(CarouselComponent, (0, _extends2["default"])({
    id: id,
    ref: ref,
    belowAdornments: belowAdornments,
    classes: classes,
    onMouseEnter: handleMouseEnter,
    onMouseLeave: handleMouseLeave,
    onClick: onClickCarousel,
    selected: selected,
    setSelected: setSelected,
    height: '100%'
  }, others), (0, _get["default"])(media, 'full', []).map(function (item, i) {
    var magnifySrc = (0, _get["default"])(item, 'magnify.src', item.src);
    return /*#__PURE__*/_react["default"].createElement(MediaComponent, (0, _extends2["default"])({
      key: i,
      magnifyProps: magnifyProps
    }, item, {
      src: lightboxActive ? magnifySrc : item.src,
      imageProps: lightboxActive ? {
        fill: false,
        contain: true,
        src: magnifySrc
      } : imageProps,
      videoProps: videoProps
    }));
  })), thumbnails && media && /*#__PURE__*/_react["default"].createElement(CarouselThumbnailsComponent, {
    className: (0, _clsx2["default"])(thumbsClassName, lightboxActive && styles.lightboxThumbs, !lightboxActive && thumbnailPosition === 'left' && styles.thumbnailsLeft, !lightboxActive && thumbnailPosition === 'top' && styles.thumbnailsTop),
    bind: "".concat(id, ".index"),
    carouselId: id,
    selected: selected,
    setSelected: setSelected,
    thumbnails: media.thumbnails,
    thumbnailPosition: lightboxActive ? 'bottom' : thumbnailPosition
  }));

  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, body, /*#__PURE__*/_react["default"].createElement(_Lightbox["default"], (0, _extends2["default"])({}, lightboxProps, {
    open: !!lightboxActive,
    onClose: handleLightboxClose
  }), body));
}

MediaCarousel.propTypes = {
  /**
   * Override or extend the styles applied to the component. See [CSS API](#css) below for more details.
   */
  classes: _propTypes["default"].object,

  /**
   * If `true`, the carousel will have thumbnails below it.
   */
  thumbnails: _propTypes["default"].bool,

  /**
   * Data for an image to be used for a thumbnail when the images are not yet loaded.
   */
  thumbnail: _propTypes["default"].shape({
    src: _propTypes["default"].string,
    alt: _propTypes["default"].string
  }),

  /**
   * An optional `className` to use for the thumbnails component.
   */
  thumbsClassName: _propTypes["default"].string,

  /**
   * An optional `className` to use for the carousel component when the lightbox is open.
   */
  lightboxClassName: _propTypes["default"].string,

  /**
   * Position of thumbnails, relative to the main carousel image. For small screens, the position
   * will revert to `top` when this value is set to `left` or `right`.
   *
   * This property will have no effect in Amp.
   */
  thumbnailPosition: _propTypes["default"].oneOf(['bottom', 'top', 'left', 'right']),

  /**
   * A component type to use for the thumbnails.
   */
  CarouselThumbnailsComponent: _propTypes["default"].elementType,

  /**
   * An optional `className` to use for the [`MagnifyHint`](/apiReference/carousel/MagnifyHint) component.
   */
  magnifyHintClassName: _propTypes["default"].string,

  /**
   * Props passed through to each [`Media`](/apiReference/carousel/Media)'s video component.
   */
  videoProps: _propTypes["default"].object,

  /**
   * Props passed through to each [`Media`](/apiReference/carousel/Media)'s
   * [`imageProps`](/apiReference/carousel/Media#prop-imageProps).
   */
  imageProps: _propTypes["default"].object,

  /**
   * Data for all the media objects to show in the carousel.
   */
  media: _propTypes["default"].shape({
    full: _propTypes["default"].arrayOf(_propTypes["default"].object),
    thumbnails: _propTypes["default"].arrayOf(_propTypes["default"].object)
  }),

  /**
   * Props passed through to each [`Media`](/apiReference/carousel/Media)'s
   * [`magnifyProps`](/apiReference/carousel/Media#prop-magnifyProps).
   */
  magnifyProps: _propTypes["default"].object,

  /**
   * A component type to use for each media object in the carousel.
   */
  MediaComponent: _propTypes["default"].elementType,

  /**
   * Props passed through to the [`Lightbox`](/apiReference/carousel/Lightbox).
   */
  lightboxProps: _propTypes["default"].object,

  /**
   * An `id` attribute to use for the carousel's root element.
   */
  id: _propTypes["default"].string,

  /**
   * A component type to use for the main carousel component.
   */
  CarouselComponent: _propTypes["default"].elementType,

  /**
   * The component type to use to display images.
   */
  ImageComponent: _propTypes["default"].elementType
};
MediaCarousel.defaultProps = {
  lightboxProps: {},
  magnifyProps: {},
  thumbnails: true,
  thumbnailPosition: 'bottom',
  MediaComponent: _Media["default"],
  ImageComponent: _Image["default"],
  CarouselComponent: _Carousel["default"],
  CarouselThumbnailsComponent: _CarouselThumbnails["default"],
  videoProps: {
    controls: true,
    autoPlay: false
  }
};
var _default = MediaCarousel;
exports["default"] = _default;
//# sourceMappingURL=MediaCarousel.js.map