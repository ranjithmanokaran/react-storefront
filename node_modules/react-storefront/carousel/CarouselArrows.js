"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = CarouselArrows;
exports.styles = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _clsx = _interopRequireDefault(require("clsx"));

var _makeStyles = _interopRequireDefault(require("@material-ui/core/styles/makeStyles"));

var _IconButton = _interopRequireDefault(require("@material-ui/core/IconButton"));

var _ChevronLeft = _interopRequireDefault(require("@material-ui/icons/ChevronLeft"));

var _ChevronRight = _interopRequireDefault(require("@material-ui/icons/ChevronRight"));

var styles = function styles(theme) {
  return {
    /**
     * Styles applied to the root element.
     */
    arrows: {},

    /**
     * Styles applied to each of the arrow icon buttons.
     */
    arrow: {
      position: 'absolute',
      top: '50%',
      marginTop: '-24px'
    },

    /**
     * Styles applied to the left arrow icon buttons.
     */
    leftArrow: {
      left: 0
    },

    /**
     * Styles applied to the right arrow icon buttons.
     */
    rightArrow: {
      right: 0
    },

    /**
     * Styles applied to each of the icon elements.
     */
    icon: {}
  };
};

exports.styles = styles;
var useStyles = (0, _makeStyles["default"])(styles, {
  name: 'RSFCarouselArrows'
});
/**
 * Arrows that are overlaid onto a [`Carousel`](/apiReference/carousel/Carousel) that will change
 * the slide shown when clicked.
 */

function CarouselArrows(_ref) {
  var className = _ref.className,
      classes = _ref.classes,
      selected = _ref.selected,
      count = _ref.count,
      setSelected = _ref.setSelected,
      infinite = _ref.infinite,
      leftArrowLabel = _ref.leftArrowLabel,
      rightArrowLabel = _ref.rightArrowLabel;
  classes = useStyles({
    classes: classes
  });
  var createOnClickArrow = (0, _react.useCallback)(function (idxChange) {
    return function (evt) {
      evt.preventDefault();

      if (!infinite) {
        setSelected(selected + idxChange);
        return;
      } // carousel loop-around calculations


      var nextSelectedIndex = selected + idxChange;

      if (nextSelectedIndex + 1 > count) {
        nextSelectedIndex = 0;
      } else if (nextSelectedIndex < 0) {
        nextSelectedIndex = count - 1;
      }

      setSelected(nextSelectedIndex);
    };
  }, [selected, setSelected, count, infinite]);
  return /*#__PURE__*/_react["default"].createElement("div", {
    className: (0, _clsx["default"])(classes.arrows, className)
  }, (selected !== 0 || infinite) && /*#__PURE__*/_react["default"].createElement(_IconButton["default"], {
    className: (0, _clsx["default"])(classes.arrow, classes.leftArrow),
    onClick: createOnClickArrow(-1),
    "aria-label": leftArrowLabel
  }, /*#__PURE__*/_react["default"].createElement(_ChevronLeft["default"], {
    classes: {
      root: classes.icon
    }
  })), (selected !== count - 1 || infinite) && /*#__PURE__*/_react["default"].createElement(_IconButton["default"], {
    className: (0, _clsx["default"])(classes.arrow, classes.rightArrow),
    onClick: createOnClickArrow(1),
    "aria-label": rightArrowLabel
  }, /*#__PURE__*/_react["default"].createElement(_ChevronRight["default"], {
    classes: {
      root: classes.icon
    }
  })));
}

CarouselArrows.propTypes = {
  /**
   * Override or extend the styles applied to the component. See [CSS API](#css) below for more details.
   */
  classes: _propTypes["default"].object,

  /**
   * CSS class to apply to the root element.
   */
  className: _propTypes["default"].string,

  /**
   * Index of the currently selected slide in the [`Carousel`](/apiReference/carousel/Carousel).
   */
  selected: _propTypes["default"].number,

  /**
   * Function to change the value of [`selected`](#prop-selected).
   */
  setSelected: _propTypes["default"].func,

  /**
   * Total number of slides in the [`Carousel`](/apiReference/carousel/Carousel).
   */
  count: _propTypes["default"].number,

  /**
   * Label given to the left arrow for accessbility purposes.
   */
  leftArrowLabel: _propTypes["default"].string,

  /**
   * Label given to the right arrow for accessbility purposes.
   */
  rightArrowLabel: _propTypes["default"].string
};
CarouselArrows.defaultProps = {
  leftArrowLabel: 'Previous',
  rightArrowLabel: 'Next'
};
//# sourceMappingURL=CarouselArrows.js.map