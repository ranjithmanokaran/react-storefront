{"version":3,"sources":["../../src/carousel/Media.js"],"names":["useStyles","theme","rimRoot","height","width","rimSmallImage","Media","magnifyProps","imageProps","videoProps","src","alt","magnify","sources","type","ImageComponent","ImageMagnifyComponent","classes","adjustMagnifyProps","appliedMagnifyProps","style","display","objectFit","imageStyle","className","imageClassName","enlargedImageStyle","length","map","source","isFluidWidth","propTypes","PropTypes","oneOf","object","string","array","oneOfType","bool","elementType","defaultProps","Image","ReactImageMagnify"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types'\nimport React from 'react'\nimport Image from '../Image'\nimport ReactImageMagnify from 'react-image-magnify'\nimport clsx from 'clsx'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles(theme => ({\n  rimRoot: {\n    height: '100% !important',\n    width: '100% !important',\n  },\n  rimSmallImage: {\n    height: '100% !important',\n    width: '100% !important',\n  },\n}))\n\n/**\n * An element that determines the proper tag to use for a media node within a\n * [`Carousel`](/apiReference/carousel/Carousel).\n */\nfunction Media({\n  magnifyProps,\n  imageProps,\n  videoProps,\n  src,\n  alt,\n  magnify,\n  sources,\n  type = 'image',\n  ImageComponent,\n  ImageMagnifyComponent,\n}) {\n  const classes = useStyles()\n\n  const adjustMagnifyProps = () => {\n    const appliedMagnifyProps = { ...(magnifyProps || {}) }\n    appliedMagnifyProps.style = {\n      ...((magnifyProps && magnifyProps.style) || {}),\n      display: 'block',\n      objectFit: 'contain',\n    }\n    appliedMagnifyProps.imageStyle = {\n      ...((magnifyProps && magnifyProps.imageStyle) || {}),\n      objectFit: 'contain',\n    }\n    appliedMagnifyProps.className = clsx(magnifyProps && magnifyProps.className, classes.rimRoot)\n    appliedMagnifyProps.imageClassName = clsx(\n      magnifyProps && magnifyProps.imageClassName,\n      classes.rimSmallImage,\n    )\n    appliedMagnifyProps.enlargedImageStyle = {\n      ...((magnifyProps && magnifyProps.enlargedImageStyle) || {}),\n      height: '100%',\n    }\n    return appliedMagnifyProps\n  }\n\n  if (type === 'video') {\n    if (sources && sources.length) {\n      return (\n        <video alt={alt} {...videoProps}>\n          {sources.map(source => (\n            <source key={source.src} src={source.src} type={source.type} />\n          ))}\n        </video>\n      )\n    } else {\n      return <video src={src} alt={alt} {...videoProps} />\n    }\n  } else if (magnify) {\n    return (\n      <ImageMagnifyComponent\n        enlargedImagePosition=\"over\"\n        {...adjustMagnifyProps()}\n        smallImage={{\n          src: src,\n          alt: alt,\n          isFluidWidth: true,\n        }}\n        largeImage={magnify}\n      />\n    )\n  } else {\n    return <ImageComponent key={src} src={src} alt={alt} fill {...imageProps} />\n  }\n}\n\nMedia.propTypes = {\n  /**\n   * The type of media to display.\n   */\n  type: PropTypes.oneOf(['image', 'video']),\n\n  /**\n   * Props passed to the [`ReactImageMagnify`](https://github.com/ethanselzer/react-image-magnify#usage)\n   * element for an `'image'` type when [`magnify`](#prop-magnify) is defined.\n   */\n  magnifyProps: PropTypes.object,\n\n  /**\n   * Other props to pass to the video component.\n   */\n  videoProps: PropTypes.object,\n\n  /**\n   * Other props to pass to the [`Image`](/apiReference/Image) for an `'image'` type.\n   */\n  imageProps: PropTypes.object,\n\n  /**\n   * Used as the `alt` attribute for the `<img>` or `<video>`.\n   */\n  alt: PropTypes.string,\n\n  /**\n   * Used as the `src` attribute for the `<img>` or `<video>`.\n   */\n  src: PropTypes.string,\n\n  /**\n   * Used as the source inside the video `<video>`.\n   */\n  sources: PropTypes.array,\n\n  /**\n   * An object to pass to pass to `ReactImageMagnify` containing the data for the magnified image.\n   * If `false`, the media is not able to be magnified.\n   */\n  magnify: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n\n  /**\n   * The component type to use to display images.\n   */\n  ImageComponent: PropTypes.elementType,\n\n  /**\n   * The component type to use to display magnified images.\n   */\n  ImageMagnifyComponent: PropTypes.elementType,\n}\n\nMedia.defaultProps = {\n  ImageComponent: Image,\n  ImageMagnifyComponent: ReactImageMagnify,\n}\n\nexport default Media\n"],"file":"Media.js"}