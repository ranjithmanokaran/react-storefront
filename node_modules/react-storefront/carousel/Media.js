"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _Image = _interopRequireDefault(require("../Image"));

var _reactImageMagnify = _interopRequireDefault(require("react-image-magnify"));

var _clsx = _interopRequireDefault(require("clsx"));

var _styles = require("@material-ui/core/styles");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var useStyles = (0, _styles.makeStyles)(function (theme) {
  return {
    rimRoot: {
      height: '100% !important',
      width: '100% !important'
    },
    rimSmallImage: {
      height: '100% !important',
      width: '100% !important'
    }
  };
});
/**
 * An element that determines the proper tag to use for a media node within a
 * [`Carousel`](/apiReference/carousel/Carousel).
 */

function Media(_ref) {
  var magnifyProps = _ref.magnifyProps,
      imageProps = _ref.imageProps,
      videoProps = _ref.videoProps,
      src = _ref.src,
      alt = _ref.alt,
      magnify = _ref.magnify,
      sources = _ref.sources,
      _ref$type = _ref.type,
      type = _ref$type === void 0 ? 'image' : _ref$type,
      ImageComponent = _ref.ImageComponent,
      ImageMagnifyComponent = _ref.ImageMagnifyComponent;
  var classes = useStyles();

  var adjustMagnifyProps = function adjustMagnifyProps() {
    var appliedMagnifyProps = _objectSpread({}, magnifyProps || {});

    appliedMagnifyProps.style = _objectSpread(_objectSpread({}, magnifyProps && magnifyProps.style || {}), {}, {
      display: 'block',
      objectFit: 'contain'
    });
    appliedMagnifyProps.imageStyle = _objectSpread(_objectSpread({}, magnifyProps && magnifyProps.imageStyle || {}), {}, {
      objectFit: 'contain'
    });
    appliedMagnifyProps.className = (0, _clsx["default"])(magnifyProps && magnifyProps.className, classes.rimRoot);
    appliedMagnifyProps.imageClassName = (0, _clsx["default"])(magnifyProps && magnifyProps.imageClassName, classes.rimSmallImage);
    appliedMagnifyProps.enlargedImageStyle = _objectSpread(_objectSpread({}, magnifyProps && magnifyProps.enlargedImageStyle || {}), {}, {
      height: '100%'
    });
    return appliedMagnifyProps;
  };

  if (type === 'video') {
    if (sources && sources.length) {
      return /*#__PURE__*/_react["default"].createElement("video", (0, _extends2["default"])({
        alt: alt
      }, videoProps), sources.map(function (source) {
        return /*#__PURE__*/_react["default"].createElement("source", {
          key: source.src,
          src: source.src,
          type: source.type
        });
      }));
    } else {
      return /*#__PURE__*/_react["default"].createElement("video", (0, _extends2["default"])({
        src: src,
        alt: alt
      }, videoProps));
    }
  } else if (magnify) {
    return /*#__PURE__*/_react["default"].createElement(ImageMagnifyComponent, (0, _extends2["default"])({
      enlargedImagePosition: "over"
    }, adjustMagnifyProps(), {
      smallImage: {
        src: src,
        alt: alt,
        isFluidWidth: true
      },
      largeImage: magnify
    }));
  } else {
    return /*#__PURE__*/_react["default"].createElement(ImageComponent, (0, _extends2["default"])({
      key: src,
      src: src,
      alt: alt,
      fill: true
    }, imageProps));
  }
}

Media.propTypes = {
  /**
   * The type of media to display.
   */
  type: _propTypes["default"].oneOf(['image', 'video']),

  /**
   * Props passed to the [`ReactImageMagnify`](https://github.com/ethanselzer/react-image-magnify#usage)
   * element for an `'image'` type when [`magnify`](#prop-magnify) is defined.
   */
  magnifyProps: _propTypes["default"].object,

  /**
   * Other props to pass to the video component.
   */
  videoProps: _propTypes["default"].object,

  /**
   * Other props to pass to the [`Image`](/apiReference/Image) for an `'image'` type.
   */
  imageProps: _propTypes["default"].object,

  /**
   * Used as the `alt` attribute for the `<img>` or `<video>`.
   */
  alt: _propTypes["default"].string,

  /**
   * Used as the `src` attribute for the `<img>` or `<video>`.
   */
  src: _propTypes["default"].string,

  /**
   * Used as the source inside the video `<video>`.
   */
  sources: _propTypes["default"].array,

  /**
   * An object to pass to pass to `ReactImageMagnify` containing the data for the magnified image.
   * If `false`, the media is not able to be magnified.
   */
  magnify: _propTypes["default"].oneOfType([_propTypes["default"].bool, _propTypes["default"].object]),

  /**
   * The component type to use to display images.
   */
  ImageComponent: _propTypes["default"].elementType,

  /**
   * The component type to use to display magnified images.
   */
  ImageMagnifyComponent: _propTypes["default"].elementType
};
Media.defaultProps = {
  ImageComponent: _Image["default"],
  ImageMagnifyComponent: _reactImageMagnify["default"]
};
var _default = Media;
exports["default"] = _default;
//# sourceMappingURL=Media.js.map