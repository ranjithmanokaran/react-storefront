"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _useTheme = _interopRequireDefault(require("@material-ui/core/styles/useTheme"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _styles = require("@material-ui/core/styles");

var _Close = _interopRequireDefault(require("@material-ui/icons/Close"));

var _Dialog = _interopRequireDefault(require("@material-ui/core/Dialog"));

var _DialogActions = _interopRequireDefault(require("@material-ui/core/DialogActions"));

var _DialogContent = _interopRequireDefault(require("@material-ui/core/DialogContent"));

var _IconButton = _interopRequireDefault(require("@material-ui/core/IconButton"));

var _Zoom = _interopRequireDefault(require("@material-ui/core/Zoom"));

var Transition = /*#__PURE__*/_react["default"].forwardRef(function (props, ref) {
  return /*#__PURE__*/_react["default"].createElement(_Zoom["default"], (0, _extends2["default"])({
    duration: 500,
    ref: ref
  }, props));
});

var styles = function styles(theme) {
  return {
    /**
     * Styles applied to the root element.
     */
    root: {},

    /**
     * Styles applied to the content element of the modal.
     */
    content: {
      padding: 0,
      display: 'flex',
      flexDirection: 'column'
    },

    /**
     * Styles passed through to the `paper` CSS rule of the [`Dialog`](https://material-ui.com/api/dialog/#css)
     * root element.
     */
    paper: {
      flex: 1,
      background: 'rgba(255,255,255,0.9)'
    }
  };
};

var useStyles = (0, _styles.makeStyles)(styles, {
  name: 'RSFLightbox'
});
/**
 * A modal that opens to give a full-screen view of the elements within a
 * [`Carousel`](/apiReference/carousel/Carousel).
 */

function Lightbox(_ref) {
  var classes = _ref.classes,
      children = _ref.children,
      onClose = _ref.onClose,
      open = _ref.open,
      TransitionComponent = _ref.TransitionComponent;
  classes = useStyles({
    classes: classes
  });
  var theme = (0, _useTheme["default"])();
  return /*#__PURE__*/_react["default"].createElement(_Dialog["default"], {
    open: open,
    fullScreen: true,
    classes: {
      paper: classes.paper
    },
    TransitionComponent: TransitionComponent,
    className: classes.root,
    style: {
      zIndex: theme.zIndex.modal + 10
    }
  }, /*#__PURE__*/_react["default"].createElement(_DialogActions["default"], null, /*#__PURE__*/_react["default"].createElement(_IconButton["default"], {
    onClick: onClose
  }, /*#__PURE__*/_react["default"].createElement(_Close["default"], null))), /*#__PURE__*/_react["default"].createElement(_DialogContent["default"], {
    className: classes.content
  }, children));
}

Lightbox.propTypes = {
  /**
   * Override or extend the styles applied to the component. See [CSS API](#css) below for more details.
   */
  classes: _propTypes["default"].object,

  /**
   * Child nodes to show inside the Lightbox.
   */
  children: _propTypes["default"].node.isRequired,

  /**
   * A function to call when the Lightbox is closed.
   */
  onClose: _propTypes["default"].func,

  /**
   * If `true`, the Lightbox is open.
   */
  open: _propTypes["default"].bool.isRequired,

  /**
   * The component used for the [transition](https://material-ui.com/components/transitions/#transitioncomponent-prop).
   */
  TransitionComponent: _propTypes["default"].elementType
};
Lightbox.defaultProps = {
  TransitionComponent: Transition
};

var _default = /*#__PURE__*/_react["default"].memo(Lightbox);

exports["default"] = _default;
//# sourceMappingURL=Lightbox.js.map