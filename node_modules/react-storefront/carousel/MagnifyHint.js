"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = MagnifyHint;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _amp = require("next/amp");

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styles = require("@material-ui/core/styles");

var _Typography = _interopRequireDefault(require("@material-ui/core/Typography"));

var _AddCircleOutline = _interopRequireDefault(require("@material-ui/icons/AddCircleOutline"));

var _clsx2 = _interopRequireDefault(require("clsx"));

var styles = function styles(theme) {
  return {
    /**
     * Styles applied to the root element.
     */
    root: {
      position: 'absolute',
      bottom: 30,
      display: 'flex',
      flexDirection: 'row',
      justifyContent: 'center',
      width: '100%'
    },

    /**
     * Styles applied to the content wrapper element.
     */
    wrap: {
      borderRadius: 25,
      backgroundColor: 'rgba(0, 0, 0, 0.3)',
      lineHeight: 14,
      padding: '5px 10px',
      display: 'flex',
      flexDirection: 'row',
      alignItems: 'center'
    },

    /**
     * Styles applied to the magnification icon element.
     */
    icon: {
      height: 16,
      width: 16,
      color: theme.palette.grey[300]
    },

    /**
     * Styles applied to the elements containing each of the text captions.
     */
    text: {
      marginLeft: 5,
      color: theme.palette.grey[300],
      position: 'relative',
      top: 1
    },

    /**
     * Styles applied to the root element when [`over`](#prop-over) is `true`.
     */
    over: {},

    /**
     * Styles applied to the root element when [`zoomDisabled`](#prop-zoomDisabled) is `true`.
     */
    zoomDisabled: {},

    /**
     * Styles applied to the root element when [`expandDisabled`](#prop-expandDisabled) is `true`.
     */
    expandDisabled: {
      // hide the whole component when:
      // - both zoom and expand are disabled
      // - expand is disabled and user is mobile
      '$zoomDisabled&': {
        display: 'none'
      },
      '@media (hover: none) and (pointer: coarse)': {
        display: 'none'
      }
    },

    /**
     * Styles applied to the element containing the [zoomTextDesktop](#prop-zoomTextDesktop) caption.
     */
    zoomTextDesktop: {
      display: 'block',
      // hide zoom text when:
      // - hovering + expand is enabled
      // - zoom is disabled
      // - mobile user
      '$over:not($expandDisabled) &, $zoomDisabled &': {
        display: 'none'
      },
      '@media (hover: none) and (pointer: coarse)': {
        display: 'none'
      }
    },

    /**
     * Styles applied to the element containing the [expandTextMobile](#prop-expandTextMobile) caption.
     */
    expandTextMobile: {
      display: 'none',
      '@media (hover: none) and (pointer: coarse)': {
        display: 'block'
      }
    },

    /**
     * Styles applied to the element containing the [expandTextDesktop](#prop-expandTextDesktop) caption.
     */
    expandTextDesktop: {
      display: 'none',
      '$over:not($expandDisabled) &, $zoomDisabled &': {
        display: 'block',
        '@media (hover: none) and (pointer: coarse)': {
          display: 'none'
        }
      }
    }
  };
};

var useStyles = (0, _styles.makeStyles)(styles, {
  name: 'RSFMagnifyHint'
});
/**
 * An element overlaid on a [`Carousel`](/apiReference/carousel/Carousel) that displays a tip for a
 * user to hover/click the Carousel in order to zoom in.
 */

function MagnifyHint(_ref) {
  var _clsx;

  var zoomTextDesktop = _ref.zoomTextDesktop,
      expandTextMobile = _ref.expandTextMobile,
      expandTextDesktop = _ref.expandTextDesktop,
      over = _ref.over,
      className = _ref.className,
      disableZoom = _ref.disableZoom,
      disableExpand = _ref.disableExpand;
  var classes = useStyles();
  disableZoom = disableZoom || (0, _amp.useAmp)();
  return /*#__PURE__*/_react["default"].createElement("div", {
    className: (0, _clsx2["default"])(className, (_clsx = {}, (0, _defineProperty2["default"])(_clsx, classes.root, true), (0, _defineProperty2["default"])(_clsx, classes.over, over), (0, _defineProperty2["default"])(_clsx, classes.zoomDisabled, disableZoom), (0, _defineProperty2["default"])(_clsx, classes.expandDisabled, disableExpand), _clsx))
  }, /*#__PURE__*/_react["default"].createElement("div", {
    className: classes.wrap
  }, /*#__PURE__*/_react["default"].createElement(_AddCircleOutline["default"], {
    className: classes.icon,
    alt: "magnify-icon"
  }), /*#__PURE__*/_react["default"].createElement(_Typography["default"], {
    variant: "caption",
    className: (0, _clsx2["default"])(classes.text, classes.zoomTextDesktop)
  }, zoomTextDesktop), /*#__PURE__*/_react["default"].createElement(_Typography["default"], {
    variant: "caption",
    className: (0, _clsx2["default"])(classes.text, classes.expandTextMobile)
  }, expandTextMobile), /*#__PURE__*/_react["default"].createElement(_Typography["default"], {
    variant: "caption",
    className: (0, _clsx2["default"])(classes.text, classes.expandTextDesktop)
  }, expandTextDesktop)));
}

MagnifyHint.propTypes = {
  /**
   * Override or extend the styles applied to the component. See [CSS API](#css) below for more details.
   */
  classes: _propTypes["default"].object,

  /**
   * CSS class to apply to the root element.
   */
  className: _propTypes["default"].string,

  /**
   * The text displayed to tell the user to hover to zoom.
   */
  zoomTextDesktop: _propTypes["default"].string,

  /**
   * The text displayed to tell a mobile user to tap to expand.
   */
  expandTextMobile: _propTypes["default"].string,

  /**
   * The text displayed to tell a desktop user to click to expand.
   */
  expandTextDesktop: _propTypes["default"].string,

  /**
   * If `true`, zooming is disabled and the hint for zooming is not shown.
   */
  disableZoom: _propTypes["default"].bool,

  /**
   * If `true`, expanding is disabled and the hint for expanding is not shown.
   */
  disableExpand: _propTypes["default"].bool
};
MagnifyHint.defaultProps = {
  zoomTextDesktop: 'Hover to Zoom',
  expandTextMobile: 'Tap to Expand',
  expandTextDesktop: 'Click to Expand'
};
//# sourceMappingURL=MagnifyHint.js.map