{"version":3,"sources":["../../src/carousel/MagnifyHint.js"],"names":["styles","theme","root","position","bottom","display","flexDirection","justifyContent","width","wrap","borderRadius","backgroundColor","lineHeight","padding","alignItems","icon","height","color","palette","grey","text","marginLeft","top","over","zoomDisabled","expandDisabled","zoomTextDesktop","expandTextMobile","expandTextDesktop","useStyles","name","MagnifyHint","className","disableZoom","disableExpand","classes","propTypes","PropTypes","object","string","bool","defaultProps"],"mappings":"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","sourcesContent":["import { useAmp } from 'next/amp'\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Typography } from '@material-ui/core'\nimport { AddCircleOutline as Icon } from '@material-ui/icons'\nimport clsx from 'clsx'\n\nconst styles = theme => ({\n  /**\n   * Styles applied to the root element.\n   */\n  root: {\n    position: 'absolute',\n    bottom: 30,\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'center',\n    width: '100%',\n  },\n  /**\n   * Styles applied to the content wrapper element.\n   */\n  wrap: {\n    borderRadius: 25,\n    backgroundColor: 'rgba(0, 0, 0, 0.3)',\n    lineHeight: 14,\n    padding: '5px 10px',\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  /**\n   * Styles applied to the magnification icon element.\n   */\n  icon: {\n    height: 16,\n    width: 16,\n    color: theme.palette.grey[300],\n  },\n  /**\n   * Styles applied to the elements containing each of the text captions.\n   */\n  text: {\n    marginLeft: 5,\n    color: theme.palette.grey[300],\n    position: 'relative',\n    top: 1,\n  },\n  /**\n   * Styles applied to the root element when [`over`](#prop-over) is `true`.\n   */\n  over: {},\n  /**\n   * Styles applied to the root element when [`zoomDisabled`](#prop-zoomDisabled) is `true`.\n   */\n  zoomDisabled: {},\n  /**\n   * Styles applied to the root element when [`expandDisabled`](#prop-expandDisabled) is `true`.\n   */\n  expandDisabled: {\n    // hide the whole component when:\n    // - both zoom and expand are disabled\n    // - expand is disabled and user is mobile\n    '$zoomDisabled&': {\n      display: 'none',\n    },\n    '@media (hover: none) and (pointer: coarse)': {\n      display: 'none',\n    },\n  },\n  /**\n   * Styles applied to the element containing the [zoomTextDesktop](#prop-zoomTextDesktop) caption.\n   */\n  zoomTextDesktop: {\n    display: 'block',\n    // hide zoom text when:\n    // - hovering + expand is enabled\n    // - zoom is disabled\n    // - mobile user\n    '$over:not($expandDisabled) &, $zoomDisabled &': {\n      display: 'none',\n    },\n    '@media (hover: none) and (pointer: coarse)': {\n      display: 'none',\n    },\n  },\n  /**\n   * Styles applied to the element containing the [expandTextMobile](#prop-expandTextMobile) caption.\n   */\n  expandTextMobile: {\n    display: 'none',\n    '@media (hover: none) and (pointer: coarse)': {\n      display: 'block',\n    },\n  },\n  /**\n   * Styles applied to the element containing the [expandTextDesktop](#prop-expandTextDesktop) caption.\n   */\n  expandTextDesktop: {\n    display: 'none',\n\n    '$over:not($expandDisabled) &, $zoomDisabled &': {\n      display: 'block',\n      '@media (hover: none) and (pointer: coarse)': {\n        display: 'none',\n      },\n    },\n  },\n})\n\nconst useStyles = makeStyles(styles, { name: 'RSFMagnifyHint' })\n\n/**\n * An element overlaid on a [`Carousel`](/apiReference/carousel/Carousel) that displays a tip for a\n * user to hover/click the Carousel in order to zoom in.\n */\nexport default function MagnifyHint({\n  zoomTextDesktop,\n  expandTextMobile,\n  expandTextDesktop,\n  over,\n  className,\n  disableZoom,\n  disableExpand,\n}) {\n  const classes = useStyles()\n  disableZoom = disableZoom || useAmp()\n\n  return (\n    <div\n      className={clsx(className, {\n        [classes.root]: true,\n        [classes.over]: over,\n        [classes.zoomDisabled]: disableZoom,\n        [classes.expandDisabled]: disableExpand,\n      })}\n    >\n      <div className={classes.wrap}>\n        <Icon className={classes.icon} alt=\"magnify-icon\" />\n        <Typography variant=\"caption\" className={clsx(classes.text, classes.zoomTextDesktop)}>\n          {zoomTextDesktop}\n        </Typography>\n        <Typography variant=\"caption\" className={clsx(classes.text, classes.expandTextMobile)}>\n          {expandTextMobile}\n        </Typography>\n        <Typography variant=\"caption\" className={clsx(classes.text, classes.expandTextDesktop)}>\n          {expandTextDesktop}\n        </Typography>\n      </div>\n    </div>\n  )\n}\n\nMagnifyHint.propTypes = {\n  /**\n   * Override or extend the styles applied to the component. See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * CSS class to apply to the root element.\n   */\n  className: PropTypes.string,\n\n  /**\n   * The text displayed to tell the user to hover to zoom.\n   */\n  zoomTextDesktop: PropTypes.string,\n\n  /**\n   * The text displayed to tell a mobile user to tap to expand.\n   */\n  expandTextMobile: PropTypes.string,\n\n  /**\n   * The text displayed to tell a desktop user to click to expand.\n   */\n  expandTextDesktop: PropTypes.string,\n\n  /**\n   * If `true`, zooming is disabled and the hint for zooming is not shown.\n   */\n  disableZoom: PropTypes.bool,\n\n  /**\n   * If `true`, expanding is disabled and the hint for expanding is not shown.\n   */\n  disableExpand: PropTypes.bool,\n}\n\nMagnifyHint.defaultProps = {\n  zoomTextDesktop: 'Hover to Zoom',\n  expandTextMobile: 'Tap to Expand',\n  expandTextDesktop: 'Click to Expand',\n}\n"],"file":"MagnifyHint.js"}