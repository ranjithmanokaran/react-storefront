"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _link = _interopRequireDefault(require("next/link"));

var _LinkContext = _interopRequireDefault(require("./LinkContext"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _RootRef = _interopRequireDefault(require("@material-ui/core/RootRef"));

var _useIntersectionObserver = _interopRequireDefault(require("../hooks/useIntersectionObserver"));

var _serviceWorker = require("../serviceWorker");

var _withDefaultHandler = _interopRequireDefault(require("../utils/withDefaultHandler"));

var _getAPIURL = _interopRequireDefault(require("../api/getAPIURL"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * Use this component for all Links in your React Storefront app.  You can
 * pass props to display on the next page while data is loading from the server
 * using the `pageData` prop. This component accepts all props that would
 * normally be passed to a [Next.js `Link` component](https://nextjs.org/docs/api-reference/next/link).
 * All other props are spread to the underlying HTML anchor element.
 *
 * Example:
 *
 * ```js
 * import Link from 'react-storefront/link/Link'
 *
 * <Link href="/p/[productId]" as={`/p/${product.id}`} pageData={{ product }}>
 *   {product.name}
 * </Link>
 * ```
 */
var Link = function Link(_ref) {
  var as = _ref.as,
      href = _ref.href,
      prefetch = _ref.prefetch,
      prefetchURL = _ref.prefetchURL,
      pageData = _ref.pageData,
      onClick = _ref.onClick,
      children = _ref.children,
      other = (0, _objectWithoutProperties2["default"])(_ref, ["as", "href", "prefetch", "prefetchURL", "pageData", "onClick", "children"]);
  var ref = (0, _react.useRef)(null);
  var linkPageData = (0, _react.useContext)(_LinkContext["default"]);
  var handleClick = (0, _withDefaultHandler["default"])(onClick, function () {
    if (linkPageData) {
      linkPageData.current = pageData;
    }
  });
  prefetchURL = prefetchURL || as && (0, _getAPIURL["default"])(as);
  (0, _useIntersectionObserver["default"])(function () {
    return prefetchURL && prefetch === 'visible' ? ref : null;
  }, function (visible, disconnect) {
    if (visible && prefetchURL) {
      disconnect();
      (0, _serviceWorker.prefetch)(prefetchURL);
    }
  }, [prefetchURL, prefetch]);
  (0, _react.useEffect)(function () {
    if (prefetch === 'always' && prefetchURL) {
      (0, _serviceWorker.prefetch)(prefetchURL);
    }
  }, [prefetchURL]);

  if (!children || typeof children === 'string') {
    return /*#__PURE__*/_react["default"].createElement(_link["default"], {
      href: href,
      prefetch: false,
      as: as,
      passHref: true
    }, /*#__PURE__*/_react["default"].createElement("a", (0, _extends2["default"])({
      ref: ref
    }, other, {
      onClick: handleClick
    }), children));
  } else {
    var child = _react["default"].Children.only(children);

    var passHref = !child.props.href; // we only passHref if the child does not have an href prop already.  This fixes a bug with AMP where NextLink overrides and escapes amp-bind syntax in hrefs.
    // This way we can get a ref of Material-ui components

    return /*#__PURE__*/_react["default"].createElement(_RootRef["default"], {
      rootRef: ref
    }, /*#__PURE__*/_react["default"].createElement(_link["default"], {
      href: href,
      prefetch: false,
      as: as,
      passHref: passHref
    }, /*#__PURE__*/_react["default"].cloneElement(children, _objectSpread({
      onClick: handleClick
    }, other))));
  }
};

Link.propTypes = {
  /**
   * The URL path for the underlying anchor element's `href`.  This is required for dynamic routes.
   */
  as: _propTypes["default"].string,

  /**
   * The next.js route pattern
   */
  href: _propTypes["default"].string.isRequired,

  /**
   * Set to `visible` to prefetch the JSON data for the destination page component when the link
   * is scrolled into the viewport.  Set to `always` to prefetch the data immediately. Set to
   * `false` to never prefetch.
   */
  prefetch: _propTypes["default"].oneOf(['always', 'visible', false]),

  /**
   * The URL to prefetch.  If omitted, `/api/{href}` will be prefetched.
   */
  prefetchURL: _propTypes["default"].string,

  /**
   * Data to be added to the `pageData` key returned by [`/hooks/useLazyState`](/apiReference/hooks/useLazyState)
   * in the destination page component.  Use this to display partial data in the skeleton while the full dataset
   * is fetched from the server.
   */
  pageData: _propTypes["default"].object,

  /**
   * An optional function to run when the Link is clicked.
   */
  onClick: _propTypes["default"].func,

  /**
   * Content children of the link element.
   */
  children: _propTypes["default"].node
};
var _default = Link;
exports["default"] = _default;
//# sourceMappingURL=Link.js.map