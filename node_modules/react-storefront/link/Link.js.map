{"version":3,"sources":["../../src/link/Link.js"],"names":["Link","as","href","prefetch","prefetchURL","pageData","onClick","children","other","ref","linkPageData","LinkContext","handleClick","current","visible","disconnect","child","React","Children","only","passHref","props","cloneElement","propTypes","PropTypes","string","isRequired","oneOf","object","func","node"],"mappings":"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","sourcesContent":["import React, { useContext, useRef, useEffect } from 'react'\nimport NextLink from 'next/link'\nimport LinkContext from './LinkContext'\nimport PropTypes from 'prop-types'\nimport { RootRef } from '@material-ui/core'\nimport useIntersectionObserver from '../hooks/useIntersectionObserver'\nimport { prefetch as doPrefetch } from '../serviceWorker'\nimport withDefaultHandler from '../utils/withDefaultHandler'\nimport getAPIURL from '../api/getAPIURL'\n\n/**\n * Use this component for all Links in your React Storefront app.  You can\n * pass props to display on the next page while data is loading from the server\n * using the `pageData` prop. This component accepts all props that would\n * normally be passed to a [Next.js `Link` component](https://nextjs.org/docs/api-reference/next/link).\n * All other props are spread to the underlying HTML anchor element.\n *\n * Example:\n *\n * ```js\n * import Link from 'react-storefront/link/Link'\n *\n * <Link href=\"/p/[productId]\" as={`/p/${product.id}`} pageData={{ product }}>\n *   {product.name}\n * </Link>\n * ```\n */\nconst Link = ({ as, href, prefetch, prefetchURL, pageData, onClick, children, ...other }) => {\n  const ref = useRef(null)\n  const linkPageData = useContext(LinkContext)\n\n  const handleClick = withDefaultHandler(onClick, () => {\n    if (linkPageData) {\n      linkPageData.current = pageData\n    }\n  })\n\n  prefetchURL = prefetchURL || (as && getAPIURL(as))\n\n  useIntersectionObserver(\n    () => (prefetchURL && prefetch === 'visible' ? ref : null),\n    (visible, disconnect) => {\n      if (visible && prefetchURL) {\n        disconnect()\n        doPrefetch(prefetchURL)\n      }\n    },\n    [prefetchURL, prefetch],\n  )\n\n  useEffect(() => {\n    if (prefetch === 'always' && prefetchURL) {\n      doPrefetch(prefetchURL)\n    }\n  }, [prefetchURL])\n\n  if (!children || typeof children === 'string') {\n    return (\n      <NextLink href={href} prefetch={false} as={as} passHref>\n        <a ref={ref} {...other} onClick={handleClick}>\n          {children}\n        </a>\n      </NextLink>\n    )\n  } else {\n    const child = React.Children.only(children)\n    const passHref = !child.props.href // we only passHref if the child does not have an href prop already.  This fixes a bug with AMP where NextLink overrides and escapes amp-bind syntax in hrefs.\n\n    // This way we can get a ref of Material-ui components\n    return (\n      <RootRef rootRef={ref}>\n        <NextLink href={href} prefetch={false} as={as} passHref={passHref}>\n          {React.cloneElement(children, {\n            onClick: handleClick,\n            ...other,\n          })}\n        </NextLink>\n      </RootRef>\n    )\n  }\n}\n\nLink.propTypes = {\n  /**\n   * The URL path for the underlying anchor element's `href`.  This is required for dynamic routes.\n   */\n  as: PropTypes.string,\n\n  /**\n   * The next.js route pattern\n   */\n  href: PropTypes.string.isRequired,\n\n  /**\n   * Set to `visible` to prefetch the JSON data for the destination page component when the link\n   * is scrolled into the viewport.  Set to `always` to prefetch the data immediately. Set to\n   * `false` to never prefetch.\n   */\n  prefetch: PropTypes.oneOf(['always', 'visible', false]),\n\n  /**\n   * The URL to prefetch.  If omitted, `/api/{href}` will be prefetched.\n   */\n  prefetchURL: PropTypes.string,\n\n  /**\n   * Data to be added to the `pageData` key returned by [`/hooks/useLazyState`](/apiReference/hooks/useLazyState)\n   * in the destination page component.  Use this to display partial data in the skeleton while the full dataset\n   * is fetched from the server.\n   */\n  pageData: PropTypes.object,\n\n  /**\n   * An optional function to run when the Link is clicked.\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * Content children of the link element.\n   */\n  children: PropTypes.node,\n}\n\nexport default Link\n"],"file":"Link.js"}