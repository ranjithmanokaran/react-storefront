"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = Rating;
exports.styles = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _Star = _interopRequireDefault(require("@material-ui/icons/Star"));

var _StarBorder = _interopRequireDefault(require("@material-ui/icons/StarBorder"));

var _StarHalf = _interopRequireDefault(require("@material-ui/icons/StarHalf"));

var _styles = require("@material-ui/core/styles");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _clsx2 = _interopRequireDefault(require("clsx"));

var _Box = require("./Box");

/**
 * Displays a star rating corresponding to the provided value
 */
var styles = function styles(theme) {
  return {
    /**
     * Styles applied to the root element.
     */
    root: {
      display: 'flex',
      '& svg': {
        color: theme.palette.rating,
        height: '16px',
        width: '16px',
        display: 'block'
      }
    },

    /**
     * Styles applied to an empty rating icon.
     */
    filledEmpty: {
      fill: theme.palette.divider
    },

    /**
     * Styles applied to the root element when [`value`](#prop-value) is `0`.
     */
    blank: {
      '& svg': {
        color: theme.palette.divider
      }
    },

    /**
     * Styles applied to the label element.
     */
    reviewsLabel: {
      marginLeft: '3px'
    }
  };
};

exports.styles = styles;
var useStyles = (0, _styles.makeStyles)(styles, {
  name: 'RSFRating'
});

function Rating(_ref) {
  var iconFull = _ref.iconFull,
      iconHalf = _ref.iconHalf,
      iconEmpty = _ref.iconEmpty,
      classes = _ref.classes,
      value = _ref.value,
      label = _ref.label,
      reviewCount = _ref.reviewCount,
      className = _ref.className,
      product = _ref.product,
      fillEmpty = _ref.fillEmpty;
  var stars = [];

  if (product) {
    reviewCount = product.reviewCount;
    value = product.rating;
  }

  classes = useStyles({
    classes: classes
  });
  var IconFull = iconFull || _Star["default"];
  var IconHalf = iconHalf || _StarHalf["default"];
  var IconEmpty = iconEmpty || _StarBorder["default"];

  for (var i = 1; i <= 5; i++) {
    if (value == null || value >= i) {
      stars.push( /*#__PURE__*/_react["default"].createElement(IconFull, {
        key: i
      }));
    } else if (value >= i - 0.5) {
      stars.push( /*#__PURE__*/_react["default"].createElement(IconHalf, {
        key: i
      }));
    } else if (fillEmpty) {
      stars.push( /*#__PURE__*/_react["default"].createElement(IconFull, {
        className: classes.filledEmpty,
        key: i
      }));
    } else {
      stars.push( /*#__PURE__*/_react["default"].createElement(IconEmpty, {
        key: i
      }));
    }
  }

  return /*#__PURE__*/_react["default"].createElement(_Box.Hbox, null, /*#__PURE__*/_react["default"].createElement("div", {
    className: (0, _clsx2["default"])(classes.root, className, (0, _defineProperty2["default"])({}, classes.blank, value == null))
  }, stars), reviewCount ? /*#__PURE__*/_react["default"].createElement("div", {
    className: classes.reviewsLabel
  }, "(", reviewCount, label(reviewCount), ")") : null);
}

Rating.propTypes = {
  /**
   * Override or extend the styles applied to the component. See [CSS API](#css) below for more details.
   */
  classes: _propTypes["default"].object,

  /**
   * The number of stars to display.  Can be an integer or a float ending in .5.
   */
  value: _propTypes["default"].number,

  /**
   * The number of reviews.
   */
  reviewCount: _propTypes["default"].number,

  /**
   * A function that returns the label displayed to the right of the review count.
   * For example: `<Rating label={reviewCount => <span> {reviewCount == 1 ? 'review' : 'reviews'}</span>}/>`.
   * This value used in this example is the default.
   */
  label: _propTypes["default"].func,

  /**
   * Can be used to as an alternative to setting `value` and `reviewCount` individually.
   */
  product: _propTypes["default"].object,

  /**
   * Custom full point icon.
   */
  iconFull: _propTypes["default"].elementType,

  /**
   * Custom half point icon.
   */
  iconHalf: _propTypes["default"].elementType,

  /**
   * Custom empty icon; will override `fillEmpty` icon.
   */
  iconEmpty: _propTypes["default"].elementType,

  /**
   * If `true`, use a filled icon with light gray background for empty icon
   */
  fillEmpty: _propTypes["default"].bool
};
Rating.defaultProps = {
  label: function label(reviewCount) {
    return /*#__PURE__*/_react["default"].createElement("span", null, " ", reviewCount == 1 ? 'review' : 'reviews');
  },
  fillEmpty: false
};
//# sourceMappingURL=Rating.js.map