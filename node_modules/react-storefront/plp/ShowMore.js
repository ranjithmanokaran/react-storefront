"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = ShowMore;
exports.styles = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styles = require("@material-ui/core/styles");

var _CircularProgress = _interopRequireDefault(require("@material-ui/core/CircularProgress"));

var _Button = _interopRequireDefault(require("@material-ui/core/Button"));

var _clsx = _interopRequireDefault(require("clsx"));

var _SearchResultsContext = _interopRequireDefault(require("./SearchResultsContext"));

var _reactVisibilitySensor = _interopRequireDefault(require("react-visibility-sensor"));

var styles = function styles(theme) {
  return {
    /**
     * Styles applied to the root element.
     */
    root: {
      margin: '15px 0',
      width: '100%',
      display: 'flex',
      justifyContent: 'center'
    },

    /**
     * Styles applied to the button element.
     */
    button: (0, _defineProperty2["default"])({}, theme.breakpoints.down('xs'), {
      flex: 1
    }),

    /**
     * Styles applied to the loading icon.
     */
    loading: {
      display: 'flex',
      height: 45,
      justifyContent: 'center'
    }
  };
};

exports.styles = styles;
var VARIANTS = {
  BUTTON: 'button',
  INFINITE: 'infinite'
};
var useStyles = (0, _styles.makeStyles)(styles, {
  name: 'RSFShowMore'
});
/**
 * A control that handles loading the next page of results in a search results
 * page or PLP.  This component can either display a "Show More" button:
 *
 * ```js
 * <ShowMore variant="button"/>
 * ```
 * ... or can produce an "infinite scroll" effect that loads more records when the user
 * scrolls within a configured offset from the bottom of the page:
 *
 * ```js
 * <ShowMore variant="infinite" infiniteLoadOffset={200}/>
 * ```
 *
 * This component should always be used inside a `<SearchResultsProvider/>`.
 *
 * This component relies on the following properties being defined in `pageData` in the page store:
 *
 * * `page` - The current page number
 * * `totalPages` - The total number of pages
 */

function ShowMore(_ref) {
  var className = _ref.className,
      style = _ref.style,
      children = _ref.children,
      variant = _ref.variant,
      href = _ref.href,
      infiniteLoadOffset = _ref.infiniteLoadOffset,
      renderLoadingIcon = _ref.renderLoadingIcon,
      others = (0, _objectWithoutProperties2["default"])(_ref, ["className", "style", "children", "variant", "href", "infiniteLoadOffset", "renderLoadingIcon"]);
  var classes = useStyles(others);

  var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      loading = _useState2[0],
      setLoading = _useState2[1];

  var _useContext = (0, _react.useContext)(_SearchResultsContext["default"]),
      actions = _useContext.actions,
      pageData = _useContext.pageData;

  if (pageData && pageData.page >= pageData.totalPages - 1) return null;

  function fetchMore() {
    return _fetchMore.apply(this, arguments);
  }

  function _fetchMore() {
    _fetchMore = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (loading) {
                _context.next = 8;
                break;
              }

              setLoading(true);
              _context.prev = 2;
              _context.next = 5;
              return actions.fetchMore();

            case 5:
              _context.prev = 5;
              setLoading(false);
              return _context.finish(5);

            case 8:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[2,, 5, 8]]);
    }));
    return _fetchMore.apply(this, arguments);
  }

  function handleVisible(isVisible) {
    if (isVisible) {
      fetchMore();
    }
  }

  if (variant === VARIANTS.INFINITE) {
    return /*#__PURE__*/_react["default"].createElement(_reactVisibilitySensor["default"], {
      onChange: handleVisible,
      partialVisibility: true,
      offset: {
        bottom: -infiniteLoadOffset
      }
    }, /*#__PURE__*/_react["default"].createElement("div", {
      className: (0, _clsx["default"])(classes.loading, className),
      style: style
    }, renderLoadingIcon()));
  } else {
    return /*#__PURE__*/_react["default"].createElement("div", {
      className: (0, _clsx["default"])(classes.root, className),
      style: style
    }, loading ? /*#__PURE__*/_react["default"].createElement("div", {
      className: classes.loading
    }, renderLoadingIcon()) : /*#__PURE__*/_react["default"].createElement(_Button["default"], (0, _extends2["default"])({
      variant: "contained",
      color: "primary",
      href: href,
      className: classes.button,
      onClick: fetchMore
    }, others), children || 'Show More'));
  }
}

ShowMore.propTypes = {
  /**
   * A renderer for the loading icon.  Uses `<CircularProgress />` by default.
   */
  renderLoadingIcon: _propTypes["default"].func,

  /**
   * Which variant to use. One of `'button'` or `'infinite'`.
   *
   * When variant is set to `'button'`:
   *   A button is rendered with contents of `{props.children}` or `'Show More'`.
   *
   * When variant is set to `'infinite'`:
   *   The loading icon is rendered and contents of next page loaded when user
   *   scrolls to the end of the page.
   *
   * In AMP the `'button'` variant is always used.
   */
  variant: _propTypes["default"].oneOf([VARIANTS.BUTTON, VARIANTS.INFINITE]),

  /**
   * Minimum amount of pixels from the bottom of the page to where the user has
   * scrolled before the new page is loaded. Used in conjunction with `'infinite'`
   * variant. Defaults to 200.
   */
  infiniteLoadOffset: _propTypes["default"].number,

  /**
   * When specified, clicking the button will navigate to the specified URL with a full page reload.
   */
  href: _propTypes["default"].string,

  /**
   * A CSS class to apply to the root element.
   */
  className: _propTypes["default"].string,

  /**
   * CSS styles to be added to the root element.
   */
  style: _propTypes["default"].object
};
ShowMore.defaultProps = {
  renderLoadingIcon: function renderLoadingIcon() {
    return /*#__PURE__*/_react["default"].createElement(_CircularProgress["default"], null);
  },
  variant: VARIANTS.BUTTON,
  infiniteLoadOffset: 200
};
//# sourceMappingURL=ShowMore.js.map