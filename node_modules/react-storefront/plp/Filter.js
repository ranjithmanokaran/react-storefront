"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.styles = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styles = require("@material-ui/core/styles");

var _FacetGroup = _interopRequireDefault(require("./FacetGroup"));

var _FilterHeader = _interopRequireDefault(require("./FilterHeader"));

var _FilterFooter = _interopRequireDefault(require("./FilterFooter"));

var _SearchResultsContext = _interopRequireDefault(require("./SearchResultsContext"));

var styles = function styles(theme) {
  return {
    /**
     * Styles applied to the root element.
     */
    root: {
      height: '100%',
      display: 'flex',
      flexDirection: 'column',
      alignItems: 'stretch'
    },

    /**
     * Styles applied to the wrapper element around the facet groups.
     */
    facetGroups: {
      overflow: 'auto',
      overflowX: 'hidden',
      flex: '1',
      position: 'relative'
    }
  };
};

exports.styles = styles;
var useStyles = (0, _styles.makeStyles)(styles, {
  name: 'RSFFilter'
});
/**
 * UI for filtering a list of products.  This component can be used on its own, or you can use
 * [`FilterButton`](/apiReference/plp/FilterButton) to automatically display this component in a
 * drawer that slides up from the bottom of the viewport.
 */

function Filter(_ref) {
  var expandAll = _ref.expandAll,
      hideClearLink = _ref.hideClearLink,
      clearLinkText = _ref.clearLinkText,
      submitOnChange = _ref.submitOnChange,
      style = _ref.style,
      classes = _ref.classes,
      title = _ref.title,
      onViewResultsClick = _ref.onViewResultsClick;
  classes = useStyles({
    classes: classes
  });

  var _useContext = (0, _react.useContext)(_SearchResultsContext["default"]),
      facets = _useContext.pageData.facets;

  return /*#__PURE__*/_react["default"].createElement("div", {
    style: style,
    className: classes.root
  }, /*#__PURE__*/_react["default"].createElement(_FilterHeader["default"], {
    hideClearLink: hideClearLink,
    clearLinkText: clearLinkText,
    title: title,
    submitOnChange: submitOnChange
  }), /*#__PURE__*/_react["default"].createElement("div", {
    className: classes.facetGroups
  }, facets && facets.map(function (group, i) {
    return /*#__PURE__*/_react["default"].createElement(_FacetGroup["default"], {
      group: group,
      key: i,
      defaultExpanded: expandAll,
      submitOnChange: submitOnChange
    });
  })), /*#__PURE__*/_react["default"].createElement(_FilterFooter["default"], {
    onViewResultsClick: onViewResultsClick,
    submitOnChange: submitOnChange
  }));
}

Filter.propTypes = {
  /**
   * Override or extend the styles applied to the component. See [CSS API](#css) below for more details.
   */
  classes: _propTypes["default"].object,

  /**
   * A function to call when the user clicks the button to view updated results.  The default behavior can be
   * canceled by calling `preventDefault` on the passed in event.  The event is passed as the only argument.
   */
  onViewResultsClick: _propTypes["default"].func,

  /**
   * The query string parameter that should be updated when filters are changed.  The value will be an array
   * of codes for each selected facet.
   */
  queryParam: _propTypes["default"].string,

  /**
   * An optional title to display at the top of the component.
   */
  title: _propTypes["default"].string,

  /**
   * Set to `true` to expand all groups on initial render.
   */
  expandAll: _propTypes["default"].bool,

  /**
   * Set to `true` to refresh the results when the user toggles a filter.
   */
  submitOnChange: _propTypes["default"].bool,

  /**
   * If `true`, the clear link is hidden.
   */
  hideClearLink: _propTypes["default"].bool,

  /**
   * Text to use for the clear link.
   */
  clearLinkText: _propTypes["default"].string,

  /**
   * CSS styles to add to the root component.
   */
  style: _propTypes["default"].object
};
Filter.defaultProps = {
  onViewResultsClick: Function.prototype,
  submitOnChange: false
};

var _default = /*#__PURE__*/(0, _react.memo)(Filter);

exports["default"] = _default;
//# sourceMappingURL=Filter.js.map