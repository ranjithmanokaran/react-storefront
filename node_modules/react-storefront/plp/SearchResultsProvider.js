"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = SearchResultsProvider;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _react = _interopRequireWildcard(require("react"));

var _SearchResultsContext = _interopRequireDefault(require("./SearchResultsContext"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _qs = _interopRequireDefault(require("qs"));

var _replaceState = _interopRequireDefault(require("../router/replaceState"));

var _getAPIURL = _interopRequireDefault(require("../api/getAPIURL"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * Provides context to filter, sorting, and pagination components.
 *
 * ```js
 *  import useSearchResultsStore from 'react-storefront/plp/useSearchResultsStore'
 *  import SearchResultsProvider from 'react-storefront/plp/SearchResultsProvider'
 *  import FilterButton from 'react-storefront/plp/FilterButton'
 *
 *  function Subcategory(lazyProps) {
 *    const [store, updateStore] = useSearchResultsStore(lazyProps)
 *
 *    return (
 *      <SearchResultsProvider store={store}>
 *        <FilterButton/>
 *      </SearchResultsProvider>
 *    )
 *  }
 * ```
 */
function SearchResultsProvider(_ref) {
  var store = _ref.store,
      updateStore = _ref.updateStore,
      queryForState = _ref.queryForState,
      children = _ref.children;
  (0, _react.useEffect)(function () {
    if (store.reloading) {
      var refresh = /*#__PURE__*/function () {
        var _ref2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
          var query, url, _yield$fetch$then, _yield$fetch$then$pag, products, total;

          return _regenerator["default"].wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  query = getQueryForState();
                  url = getURLForState(query); // Don't show page for user

                  delete query.page;
                  (0, _replaceState["default"])(null, null, getURLForState(query));
                  _context.next = 6;
                  return fetch((0, _getAPIURL["default"])(url)).then(function (res) {
                    return res.json();
                  });

                case 6:
                  _yield$fetch$then = _context.sent;
                  _yield$fetch$then$pag = _yield$fetch$then.pageData;
                  products = _yield$fetch$then$pag.products;
                  total = _yield$fetch$then$pag.total;
                  updateStore(function (store) {
                    return {
                      reloading: false,
                      pageData: _objectSpread(_objectSpread({}, store.pageData), {}, {
                        total: total,
                        products: store.pageData.page === 0 ? products : store.pageData.products.concat(products)
                      })
                    };
                  });

                case 11:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        return function refresh() {
          return _ref2.apply(this, arguments);
        };
      }();

      refresh();
    }
  }, [store]);
  /**
   * Fetches the next page of results
   */

  var fetchMore = function fetchMore() {
    updateStore(function (store) {
      return {
        reloading: true,
        pageData: _objectSpread(_objectSpread({}, store.pageData), {}, {
          page: store.pageData.page + 1
        })
      };
    });
  };
  /**
   * Removes all filters
   * @param {Boolean} submit If true, fetches new results from the server
   */


  var clearFilters = function clearFilters(submit) {
    setFilters([], submit);
  };
  /**
   * Switches the state of a filter
   * @param {Object} facet
   * @param {Boolean} submit If true, fetches new results from the server
   */


  var toggleFilter = function toggleFilter(facet, submit) {
    var code = facet.code;
    var filters = store.pageData.filters;
    var nextFilters = (0, _toConsumableArray2["default"])(filters);
    var index = nextFilters.indexOf(code);

    if (index === -1) {
      nextFilters.push(code);
    } else {
      nextFilters.splice(index, 1);
    }

    setFilters(nextFilters, submit);
  };
  /**
   * Updates the set of selected filters
   * @param {Object[]} filters
   * @param {Boolean} submit If true, fetches new results from the server
   */


  var setFilters = function setFilters(filters, submit) {
    var filtersChanged = JSON.stringify(filters.map(function (v) {
      return v.toLowerCase();
    }).sort()) !== JSON.stringify(store.pageData.filters.map(function (v) {
      return v.toLowerCase();
    }).sort());
    updateStore(function (store) {
      return {
        reloading: Boolean(submit),
        pageData: _objectSpread(_objectSpread({}, store.pageData), {}, {
          filters: filters,
          filtersChanged: submit ? false : filtersChanged,
          page: submit ? 0 : store.pageData.page
        })
      };
    });
  };
  /**
   * Applies the selected filters, resets the page to 0 and fetches new results from the server.
   */


  var applyFilters = function applyFilters() {
    updateStore(function (store) {
      return {
        reloading: true,
        pageData: _objectSpread(_objectSpread({}, store.pageData), {}, {
          filtersChanged: false,
          page: 0
        })
      };
    });
  };
  /**
   * Computes the query for the current state of the search controls
   */


  var getQueryForState = function getQueryForState() {
    if (queryForState) return queryForState(store.pageData);
    var _store$pageData = store.pageData,
        filters = _store$pageData.filters,
        page = _store$pageData.page,
        sort = _store$pageData.sort;
    var search = window.location.search;

    var query = _qs["default"].parse(search, {
      ignoreQueryPrefix: true
    });

    if (filters.length) {
      query.filters = JSON.stringify(filters);
    } else {
      delete query.filters;
    }

    if (query.more) {
      delete query.more;
    }

    if (page > 0) {
      query.page = page;
    } else {
      delete query.page;
    }

    if (sort) {
      query.sort = sort;
    } else {
      delete query.sort;
    }

    return query;
  };
  /**
   * Computes the URL for the current query of the search controls
   */


  var getURLForState = function getURLForState(query) {
    var _window$location = window.location,
        pathname = _window$location.pathname,
        hash = _window$location.hash;
    return pathname + _qs["default"].stringify(query, {
      addQueryPrefix: true
    }) + hash;
  };

  var setSort = function setSort(option) {
    updateStore(function (store) {
      return {
        reloading: true,
        pageData: _objectSpread(_objectSpread({}, store.pageData), {}, {
          sort: option.code,
          page: 0
        })
      };
    });
  };

  return /*#__PURE__*/_react["default"].createElement(_SearchResultsContext["default"].Provider, {
    value: _objectSpread(_objectSpread({}, store), {}, {
      actions: {
        fetchMore: fetchMore,
        toggleFilter: toggleFilter,
        clearFilters: clearFilters,
        applyFilters: applyFilters,
        setSort: setSort,
        setFilters: setFilters
      }
    })
  }, children);
}

SearchResultsProvider.propTypes = {
  /**
   * A store returned from [`useSearchResultsStore`](/apiReference/plp/useSearchResultsStore).
   */
  store: _propTypes["default"].object.isRequired,

  /**
   * The update function returned from [`useSearchResultsStore`](/apiReference/plp/useSearchResultsStore).
   */
  updateStore: _propTypes["default"].func.isRequired,

  /**
   * An optional function to customize the URL format for search pages when the user
   * changes filters and sort.
   */
  queryForState: _propTypes["default"].func
};
//# sourceMappingURL=SearchResultsProvider.js.map