"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.styles = void 0;

var _react = _interopRequireWildcard(require("react"));

var _styles = require("@material-ui/core/styles");

var _Button = _interopRequireDefault(require("@material-ui/core/Button"));

var _MenuItem = _interopRequireDefault(require("@material-ui/core/MenuItem"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _SearchResultsContext = _interopRequireDefault(require("./SearchResultsContext"));

var styles = function styles(theme) {
  return {
    /**
     * Styles applied to the root container if [`variant`](#prop-variant) is `'buttons'`.
     */
    container: {
      padding: '15px 0 0 15px'
    },

    /**
     * Styles applied to each option if [`variant`](#prop-variant) is `'buttons'`.
     */
    option: {
      boxShadow: 'none',
      width: 'calc(50% - 15px)',
      margin: '0 15px 15px 0'
    }
  };
};

exports.styles = styles;
var useStyles = (0, _styles.makeStyles)(styles, {
  name: 'RSFSort'
});
/**
 * UI for sorting a list of products.  This component can be used on its own, or you can use
 * [`SortButton`](/apiReference/plp/SortButton) to automatically display this component in a drawer
 * that slides up from the bottom of the viewport.
 */

function Sort(_ref) {
  var variant = _ref.variant,
      classes = _ref.classes,
      onSelect = _ref.onSelect;
  classes = useStyles({
    classes: classes
  });

  var _useContext = (0, _react.useContext)(_SearchResultsContext["default"]),
      _useContext$pageData = _useContext.pageData,
      sort = _useContext$pageData.sort,
      sortOptions = _useContext$pageData.sortOptions,
      setSort = _useContext.actions.setSort;

  var handleClick = function handleClick(option, e) {
    onSelect(option, e);

    if (!e.defaultPrevented) {
      setSort(option);
    }
  };

  var renderButtons = function renderButtons() {
    return /*#__PURE__*/_react["default"].createElement("div", {
      className: classes.container
    }, sortOptions && sortOptions.map(function (option, i) {
      return /*#__PURE__*/_react["default"].createElement(_Button["default"], {
        className: classes.option,
        color: sort === option.code ? 'primary' : 'default',
        variant: "contained",
        onClick: function onClick(e) {
          return handleClick(option, e);
        },
        key: i
      }, option.name);
    }));
  };

  var renderMenu = function renderMenu() {
    return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, sortOptions && sortOptions.map(function (option, i) {
      return /*#__PURE__*/_react["default"].createElement(_MenuItem["default"], {
        key: i,
        onClick: function onClick(e) {
          return handleClick(option, e);
        }
      }, option.name);
    }));
  };

  if (variant === 'buttons') {
    return renderButtons();
  } else if (variant === 'menu-items') {
    return renderMenu();
  } else {
    return null;
  }
}

Sort.propTypes = {
  /**
   * Override or extend the styles applied to the component. See [CSS API](#css) below for more details.
   */
  classes: _propTypes["default"].object,

  /**
   * A function to call when a sort option is selected.  The option and event are passed.
   * The default behavior can be prevented by called `preventDefault()` on the passed in event.
   */
  onSelect: _propTypes["default"].func,

  /**
   * Controls how sort options are displayed.
   */
  variant: _propTypes["default"].oneOf(['menu-items', 'buttons'])
};
Sort.defaultProps = {
  onSelect: Function.prototype,
  variant: 'buttons'
};

var _default = /*#__PURE__*/(0, _react.memo)( /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  return /*#__PURE__*/_react["default"].createElement(Sort, props);
}));

exports["default"] = _default;
//# sourceMappingURL=Sort.js.map