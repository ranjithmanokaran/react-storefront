"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = FacetGroup;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _SearchResultsContext = _interopRequireDefault(require("./SearchResultsContext"));

var _styles = require("@material-ui/core/styles");

var _ExpandableSection = _interopRequireDefault(require("../ExpandableSection"));

var _CheckboxFilterGroup = _interopRequireDefault(require("./CheckboxFilterGroup"));

var _ButtonFilterGroup = _interopRequireDefault(require("./ButtonFilterGroup"));

var _ListItem = _interopRequireDefault(require("@material-ui/core/ListItem"));

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var styles = function styles(theme) {
  return {
    /**
     * Styles applied to the group's title element.
     */
    groupTitle: (0, _defineProperty2["default"])({}, theme.breakpoints.up('sm'), {
      fontWeight: 'bold'
    })
  };
};

var useStyles = (0, _styles.makeStyles)(styles, {
  name: 'RSFFacetGroup'
});
/**
 * A grouping of facets used for filtering products.
 */

function FacetGroup(props) {
  var group = props.group,
      submitOnChange = props.submitOnChange,
      defaultExpanded = props.defaultExpanded,
      ControlsComponent = props.ControlsComponent,
      controlsProps = props.controlsProps,
      listItemProps = props.listItemProps,
      onClose = props.onClose,
      isSimpleList = props.isSimpleList;
  var classes = useStyles(props.classes);

  var _useContext = (0, _react.useContext)(_SearchResultsContext["default"]),
      filters = _useContext.pageData.filters;

  return (0, _react.useMemo)(function () {
    if (!filters) return null;
    var selection = [];

    var _iterator = _createForOfIteratorHelper(group.options),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var option = _step.value;

        if (filters.indexOf(option.code) !== -1) {
          selection.push(option);
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    var Controls = ControlsComponent;

    if (!Controls && group.ui === 'buttons') {
      Controls = _ButtonFilterGroup["default"];
    } else if (!Controls) {
      Controls = _CheckboxFilterGroup["default"];
    }

    var caption = null;

    if (selection.length === 1) {
      caption = selection[0].name;
    } else if (selection.length > 0) {
      caption = "".concat(selection.length, " selected");
    }

    if (isSimpleList) {
      return /*#__PURE__*/_react["default"].createElement(_ListItem["default"], listItemProps, /*#__PURE__*/_react["default"].createElement("span", {
        className: classes.groupTitle
      }, group.name), /*#__PURE__*/_react["default"].createElement(Controls, (0, _extends2["default"])({
        onClose: onClose,
        group: group,
        submitOnChange: submitOnChange
      }, controlsProps)));
    }

    return /*#__PURE__*/_react["default"].createElement(_ExpandableSection["default"], {
      title: group.name,
      caption: caption,
      defaultExpanded: defaultExpanded,
      classes: {
        title: classes.groupTitle
      }
    }, /*#__PURE__*/_react["default"].createElement(Controls, (0, _extends2["default"])({
      group: group,
      submitOnChange: submitOnChange
    }, controlsProps)));
  }, [].concat((0, _toConsumableArray2["default"])(Object.values(props)), [filters]));
}

FacetGroup.propTypes = {
  /**
   * Override or extend the styles applied to the component. See [CSS API](#css) below for more details.
   */
  classes: _propTypes["default"].object,
  // TODO - make this a shape

  /**
   * Contains data for the facet group to be rendered.
   */
  group: _propTypes["default"].object,

  /**
   * Set to `true` to refresh the results when the user toggles a filter.
   */
  submitOnChange: _propTypes["default"].bool,

  /**
   * If `true`, the group is expanded by default.
   */
  defaultExpanded: _propTypes["default"].bool,

  /**
   * Custom component to use own component.
   */
  ControlsComponent: _propTypes["default"].func,
  controlsProps: _propTypes["default"].object,
  onClose: _propTypes["default"].func,
  listItemProps: _propTypes["default"].object,

  /**
   * If `true` list will be displayed instead of expandable items.
   */
  isSimpleList: _propTypes["default"].bool
};
//# sourceMappingURL=FacetGroup.js.map