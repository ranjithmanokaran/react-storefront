{"version":3,"sources":["../../src/plp/SortButton.js"],"names":["SortButton","title","drawerProps","onClick","sortProps","drawerBreakpoint","href","props","theme","open","mountDrawer","anchorEl","state","setState","SearchResultsContext","pageData","sort","sortOptions","buttonRef","selectedOption","find","o","code","location","search","indexOf","current","handleClick","e","defaultPrevented","toggleOpen","currentTarget","close","useDrawer","breakpoints","down","name","keepMounted","propTypes","classes","PropTypes","object","string","oneOf","onCLick","func","defaultProps"],"mappings":"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","sourcesContent":["import React, { memo, useState, useEffect, useContext, useRef } from 'react'\nimport ActionButton from '../ActionButton'\nimport Sort from './Sort'\nimport PropTypes from 'prop-types'\nimport Drawer from '../drawer/Drawer'\nimport { Menu, useMediaQuery } from '@material-ui/core'\nimport { useTheme } from '@material-ui/core/styles'\nimport SearchResultsContext from './SearchResultsContext'\n\n/**\n * A button that when clicked, opens a drawer containing the `Sort` view. The name of the currently\n * selected sort option is displayed in the button text.\n */\nfunction SortButton({ title, drawerProps, onClick, sortProps, drawerBreakpoint, href, ...props }) {\n  const theme = useTheme()\n  const [state, setState] = useState({\n    open: false,\n    mountDrawer: false,\n    anchorEl: null,\n  })\n  const { open, mountDrawer, anchorEl } = state\n  const {\n    pageData: { sort, sortOptions },\n  } = useContext(SearchResultsContext)\n  const buttonRef = useRef()\n  const selectedOption = sortOptions.find(o => sort === o.code)\n\n  useEffect(() => {\n    if (location.search.indexOf('openSort') !== -1) {\n      setState({ open: true, mountDrawer: true, anchorEl: buttonRef.current })\n    }\n  }, [])\n\n  const handleClick = e => {\n    if (onClick) {\n      onClick(e)\n    }\n\n    if (!e.defaultPrevented) {\n      toggleOpen(true, e.currentTarget)\n    }\n  }\n\n  const close = () => {\n    toggleOpen(false)\n  }\n\n  const toggleOpen = (open, anchorEl) => {\n    if (open) {\n      setState({ mountDrawer: true, open: true, anchorEl: anchorEl })\n    } else {\n      setState({ ...state, open: false, anchorEl: null })\n    }\n  }\n\n  const useDrawer = useMediaQuery(theme.breakpoints.down(drawerBreakpoint))\n\n  return (\n    <>\n      <ActionButton\n        key=\"button\"\n        label={title}\n        ref={buttonRef}\n        value={selectedOption && selectedOption.name}\n        href={href}\n        {...props}\n        onClick={e => handleClick(e)}\n      />\n      {!href && useDrawer && (\n        <Drawer\n          ModalProps={{\n            keepMounted: true,\n          }}\n          key=\"drawer\"\n          anchor=\"bottom\"\n          title={title}\n          open={open}\n          onClose={close}\n          {...drawerProps}\n        >\n          {mountDrawer && <Sort onSelect={close} {...sortProps} />}\n        </Drawer>\n      )}\n      {!href && !useDrawer && (\n        <Menu open={open} anchorEl={anchorEl} onClose={close}>\n          <Sort variant=\"menu-items\" onSelect={close} {...sortProps} />\n        </Menu>\n      )}\n    </>\n  )\n}\n\nSortButton.propTypes = {\n  /**\n   * Override or extend the styles applied to the component. See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * Props to pass to the underlying `Drawer` component.\n   */\n  drawerProps: PropTypes.object,\n\n  /**\n   * Props to pass to the underlying [`Sort`](/apiReference/plp/Sort) component.\n   */\n  sortProps: PropTypes.object,\n\n  /**\n   * Text for the button label and the drawer header.\n   */\n  title: PropTypes.string,\n\n  /**\n   * The breakpoint in your theme below which a drawer UI should be used in favor of the menu UI.\n   */\n  drawerBreakpoint: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),\n\n  /**\n   * When specified, clicking the button will navigate to the specified URL with a full page reload.\n   */\n  href: PropTypes.string,\n\n  /**\n   * A function that is called when the button is clicked.\n   */\n  onCLick: PropTypes.func,\n}\n\nSortButton.defaultProps = {\n  title: 'Sort',\n  drawerProps: {},\n  sortProps: {},\n  drawerBreakpoint: 'xs',\n}\n\nexport default memo(SortButton)\n"],"file":"SortButton.js"}