{"version":3,"sources":["../../src/plp/FilterButton.js"],"names":["styles","theme","drawer","height","useStyles","name","FilterButton","classes","title","drawerProps","onClick","href","props","SearchResultsContext","pageData","filters","facets","actions","openFilter","query","open","mountDrawer","state","setState","clear","clearDisabled","buttonClasses","toggleOpen","handleClick","e","defaultPrevented","handleViewResultsClick","applyFilters","getFilterList","length","selected","group","options","option","code","paper","bind","keepMounted","propTypes","PropTypes","object","string","func","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, memo, useContext } from 'react'\nimport ActionButton from '../ActionButton'\nimport SearchResultsContext from './SearchResultsContext'\nimport Filter from './Filter'\nimport PropTypes from 'prop-types'\nimport Drawer from '../drawer/Drawer'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { useRouter } from 'next/router'\n\nexport const styles = theme => ({\n  /**\n   * Styles applied to the drawer element.\n   */\n  drawer: {\n    height: '75vh',\n  },\n})\n\nconst useStyles = makeStyles(styles, { name: 'RSFFilterButton' })\n\n/**\n * A button that when clicked, opens a drawer containing the `Filter` view. Current filters\n * are displayed in the button text.\n */\nfunction FilterButton({ classes, title, drawerProps, onClick, href, ...props }) {\n  classes = useStyles({ classes })\n\n  const {\n    pageData: { filters, facets },\n    actions,\n  } = useContext(SearchResultsContext)\n\n  const openFilter = useRouter().query.openFilter === '1'\n  const [state, setState] = useState({ open: openFilter, mountDrawer: openFilter })\n  const { open, mountDrawer } = state\n  const { clear, clearDisabled, drawer, ...buttonClasses } = useStyles(classes)\n\n  const toggleOpen = open => {\n    setState({ ...state, open, mountDrawer: mountDrawer || true })\n  }\n\n  const handleClick = e => {\n    if (onClick) {\n      onClick(e)\n    }\n\n    if (!e.defaultPrevented) {\n      toggleOpen(true)\n    }\n  }\n\n  const handleViewResultsClick = useCallback(() => {\n    toggleOpen(false)\n    actions.applyFilters()\n  }, [actions])\n\n  const getFilterList = () => {\n    if (!filters || !facets || filters.length === 0) return null\n    if (filters.length > 1) return `${filters.length} selected`\n\n    const selected = filters[0]\n\n    for (let group of facets) {\n      for (let option of group.options) {\n        if (selected === option.code) {\n          return option.name\n        }\n      }\n    }\n\n    return null\n  }\n\n  return (\n    <>\n      <ActionButton\n        label={title}\n        href={href}\n        value={getFilterList()}\n        classes={buttonClasses}\n        onClick={handleClick}\n        {...props}\n      />\n      {!href && (\n        <Drawer\n          classes={{ paper: classes.drawer }}\n          anchor=\"bottom\"\n          open={open}\n          onClose={toggleOpen.bind(null, false)}\n          ModalProps={{\n            keepMounted: true,\n          }}\n        >\n          {mountDrawer && <Filter onViewResultsClick={handleViewResultsClick} {...drawerProps} />}\n        </Drawer>\n      )}\n    </>\n  )\n}\n\nFilterButton.propTypes = {\n  /**\n   * Override or extend the styles applied to the component. See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * Props for the underlying `Filter` component.\n   */\n  drawerProps: PropTypes.object,\n\n  /**\n   * The label for the button and the drawer header.\n   */\n  title: PropTypes.string,\n\n  /**\n   * When specified, clicking the button will navigate to the specified URL with a full page reload.\n   */\n  href: PropTypes.string,\n\n  /**\n   * A function that will be called when the button is clicked.\n   */\n  onClick: PropTypes.func,\n}\n\nFilterButton.defaultProps = {\n  title: 'Filter',\n  drawerProps: {},\n}\n\nexport default memo(FilterButton)\n"],"file":"FilterButton.js"}