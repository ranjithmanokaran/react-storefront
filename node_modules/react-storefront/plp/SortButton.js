"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _ActionButton = _interopRequireDefault(require("../ActionButton"));

var _Sort = _interopRequireDefault(require("./Sort"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Drawer = _interopRequireDefault(require("../drawer/Drawer"));

var _Menu = _interopRequireDefault(require("@material-ui/core/Menu"));

var _useMediaQuery = _interopRequireDefault(require("@material-ui/core/useMediaQuery"));

var _styles = require("@material-ui/core/styles");

var _SearchResultsContext = _interopRequireDefault(require("./SearchResultsContext"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * A button that when clicked, opens a drawer containing the `Sort` view. The name of the currently
 * selected sort option is displayed in the button text.
 */
function SortButton(_ref) {
  var title = _ref.title,
      drawerProps = _ref.drawerProps,
      onClick = _ref.onClick,
      sortProps = _ref.sortProps,
      drawerBreakpoint = _ref.drawerBreakpoint,
      href = _ref.href,
      props = (0, _objectWithoutProperties2["default"])(_ref, ["title", "drawerProps", "onClick", "sortProps", "drawerBreakpoint", "href"]);
  var theme = (0, _styles.useTheme)();

  var _useState = (0, _react.useState)({
    open: false,
    mountDrawer: false,
    anchorEl: null
  }),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  var open = state.open,
      mountDrawer = state.mountDrawer,
      anchorEl = state.anchorEl;

  var _useContext = (0, _react.useContext)(_SearchResultsContext["default"]),
      _useContext$pageData = _useContext.pageData,
      sort = _useContext$pageData.sort,
      sortOptions = _useContext$pageData.sortOptions;

  var buttonRef = (0, _react.useRef)();
  var selectedOption = sortOptions.find(function (o) {
    return sort === o.code;
  });
  (0, _react.useEffect)(function () {
    if (location.search.indexOf('openSort') !== -1) {
      setState({
        open: true,
        mountDrawer: true,
        anchorEl: buttonRef.current
      });
    }
  }, []);

  var handleClick = function handleClick(e) {
    if (onClick) {
      onClick(e);
    }

    if (!e.defaultPrevented) {
      toggleOpen(true, e.currentTarget);
    }
  };

  var close = function close() {
    toggleOpen(false);
  };

  var toggleOpen = function toggleOpen(open, anchorEl) {
    if (open) {
      setState({
        mountDrawer: true,
        open: true,
        anchorEl: anchorEl
      });
    } else {
      setState(_objectSpread(_objectSpread({}, state), {}, {
        open: false,
        anchorEl: null
      }));
    }
  };

  var useDrawer = (0, _useMediaQuery["default"])(theme.breakpoints.down(drawerBreakpoint));
  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(_ActionButton["default"], (0, _extends2["default"])({
    key: "button",
    label: title,
    ref: buttonRef,
    value: selectedOption && selectedOption.name,
    href: href
  }, props, {
    onClick: function onClick(e) {
      return handleClick(e);
    }
  })), !href && useDrawer && /*#__PURE__*/_react["default"].createElement(_Drawer["default"], (0, _extends2["default"])({
    ModalProps: {
      keepMounted: true
    },
    key: "drawer",
    anchor: "bottom",
    title: title,
    open: open,
    onClose: close
  }, drawerProps), mountDrawer && /*#__PURE__*/_react["default"].createElement(_Sort["default"], (0, _extends2["default"])({
    onSelect: close
  }, sortProps))), !href && !useDrawer && /*#__PURE__*/_react["default"].createElement(_Menu["default"], {
    open: open,
    anchorEl: anchorEl,
    onClose: close
  }, /*#__PURE__*/_react["default"].createElement(_Sort["default"], (0, _extends2["default"])({
    variant: "menu-items",
    onSelect: close
  }, sortProps))));
}

SortButton.propTypes = {
  /**
   * Override or extend the styles applied to the component. See [CSS API](#css) below for more details.
   */
  classes: _propTypes["default"].object,

  /**
   * Props to pass to the underlying `Drawer` component.
   */
  drawerProps: _propTypes["default"].object,

  /**
   * Props to pass to the underlying [`Sort`](/apiReference/plp/Sort) component.
   */
  sortProps: _propTypes["default"].object,

  /**
   * Text for the button label and the drawer header.
   */
  title: _propTypes["default"].string,

  /**
   * The breakpoint in your theme below which a drawer UI should be used in favor of the menu UI.
   */
  drawerBreakpoint: _propTypes["default"].oneOf(['xs', 'sm', 'md', 'lg', 'xl']),

  /**
   * When specified, clicking the button will navigate to the specified URL with a full page reload.
   */
  href: _propTypes["default"].string,

  /**
   * A function that is called when the button is clicked.
   */
  onCLick: _propTypes["default"].func
};
SortButton.defaultProps = {
  title: 'Sort',
  drawerProps: {},
  sortProps: {},
  drawerBreakpoint: 'xs'
};

var _default = /*#__PURE__*/(0, _react.memo)(SortButton);

exports["default"] = _default;
//# sourceMappingURL=SortButton.js.map