"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = CheckboxFilterGroup;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _Checkbox = _interopRequireDefault(require("@material-ui/core/Checkbox"));

var _FormGroup = _interopRequireDefault(require("@material-ui/core/FormGroup"));

var _Typography = _interopRequireDefault(require("@material-ui/core/Typography"));

var _FormControlLabel = _interopRequireDefault(require("@material-ui/core/FormControlLabel"));

var _styles = require("@material-ui/core/styles");

var _SearchResultsContext = _interopRequireDefault(require("./SearchResultsContext"));

var styles = function styles(theme) {
  return {
    /**
     * Styles applied to the matching text.
     */
    matches: {
      marginLeft: '5px',
      display: 'inline'
    },

    /**
     * Styles applied to the group label element.
     */
    groupLabel: {
      display: 'flex',
      alignItems: 'center'
    }
  };
};

var useStyles = (0, _styles.makeStyles)(styles, {
  name: 'RSFCheckboxFilterGroup'
});
/**
 * A UI for grouping filters using checkboxes.
 */

function CheckboxFilterGroup(props) {
  var group = props.group,
      submitOnChange = props.submitOnChange;

  var _useContext = (0, _react.useContext)(_SearchResultsContext["default"]),
      filters = _useContext.pageData.filters,
      toggleFilter = _useContext.actions.toggleFilter;

  var classes = useStyles(props.classes);
  return (0, _react.useMemo)(function () {
    return /*#__PURE__*/_react["default"].createElement(_FormGroup["default"], null, group.options.map(function (facet, i) {
      return /*#__PURE__*/_react["default"].createElement(_FormControlLabel["default"], {
        key: i,
        label: /*#__PURE__*/_react["default"].createElement("div", {
          className: classes.groupLabel
        }, /*#__PURE__*/_react["default"].createElement("span", null, facet.name), /*#__PURE__*/_react["default"].createElement(_Typography["default"], {
          variant: "caption",
          className: classes.matches,
          component: "span"
        }, "(", facet.matches, ")")),
        control: /*#__PURE__*/_react["default"].createElement(_Checkbox["default"], {
          checked: filters.indexOf(facet.code) !== -1,
          color: "primary",
          onChange: function onChange() {
            return toggleFilter(facet, submitOnChange);
          }
        })
      });
    }));
  }, [].concat((0, _toConsumableArray2["default"])(Object.values(props)), [filters]));
}

CheckboxFilterGroup.propTypes = {
  /**
   * Override or extend the styles applied to the component. See [CSS API](#css) below for more details.
   */
  classes: _propTypes["default"].object,

  /**
   * Contains data for the group to be rendered.
   */
  group: _propTypes["default"].shape({
    options: _propTypes["default"].arrayOf(_propTypes["default"].shape({
      code: _propTypes["default"].string,
      name: _propTypes["default"].string,
      matches: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number]),
      image: _propTypes["default"].object
    }))
  }),

  /**
   * Set to `true` to refresh the results when the user toggles a filter.
   */
  submitOnChange: _propTypes["default"].bool
};
//# sourceMappingURL=CheckboxFilterGroup.js.map