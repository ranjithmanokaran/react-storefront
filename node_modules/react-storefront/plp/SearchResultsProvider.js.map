{"version":3,"sources":["../../src/plp/SearchResultsProvider.js"],"names":["SearchResultsProvider","store","updateStore","queryForState","children","reloading","refresh","query","getQueryForState","url","getURLForState","page","fetch","then","res","json","pageData","products","total","concat","fetchMore","clearFilters","submit","setFilters","toggleFilter","facet","code","filters","nextFilters","index","indexOf","push","splice","filtersChanged","JSON","stringify","map","v","toLowerCase","sort","Boolean","applyFilters","search","window","location","qs","parse","ignoreQueryPrefix","length","more","pathname","hash","addQueryPrefix","setSort","option","actions","propTypes","PropTypes","object","isRequired","func"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react'\nimport SearchResultsContext from './SearchResultsContext'\nimport PropTypes from 'prop-types'\nimport qs from 'qs'\nimport replaceState from '../router/replaceState'\nimport getAPIURL from '../api/getAPIURL'\n\n/**\n * Provides context to filter, sorting, and pagination components.\n *\n * ```js\n *  import useSearchResultsStore from 'react-storefront/plp/useSearchResultsStore'\n *  import SearchResultsProvider from 'react-storefront/plp/SearchResultsProvider'\n *  import FilterButton from 'react-storefront/plp/FilterButton'\n *\n *  function Subcategory(lazyProps) {\n *    const [store, updateStore] = useSearchResultsStore(lazyProps)\n *\n *    return (\n *      <SearchResultsProvider store={store}>\n *        <FilterButton/>\n *      </SearchResultsProvider>\n *    )\n *  }\n * ```\n */\nexport default function SearchResultsProvider({ store, updateStore, queryForState, children }) {\n  useEffect(() => {\n    if (store.reloading) {\n      async function refresh() {\n        const query = getQueryForState()\n        const url = getURLForState(query)\n\n        // Don't show page for user\n        delete query.page\n        replaceState(null, null, getURLForState(query))\n\n        const {\n          pageData: { products, total },\n        } = await fetch(getAPIURL(url)).then(res => res.json())\n\n        updateStore(store => ({\n          reloading: false,\n          pageData: {\n            ...store.pageData,\n            total,\n            products:\n              store.pageData.page === 0 ? products : store.pageData.products.concat(products),\n          },\n        }))\n      }\n      refresh()\n    }\n  }, [store])\n\n  /**\n   * Fetches the next page of results\n   */\n  const fetchMore = () => {\n    updateStore(store => ({\n      reloading: true,\n      pageData: {\n        ...store.pageData,\n        page: store.pageData.page + 1,\n      },\n    }))\n  }\n\n  /**\n   * Removes all filters\n   * @param {Boolean} submit If true, fetches new results from the server\n   */\n  const clearFilters = submit => {\n    setFilters([], submit)\n  }\n\n  /**\n   * Switches the state of a filter\n   * @param {Object} facet\n   * @param {Boolean} submit If true, fetches new results from the server\n   */\n  const toggleFilter = (facet, submit) => {\n    const { code } = facet\n    const { filters } = store.pageData\n    const nextFilters = [...filters]\n    const index = nextFilters.indexOf(code)\n\n    if (index === -1) {\n      nextFilters.push(code)\n    } else {\n      nextFilters.splice(index, 1)\n    }\n\n    setFilters(nextFilters, submit)\n  }\n\n  /**\n   * Updates the set of selected filters\n   * @param {Object[]} filters\n   * @param {Boolean} submit If true, fetches new results from the server\n   */\n  const setFilters = (filters, submit) => {\n    const filtersChanged =\n      JSON.stringify(filters.map(v => v.toLowerCase()).sort()) !==\n      JSON.stringify(store.pageData.filters.map(v => v.toLowerCase()).sort())\n\n    updateStore(store => ({\n      reloading: Boolean(submit),\n      pageData: {\n        ...store.pageData,\n        filters,\n        filtersChanged: submit ? false : filtersChanged,\n        page: submit ? 0 : store.pageData.page,\n      },\n    }))\n  }\n\n  /**\n   * Applies the selected filters, resets the page to 0 and fetches new results from the server.\n   */\n  const applyFilters = () => {\n    updateStore(store => ({\n      reloading: true,\n      pageData: {\n        ...store.pageData,\n        filtersChanged: false,\n        page: 0,\n      },\n    }))\n  }\n\n  /**\n   * Computes the query for the current state of the search controls\n   */\n  const getQueryForState = () => {\n    if (queryForState) return queryForState(store.pageData)\n\n    const { filters, page, sort } = store.pageData\n    const { search } = window.location\n    const query = qs.parse(search, { ignoreQueryPrefix: true })\n\n    if (filters.length) {\n      query.filters = JSON.stringify(filters)\n    } else {\n      delete query.filters\n    }\n\n    if (query.more) {\n      delete query.more\n    }\n\n    if (page > 0) {\n      query.page = page\n    } else {\n      delete query.page\n    }\n\n    if (sort) {\n      query.sort = sort\n    } else {\n      delete query.sort\n    }\n\n    return query\n  }\n\n  /**\n   * Computes the URL for the current query of the search controls\n   */\n  const getURLForState = query => {\n    const { pathname, hash } = window.location\n    return pathname + qs.stringify(query, { addQueryPrefix: true }) + hash\n  }\n\n  const setSort = option => {\n    updateStore(store => ({\n      reloading: true,\n      pageData: {\n        ...store.pageData,\n        sort: option.code,\n        page: 0,\n      },\n    }))\n  }\n\n  return (\n    <SearchResultsContext.Provider\n      value={{\n        ...store,\n        actions: {\n          fetchMore,\n          toggleFilter,\n          clearFilters,\n          applyFilters,\n          setSort,\n          setFilters,\n        },\n      }}\n    >\n      {children}\n    </SearchResultsContext.Provider>\n  )\n}\n\nSearchResultsProvider.propTypes = {\n  /**\n   * A store returned from [`useSearchResultsStore`](/apiReference/plp/useSearchResultsStore).\n   */\n  store: PropTypes.object.isRequired,\n\n  /**\n   * The update function returned from [`useSearchResultsStore`](/apiReference/plp/useSearchResultsStore).\n   */\n  updateStore: PropTypes.func.isRequired,\n\n  /**\n   * An optional function to customize the URL format for search pages when the user\n   * changes filters and sort.\n   */\n  queryForState: PropTypes.func,\n}\n"],"file":"SearchResultsProvider.js"}