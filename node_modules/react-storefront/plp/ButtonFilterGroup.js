"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = ButtonFilterGroup;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _SearchResultsContext = _interopRequireDefault(require("./SearchResultsContext"));

var _styles = require("@material-ui/core/styles");

var _SwatchProductOption = _interopRequireDefault(require("../option/SwatchProductOption"));

var _TextProductOption = _interopRequireDefault(require("../option/TextProductOption"));

var _Box = require("../Box");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var styles = function styles(theme) {
  return {
    /**
     * Styles applied to the root element.
     */
    root: {
      display: 'flex',
      flexWrap: 'wrap'
    },

    /**
     * Styles applied to the matching text.
     */
    matches: _objectSpread(_objectSpread({
      display: 'inline'
    }, theme.typography.caption), {}, {
      marginLeft: 2,
      color: theme.palette.grey[700]
    }),

    /**
     * Styles applied to each button element.
     */
    button: {
      fontWeight: 'normal',
      margin: theme.spacing(0, 0.5, 0.5, 0)
    }
  };
};

var useStyles = (0, _styles.makeStyles)(styles, {
  name: 'RSFButtonFilterGroup'
});
/**
 * A UI for grouping filters using buttons.
 */

function ButtonFilterGroup(props) {
  var group = props.group,
      submitOnChange = props.submitOnChange;

  var _useContext = (0, _react.useContext)(_SearchResultsContext["default"]),
      filters = _useContext.pageData.filters,
      toggleFilter = _useContext.actions.toggleFilter;

  var classes = useStyles(props.classes);
  return (0, _react.useMemo)(function () {
    return /*#__PURE__*/_react["default"].createElement("div", {
      className: classes.root
    }, group.options.map(function (facet, i) {
      var selected = filters.indexOf(facet.code) !== -1;
      var image = facet.image,
          matches = facet.matches,
          name = facet.name;

      var handleClick = function handleClick() {
        return toggleFilter(facet, submitOnChange);
      };

      var Variant = image ? _SwatchProductOption["default"] : _TextProductOption["default"];
      return /*#__PURE__*/_react["default"].createElement(Variant, (0, _extends2["default"])({
        key: i,
        classes: {
          root: classes.button
        },
        selected: selected,
        onClick: handleClick,
        label: /*#__PURE__*/_react["default"].createElement(_Box.Hbox, null, /*#__PURE__*/_react["default"].createElement("span", null, name), matches ? /*#__PURE__*/_react["default"].createElement("span", {
          className: classes.matches
        }, "(", matches, ")") : null)
      }, image ? {
        imageProps: facet.image
      } : undefined));
    }));
  }, [filters].concat((0, _toConsumableArray2["default"])(Object.values(props))));
}

ButtonFilterGroup.propTypes = {
  /**
   * Override or extend the styles applied to the component. See [CSS API](#css) below for more details.
   */
  classes: _propTypes["default"].object,

  /**
   * Contains data for the group to be rendered.
   */
  group: _propTypes["default"].shape({
    options: _propTypes["default"].arrayOf(_propTypes["default"].shape({
      code: _propTypes["default"].string,
      name: _propTypes["default"].string,
      matches: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number]),
      image: _propTypes["default"].object
    }))
  }),

  /**
   * Set to `true` if the filters will be submitted when changed. In this case, the footer will not be shown.
   */
  submitOnChange: _propTypes["default"].bool
};
//# sourceMappingURL=ButtonFilterGroup.js.map