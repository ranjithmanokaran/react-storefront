{"version":3,"sources":["../../src/plp/ButtonFilterGroup.js"],"names":["styles","theme","root","display","flexWrap","matches","typography","caption","marginLeft","color","palette","grey","button","fontWeight","margin","spacing","useStyles","name","ButtonFilterGroup","props","group","submitOnChange","SearchResultsContext","filters","pageData","toggleFilter","actions","classes","options","map","facet","i","selected","indexOf","code","image","handleClick","Variant","SwatchProductOption","TextProductOption","imageProps","undefined","Object","values","propTypes","PropTypes","object","shape","arrayOf","string","oneOfType","number","bool"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types'\nimport React, { useMemo, useContext } from 'react'\nimport SearchResultsContext from './SearchResultsContext'\nimport { makeStyles } from '@material-ui/core/styles'\nimport SwatchProductOption from '../option/SwatchProductOption'\nimport TextProductOption from '../option/TextProductOption'\nimport { Hbox } from '../Box'\n\nconst styles = theme => ({\n  /**\n   * Styles applied to the root element.\n   */\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  /**\n   * Styles applied to the matching text.\n   */\n  matches: {\n    display: 'inline',\n    ...theme.typography.caption,\n    marginLeft: 2,\n    color: theme.palette.grey[700],\n  },\n  /**\n   * Styles applied to each button element.\n   */\n  button: {\n    fontWeight: 'normal',\n    margin: theme.spacing(0, 0.5, 0.5, 0),\n  },\n})\n\nconst useStyles = makeStyles(styles, { name: 'RSFButtonFilterGroup' })\n\n/**\n * A UI for grouping filters using buttons.\n */\nexport default function ButtonFilterGroup(props) {\n  const { group, submitOnChange } = props\n  const {\n    pageData: { filters },\n    actions: { toggleFilter },\n  } = useContext(SearchResultsContext)\n\n  const classes = useStyles(props.classes)\n\n  return useMemo(\n    () => (\n      <div className={classes.root}>\n        {group.options.map((facet, i) => {\n          const selected = filters.indexOf(facet.code) !== -1\n          const { image, matches, name } = facet\n          const handleClick = () => toggleFilter(facet, submitOnChange)\n          const Variant = image ? SwatchProductOption : TextProductOption\n\n          return (\n            <Variant\n              key={i}\n              classes={{ root: classes.button }}\n              selected={selected}\n              onClick={handleClick}\n              label={\n                <Hbox>\n                  <span>{name}</span>\n                  {matches ? <span className={classes.matches}>({matches})</span> : null}\n                </Hbox>\n              }\n              {...(image ? { imageProps: facet.image } : undefined)}\n            />\n          )\n        })}\n      </div>\n    ),\n    [filters, ...Object.values(props)],\n  )\n}\n\nButtonFilterGroup.propTypes = {\n  /**\n   * Override or extend the styles applied to the component. See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n  /**\n   * Contains data for the group to be rendered.\n   */\n  group: PropTypes.shape({\n    options: PropTypes.arrayOf(\n      PropTypes.shape({\n        code: PropTypes.string,\n        name: PropTypes.string,\n        matches: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n        image: PropTypes.object,\n      }),\n    ),\n  }),\n  /**\n   * Set to `true` if the filters will be submitted when changed. In this case, the footer will not be shown.\n   */\n  submitOnChange: PropTypes.bool,\n}\n"],"file":"ButtonFilterGroup.js"}