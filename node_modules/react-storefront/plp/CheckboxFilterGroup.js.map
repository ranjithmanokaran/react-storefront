{"version":3,"sources":["../../src/plp/CheckboxFilterGroup.js"],"names":["styles","theme","matches","marginLeft","display","groupLabel","alignItems","useStyles","name","CheckboxFilterGroup","props","group","submitOnChange","SearchResultsContext","filters","pageData","toggleFilter","actions","classes","options","map","facet","i","indexOf","code","Object","values","propTypes","PropTypes","object","shape","arrayOf","string","oneOfType","number","image","bool"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;;;;;;;;;AAEA;;AACA;;AAEA,IAAMA,MAAM,GAAG,SAATA,MAAS,CAAAC,KAAK;AAAA,SAAK;AACvB;;;AAGAC,IAAAA,OAAO,EAAE;AACPC,MAAAA,UAAU,EAAE,KADL;AAEPC,MAAAA,OAAO,EAAE;AAFF,KAJc;;AAQvB;;;AAGAC,IAAAA,UAAU,EAAE;AACVD,MAAAA,OAAO,EAAE,MADC;AAEVE,MAAAA,UAAU,EAAE;AAFF;AAXW,GAAL;AAAA,CAApB;;AAiBA,IAAMC,SAAS,GAAG,wBAAWP,MAAX,EAAmB;AAAEQ,EAAAA,IAAI,EAAE;AAAR,CAAnB,CAAlB;AAEA;;;;AAGe,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AAAA,MACzCC,KADyC,GACfD,KADe,CACzCC,KADyC;AAAA,MAClCC,cADkC,GACfF,KADe,CAClCE,cADkC;;AAAA,oBAK7C,uBAAWC,gCAAX,CAL6C;AAAA,MAGnCC,OAHmC,eAG/CC,QAH+C,CAGnCD,OAHmC;AAAA,MAIpCE,YAJoC,eAI/CC,OAJ+C,CAIpCD,YAJoC;;AAOjD,MAAME,OAAO,GAAGX,SAAS,CAACG,KAAK,CAACQ,OAAP,CAAzB;AAEA,SAAO,oBACL;AAAA,wBACE,gCAAC,qBAAD,QACGP,KAAK,CAACQ,OAAN,CAAcC,GAAd,CAAkB,UAACC,KAAD,EAAQC,CAAR;AAAA,0BACjB,gCAAC,4BAAD;AACE,QAAA,GAAG,EAAEA,CADP;AAEE,QAAA,KAAK,eACH;AAAK,UAAA,SAAS,EAAEJ,OAAO,CAACb;AAAxB,wBACE,8CAAOgB,KAAK,CAACb,IAAb,CADF,eAEE,gCAAC,sBAAD;AAAY,UAAA,OAAO,EAAC,SAApB;AAA8B,UAAA,SAAS,EAAEU,OAAO,CAAChB,OAAjD;AAA0D,UAAA,SAAS,EAAC;AAApE,gBACImB,KAAK,CAACnB,OADV,MAFF,CAHJ;AAUE,QAAA,OAAO,eACL,gCAAC,oBAAD;AACE,UAAA,OAAO,EAAEY,OAAO,CAACS,OAAR,CAAgBF,KAAK,CAACG,IAAtB,MAAgC,CAAC,CAD5C;AAEE,UAAA,KAAK,EAAC,SAFR;AAGE,UAAA,QAAQ,EAAE;AAAA,mBAAMR,YAAY,CAACK,KAAD,EAAQT,cAAR,CAAlB;AAAA;AAHZ;AAXJ,QADiB;AAAA,KAAlB,CADH,CADF;AAAA,GADK,gDAyBDa,MAAM,CAACC,MAAP,CAAchB,KAAd,CAzBC,IAyBqBI,OAzBrB,GAAP;AA2BD;;AAEDL,mBAAmB,CAACkB,SAApB,GAAgC;AAC9B;;;AAGAT,EAAAA,OAAO,EAAEU,sBAAUC,MAJW;;AAK9B;;;AAGAlB,EAAAA,KAAK,EAAEiB,sBAAUE,KAAV,CAAgB;AACrBX,IAAAA,OAAO,EAAES,sBAAUG,OAAV,CACPH,sBAAUE,KAAV,CAAgB;AACdN,MAAAA,IAAI,EAAEI,sBAAUI,MADF;AAEdxB,MAAAA,IAAI,EAAEoB,sBAAUI,MAFF;AAGd9B,MAAAA,OAAO,EAAE0B,sBAAUK,SAAV,CAAoB,CAACL,sBAAUI,MAAX,EAAmBJ,sBAAUM,MAA7B,CAApB,CAHK;AAIdC,MAAAA,KAAK,EAAEP,sBAAUC;AAJH,KAAhB,CADO;AADY,GAAhB,CARuB;;AAkB9B;;;AAGAjB,EAAAA,cAAc,EAAEgB,sBAAUQ;AArBI,CAAhC","sourcesContent":["import PropTypes from 'prop-types'\nimport React, { useMemo, useContext } from 'react'\nimport { Checkbox, FormGroup, Typography, FormControlLabel } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport SearchResultsContext from './SearchResultsContext'\n\nconst styles = theme => ({\n  /**\n   * Styles applied to the matching text.\n   */\n  matches: {\n    marginLeft: '5px',\n    display: 'inline',\n  },\n  /**\n   * Styles applied to the group label element.\n   */\n  groupLabel: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n})\n\nconst useStyles = makeStyles(styles, { name: 'RSFCheckboxFilterGroup' })\n\n/**\n * A UI for grouping filters using checkboxes.\n */\nexport default function CheckboxFilterGroup(props) {\n  const { group, submitOnChange } = props\n  const {\n    pageData: { filters },\n    actions: { toggleFilter },\n  } = useContext(SearchResultsContext)\n\n  const classes = useStyles(props.classes)\n\n  return useMemo(\n    () => (\n      <FormGroup>\n        {group.options.map((facet, i) => (\n          <FormControlLabel\n            key={i}\n            label={\n              <div className={classes.groupLabel}>\n                <span>{facet.name}</span>\n                <Typography variant=\"caption\" className={classes.matches} component=\"span\">\n                  ({facet.matches})\n                </Typography>\n              </div>\n            }\n            control={\n              <Checkbox\n                checked={filters.indexOf(facet.code) !== -1}\n                color=\"primary\"\n                onChange={() => toggleFilter(facet, submitOnChange)}\n              />\n            }\n          />\n        ))}\n      </FormGroup>\n    ),\n    [...Object.values(props), filters],\n  )\n}\n\nCheckboxFilterGroup.propTypes = {\n  /**\n   * Override or extend the styles applied to the component. See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n  /**\n   * Contains data for the group to be rendered.\n   */\n  group: PropTypes.shape({\n    options: PropTypes.arrayOf(\n      PropTypes.shape({\n        code: PropTypes.string,\n        name: PropTypes.string,\n        matches: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n        image: PropTypes.object,\n      }),\n    ),\n  }),\n  /**\n   * Set to `true` to refresh the results when the user toggles a filter.\n   */\n  submitOnChange: PropTypes.bool,\n}\n"],"file":"CheckboxFilterGroup.js"}