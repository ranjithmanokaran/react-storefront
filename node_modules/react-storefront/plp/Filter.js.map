{"version":3,"sources":["../../src/plp/Filter.js"],"names":["styles","theme","root","height","display","flexDirection","alignItems","facetGroups","overflow","overflowX","flex","position","useStyles","name","Filter","expandAll","hideClearLink","clearLinkText","submitOnChange","style","classes","title","onViewResultsClick","SearchResultsContext","facets","pageData","map","group","i","propTypes","PropTypes","object","func","queryParam","string","bool","defaultProps","Function","prototype"],"mappings":"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","sourcesContent":["import React, { useContext, memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { makeStyles } from '@material-ui/core/styles'\nimport FacetGroup from './FacetGroup'\nimport FilterHeader from './FilterHeader'\nimport FilterFooter from './FilterFooter'\nimport SearchResultsContext from './SearchResultsContext'\n\nexport const styles = theme => ({\n  /**\n   * Styles applied to the root element.\n   */\n  root: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'stretch',\n  },\n  /**\n   * Styles applied to the wrapper element around the facet groups.\n   */\n  facetGroups: {\n    overflow: 'auto',\n    overflowX: 'hidden',\n    flex: '1',\n    position: 'relative',\n  },\n})\n\nconst useStyles = makeStyles(styles, { name: 'RSFFilter' })\n\n/**\n * UI for filtering a list of products.  This component can be used on its own, or you can use\n * [`FilterButton`](/apiReference/plp/FilterButton) to automatically display this component in a\n * drawer that slides up from the bottom of the viewport.\n */\nfunction Filter({\n  expandAll,\n  hideClearLink,\n  clearLinkText,\n  submitOnChange,\n  style,\n  classes,\n  title,\n  onViewResultsClick,\n}) {\n  classes = useStyles({ classes })\n\n  const {\n    pageData: { facets },\n  } = useContext(SearchResultsContext)\n\n  return (\n    <div style={style} className={classes.root}>\n      <FilterHeader\n        hideClearLink={hideClearLink}\n        clearLinkText={clearLinkText}\n        title={title}\n        submitOnChange={submitOnChange}\n      />\n      <div className={classes.facetGroups}>\n        {facets &&\n          facets.map((group, i) => (\n            <FacetGroup\n              group={group}\n              key={i}\n              defaultExpanded={expandAll}\n              submitOnChange={submitOnChange}\n            />\n          ))}\n      </div>\n      <FilterFooter onViewResultsClick={onViewResultsClick} submitOnChange={submitOnChange} />\n    </div>\n  )\n}\n\nFilter.propTypes = {\n  /**\n   * Override or extend the styles applied to the component. See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * A function to call when the user clicks the button to view updated results.  The default behavior can be\n   * canceled by calling `preventDefault` on the passed in event.  The event is passed as the only argument.\n   */\n  onViewResultsClick: PropTypes.func,\n\n  /**\n   * The query string parameter that should be updated when filters are changed.  The value will be an array\n   * of codes for each selected facet.\n   */\n  queryParam: PropTypes.string,\n\n  /**\n   * An optional title to display at the top of the component.\n   */\n  title: PropTypes.string,\n\n  /**\n   * Set to `true` to expand all groups on initial render.\n   */\n  expandAll: PropTypes.bool,\n\n  /**\n   * Set to `true` to refresh the results when the user toggles a filter.\n   */\n  submitOnChange: PropTypes.bool,\n\n  /**\n   * If `true`, the clear link is hidden.\n   */\n  hideClearLink: PropTypes.bool,\n\n  /**\n   * Text to use for the clear link.\n   */\n  clearLinkText: PropTypes.string,\n\n  /**\n   * CSS styles to add to the root component.\n   */\n  style: PropTypes.object,\n}\n\nFilter.defaultProps = {\n  onViewResultsClick: Function.prototype,\n  submitOnChange: false,\n}\n\nexport default memo(Filter)\n"],"file":"Filter.js"}