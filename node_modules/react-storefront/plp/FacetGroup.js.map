{"version":3,"sources":["../../src/plp/FacetGroup.js"],"names":["styles","theme","groupTitle","breakpoints","up","fontWeight","useStyles","name","FacetGroup","props","group","submitOnChange","defaultExpanded","ControlsComponent","controlsProps","listItemProps","onClose","isSimpleList","classes","SearchResultsContext","filters","pageData","selection","options","option","indexOf","code","push","Controls","ui","ButtonFilterGroup","CheckboxFilterGroup","caption","length","title","Object","values","propTypes","PropTypes","object","bool","func"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types'\nimport React, { useMemo, useContext } from 'react'\nimport SearchResultsContext from './SearchResultsContext'\nimport { makeStyles } from '@material-ui/core/styles'\nimport ExpandableSection from '../ExpandableSection'\nimport CheckboxFilterGroup from './CheckboxFilterGroup'\nimport ButtonFilterGroup from './ButtonFilterGroup'\nimport ListItem from '@material-ui/core/ListItem'\n\nconst styles = theme => ({\n  /**\n   * Styles applied to the group's title element.\n   */\n  groupTitle: {\n    [theme.breakpoints.up('sm')]: {\n      fontWeight: 'bold',\n    },\n  },\n})\n\nconst useStyles = makeStyles(styles, { name: 'RSFFacetGroup' })\n\n/**\n * A grouping of facets used for filtering products.\n */\nexport default function FacetGroup(props) {\n  const {\n    group,\n    submitOnChange,\n    defaultExpanded,\n    ControlsComponent,\n    controlsProps,\n    listItemProps,\n    onClose,\n    isSimpleList\n  } = props\n  const classes = useStyles(props.classes)\n  const {\n    pageData: { filters },\n  } = useContext(SearchResultsContext)\n\n  return useMemo(() => {\n    if (!filters) return null\n\n    const selection = []\n\n    for (let option of group.options) {\n      if (filters.indexOf(option.code) !== -1) {\n        selection.push(option)\n      }\n    }\n\n    let Controls = ControlsComponent\n\n    if (!Controls && group.ui === 'buttons') {\n      Controls = ButtonFilterGroup\n    } else if (!Controls) {\n      Controls = CheckboxFilterGroup\n    }\n\n    let caption = null\n\n    if (selection.length === 1) {\n      caption = selection[0].name\n    } else if (selection.length > 0) {\n      caption = `${selection.length} selected`\n    }\n\n    if (isSimpleList) {\n      return (\n        <ListItem {...listItemProps}>\n          <span className={classes.groupTitle}>{group.name}</span>\n          <Controls\n            onClose={onClose}\n            group={group}\n            submitOnChange={submitOnChange}\n            {...controlsProps}\n          />\n        </ListItem>\n      )\n    }\n\n    return (\n      <ExpandableSection\n        title={group.name}\n        caption={caption}\n        defaultExpanded={defaultExpanded}\n        classes={{ title: classes.groupTitle }}\n      >\n        <Controls\n          group={group}\n          submitOnChange={submitOnChange}\n          {...controlsProps}\n        />\n      </ExpandableSection>\n    )\n  }, [...Object.values(props), filters])\n}\n\nFacetGroup.propTypes = {\n  /**\n   * Override or extend the styles applied to the component. See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n  // TODO - make this a shape\n  /**\n   * Contains data for the facet group to be rendered.\n   */\n  group: PropTypes.object,\n  /**\n   * Set to `true` to refresh the results when the user toggles a filter.\n   */\n  submitOnChange: PropTypes.bool,\n  /**\n   * If `true`, the group is expanded by default.\n   */\n  defaultExpanded: PropTypes.bool,\n  /**\n   * Custom component to use own component.\n   */\n  ControlsComponent: PropTypes.func,\n  controlsProps: PropTypes.object,\n  onClose: PropTypes.func,\n  listItemProps: PropTypes.object,\n  /**\n   * If `true` list will be displayed instead of expandable items.\n   */\n  isSimpleList: PropTypes.bool,\n}\n"],"file":"FacetGroup.js"}