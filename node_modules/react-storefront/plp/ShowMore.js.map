{"version":3,"sources":["../../src/plp/ShowMore.js"],"names":["styles","theme","root","margin","width","display","justifyContent","button","breakpoints","down","flex","loading","height","VARIANTS","BUTTON","INFINITE","useStyles","name","ShowMore","className","style","children","variant","href","infiniteLoadOffset","renderLoadingIcon","others","classes","setLoading","SearchResultsContext","actions","pageData","page","totalPages","fetchMore","handleVisible","isVisible","bottom","propTypes","PropTypes","func","oneOf","number","string","object","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react'\nimport PropTypes from 'prop-types'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { CircularProgress, Button } from '@material-ui/core'\nimport clsx from 'clsx'\nimport SearchResultsContext from './SearchResultsContext'\nimport VisibilitySensor from 'react-visibility-sensor'\n\nexport const styles = theme => ({\n  /**\n   * Styles applied to the root element.\n   */\n  root: {\n    margin: '15px 0',\n    width: '100%',\n    display: 'flex',\n    justifyContent: 'center',\n  },\n  /**\n   * Styles applied to the button element.\n   */\n  button: {\n    [theme.breakpoints.down('xs')]: {\n      flex: 1,\n    },\n  },\n  /**\n   * Styles applied to the loading icon.\n   */\n  loading: {\n    display: 'flex',\n    height: 45,\n    justifyContent: 'center',\n  },\n})\n\nconst VARIANTS = {\n  BUTTON: 'button',\n  INFINITE: 'infinite',\n}\n\nconst useStyles = makeStyles(styles, { name: 'RSFShowMore' })\n\n/**\n * A control that handles loading the next page of results in a search results\n * page or PLP.  This component can either display a \"Show More\" button:\n *\n * ```js\n * <ShowMore variant=\"button\"/>\n * ```\n * ... or can produce an \"infinite scroll\" effect that loads more records when the user\n * scrolls within a configured offset from the bottom of the page:\n *\n * ```js\n * <ShowMore variant=\"infinite\" infiniteLoadOffset={200}/>\n * ```\n *\n * This component should always be used inside a `<SearchResultsProvider/>`.\n *\n * This component relies on the following properties being defined in `pageData` in the page store:\n *\n * * `page` - The current page number\n * * `totalPages` - The total number of pages\n */\nexport default function ShowMore({\n  className,\n  style,\n  children,\n  variant,\n  href,\n  infiniteLoadOffset,\n  renderLoadingIcon,\n  ...others\n}) {\n  const classes = useStyles(others)\n  const [loading, setLoading] = useState(false)\n  const { actions, pageData } = useContext(SearchResultsContext)\n\n  if (pageData && pageData.page >= pageData.totalPages - 1) return null\n\n  async function fetchMore() {\n    if (!loading) {\n      setLoading(true)\n\n      try {\n        await actions.fetchMore()\n      } finally {\n        setLoading(false)\n      }\n    }\n  }\n\n  function handleVisible(isVisible) {\n    if (isVisible) {\n      fetchMore()\n    }\n  }\n\n  if (variant === VARIANTS.INFINITE) {\n    return (\n      <VisibilitySensor\n        onChange={handleVisible}\n        partialVisibility\n        offset={{ bottom: -infiniteLoadOffset }}\n      >\n        <div className={clsx(classes.loading, className)} style={style}>\n          {renderLoadingIcon()}\n        </div>\n      </VisibilitySensor>\n    )\n  } else {\n    return (\n      <div className={clsx(classes.root, className)} style={style}>\n        {loading ? (\n          <div className={classes.loading}>{renderLoadingIcon()}</div>\n        ) : (\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            href={href}\n            className={classes.button}\n            onClick={fetchMore}\n            {...others}\n          >\n            {children || 'Show More'}\n          </Button>\n        )}\n      </div>\n    )\n  }\n}\n\nShowMore.propTypes = {\n  /**\n   * A renderer for the loading icon.  Uses `<CircularProgress />` by default.\n   */\n  renderLoadingIcon: PropTypes.func,\n  /**\n   * Which variant to use. One of `'button'` or `'infinite'`.\n   *\n   * When variant is set to `'button'`:\n   *   A button is rendered with contents of `{props.children}` or `'Show More'`.\n   *\n   * When variant is set to `'infinite'`:\n   *   The loading icon is rendered and contents of next page loaded when user\n   *   scrolls to the end of the page.\n   *\n   * In AMP the `'button'` variant is always used.\n   */\n  variant: PropTypes.oneOf([VARIANTS.BUTTON, VARIANTS.INFINITE]),\n  /**\n   * Minimum amount of pixels from the bottom of the page to where the user has\n   * scrolled before the new page is loaded. Used in conjunction with `'infinite'`\n   * variant. Defaults to 200.\n   */\n  infiniteLoadOffset: PropTypes.number,\n  /**\n   * When specified, clicking the button will navigate to the specified URL with a full page reload.\n   */\n  href: PropTypes.string,\n  /**\n   * A CSS class to apply to the root element.\n   */\n  className: PropTypes.string,\n  /**\n   * CSS styles to be added to the root element.\n   */\n  style: PropTypes.object,\n}\n\nShowMore.defaultProps = {\n  renderLoadingIcon: () => <CircularProgress />,\n  variant: VARIANTS.BUTTON,\n  infiniteLoadOffset: 200,\n}\n"],"file":"ShowMore.js"}