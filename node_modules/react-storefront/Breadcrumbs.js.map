{"version":3,"sources":["../src/Breadcrumbs.js"],"names":["styles","theme","breadcrumbs","backgroundColor","padding","color","palette","text","primary","textDecoration","separator","height","position","top","width","current","fontWeight","useStyles","Breadcrumbs","items","classes","map","item","i","arrow","isLastItem","length","href","as","propTypes","PropTypes","object","oneOfType","arrayOf","shape","string","bool"],"mappings":";;;;;;;;;;AAAA;;;;AAEA;;AACA;;;;;;AAEA;;AACA;;AAEO,IAAMA,MAAM,GAAG,SAATA,MAAS,CAAAC,KAAK;AAAA,SAAK;AAC9B;;;AAGAC,IAAAA,WAAW,EAAE;AACXC,MAAAA,eAAe,EAAE,SADN;AAEXC,MAAAA,OAAO,EAAE,QAFE;AAIX,aAAO;AACLC,QAAAA,KAAK,EAAEJ,KAAK,CAACK,OAAN,CAAcC,IAAd,CAAmBC,OADrB;AAELC,QAAAA,cAAc,EAAE;AAFX;AAJI,KAJiB;;AAc9B;;;AAGAC,IAAAA,SAAS,EAAE;AACTC,MAAAA,MAAM,EAAE,MADC;AAETC,MAAAA,QAAQ,EAAE,UAFD;AAGTC,MAAAA,GAAG,EAAE,KAHI;AAITC,MAAAA,KAAK,EAAE;AAJE,KAjBmB;;AAwB9B;;;AAGAC,IAAAA,OAAO,EAAE;AACPC,MAAAA,UAAU,EAAE,MADL;AAEPX,MAAAA,KAAK,EAAEJ,KAAK,CAACK,OAAN,CAAcC,IAAd,CAAmBC;AAFnB;AA3BqB,GAAL;AAAA,CAApB;;;AAiCP,IAAMS,SAAS,GAAG,wBAAWjB,MAAX,EAAmB,gBAAnB,CAAlB;;AAEe,SAASkB,WAAT,OAAyC;AAAA,MAAlBC,KAAkB,QAAlBA,KAAkB;AAAA,MAAXC,OAAW,QAAXA,OAAW;AACtDA,EAAAA,OAAO,GAAGH,SAAS,CAAC;AAAEG,IAAAA,OAAO,EAAPA;AAAF,GAAD,CAAnB;AAEA,sBACE,gCAAC,sBAAD;AAAY,IAAA,OAAO,EAAC,OAApB;AAA4B,IAAA,SAAS,EAAEA,OAAO,CAAClB,WAA/C;AAA4D,IAAA,OAAO,EAAC;AAApE,kBACE,gCAAC,qBAAD,QACGiB,KAAK,IACJA,KAAK,CAACE,GAAN,CAAU,UAACC,IAAD,EAAOC,CAAP,EAAa;AACrB,QAAMC,KAAK,GAAGD,CAAC,GAAG,CAAJ,gBAAQ,gCAAC,8BAAD;AAAY,MAAA,SAAS,EAAEH,OAAO,CAACV;AAA/B,MAAR,GAAuD,IAArE;AACA,QAAMe,UAAU,GAAGN,KAAK,CAACO,MAAN,GAAe,CAAf,KAAqBH,CAAxC;;AAEA,QAAID,IAAI,CAACK,IAAT,EAAe;AACb,0BACE;AAAM,QAAA,GAAG,EAAEJ,CAAX;AAAc,QAAA,SAAS,EAAE,sBAAKE,UAAU,IAAIL,OAAO,CAACL,OAA3B;AAAzB,SACGS,KADH,eAEE,gCAAC,gBAAD;AAAM,QAAA,IAAI,EAAEF,IAAI,CAACK,IAAjB;AAAuB,QAAA,EAAE,EAAEL,IAAI,CAACM;AAAhC,SACGN,IAAI,CAACf,IADR,CAFF,CADF;AAQD,KATD,MASO;AACL,0BACE;AAAM,QAAA,GAAG,EAAEgB,CAAX;AAAc,QAAA,SAAS,EAAE,sBAAKE,UAAU,IAAIL,OAAO,CAACL,OAA3B;AAAzB,SACGS,KADH,EAEGF,IAAI,CAACf,IAFR,CADF;AAMD;AACF,GArBD,CAFJ,eAwBE,qDAxBF,CADF,CADF;AA8BD;;AAEDW,WAAW,CAACW,SAAZ,GAAwB;AACtB;;;AAGAT,EAAAA,OAAO,EAAEU,sBAAUC,MAJG;;AAMtB;;;;AAIAZ,EAAAA,KAAK,EAAEW,sBAAUE,SAAV,CAAoB,CACzBF,sBAAUG,OAAV,CACEH,sBAAUI,KAAV,CAAgB;AACd3B,IAAAA,IAAI,EAAEuB,sBAAUK,MADF;AAEdP,IAAAA,EAAE,EAAEE,sBAAUK,MAFA;AAGdR,IAAAA,IAAI,EAAEG,sBAAUK;AAHF,GAAhB,CADF,CADyB,EAQzBL,sBAAUM,IARe,CAApB;AAVe,CAAxB","sourcesContent":["import React from 'react'\nimport { KeyboardArrowRight as ArrowRight } from '@material-ui/icons'\nimport Link from './link/Link'\nimport clsx from 'clsx'\nimport { Typography, Container } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport PropTypes from 'prop-types'\n\nexport const styles = theme => ({\n  /**\n   * Styles applied to the root element.\n   */\n  breadcrumbs: {\n    backgroundColor: '#F4F2F1',\n    padding: '12px 0',\n\n    '& a': {\n      color: theme.palette.text.primary,\n      textDecoration: 'none',\n    },\n  },\n\n  /**\n   * Styles applied to the separators.\n   */\n  separator: {\n    height: '12px',\n    position: 'relative',\n    top: '2px',\n    width: '16px',\n  },\n\n  /**\n   * Styles applied to the currently active breadcrumb's element.\n   */\n  current: {\n    fontWeight: 'bold',\n    color: theme.palette.text.primary,\n  },\n})\n\nconst useStyles = makeStyles(styles, 'RSFBreadcrumbs')\n\nexport default function Breadcrumbs({ items, classes }) {\n  classes = useStyles({ classes })\n\n  return (\n    <Typography display=\"block\" className={classes.breadcrumbs} variant=\"caption\">\n      <Container>\n        {items &&\n          items.map((item, i) => {\n            const arrow = i > 0 ? <ArrowRight className={classes.separator} /> : null\n            const isLastItem = items.length - 1 === i\n\n            if (item.href) {\n              return (\n                <span key={i} className={clsx(isLastItem && classes.current)}>\n                  {arrow}\n                  <Link href={item.href} as={item.as}>\n                    {item.text}\n                  </Link>\n                </span>\n              )\n            } else {\n              return (\n                <span key={i} className={clsx(isLastItem && classes.current)}>\n                  {arrow}\n                  {item.text}\n                </span>\n              )\n            }\n          })}\n        <span>&nbsp;</span>\n      </Container>\n    </Typography>\n  )\n}\n\nBreadcrumbs.propTypes = {\n  /**\n   * Override or extend the styles applied to the component. See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * The items to display, each with text, [`href`](/apiReference/link/Link#prop-href), and\n   * [`as`](/apiReference/link/Link#props-as) values. If `false`, no breadcrumbs will be displayed.\n   */\n  items: PropTypes.oneOfType([\n    PropTypes.arrayOf(\n      PropTypes.shape({\n        text: PropTypes.string,\n        as: PropTypes.string,\n        href: PropTypes.string,\n      }),\n    ),\n    PropTypes.bool,\n  ]),\n}\n"],"file":"Breadcrumbs.js"}