"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = TabPanel;
exports.useStyles = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _Tabs = _interopRequireDefault(require("@material-ui/core/Tabs"));

var _Tab = _interopRequireDefault(require("@material-ui/core/Tab"));

var _styles = require("@material-ui/core/styles");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _clsx2 = _interopRequireDefault(require("clsx"));

var styles = function styles(theme) {
  return {
    /**
     * Styles applied to the root element.
     */
    root: {},

    /**
     * Styles applied to the wrapper around each panel element.
     */
    panel: {
      margin: "".concat(theme.spacing(2), "px 0")
    },

    /**
     * Styles applied to the wrapper around each panel element when that panel is hidden.
     */
    hidden: {
      display: 'none'
    }
  };
};

var useStyles = (0, _styles.makeStyles)(styles, {
  name: 'RSFTabPanel'
});
/**
 * A simple tab panel that is AMP-compatible.  Tab names are pulled from the label prop of the child elements.
 * Any type of element can be a child.
 *
 * Example:
 *
 * ```js
 *  <TabPanel>
 *    <div label="Description">
 *      Description here
 *    </div>
 *    <CmsSlot label="Instructions">
 *      { instructionsFromCms }
 *    </CmsSlot>
 *  </TabPanel>
 * ```
 */

exports.useStyles = useStyles;

function TabPanel(_ref) {
  var children = _ref.children,
      classes = _ref.classes,
      scrollable = _ref.scrollable,
      selectedProp = _ref.selected,
      onChange = _ref.onChange,
      tabsProps = _ref.tabsProps,
      tabProps = _ref.tabProps,
      panelProps = _ref.panelProps,
      renderPanels = _ref.renderPanels;
  classes = useStyles({
    classes: classes
  });

  var _useState = (0, _react.useState)(selectedProp),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      selected = _useState2[0],
      setSelected = _useState2[1];

  var tabs = [];
  var panels = [];

  var onChangeHandler = function onChangeHandler(event, selected) {
    setSelected(selected);

    if (onChange) {
      onChange(selected);
    }
  };

  _react["default"].Children.forEach(children, function (child, index) {
    var _clsx;

    tabs.push( /*#__PURE__*/_react["default"].createElement(_Tab["default"], (0, _extends2["default"])({
      key: index,
      label: child.props.label
    }, tabProps({
      child: child,
      index: index,
      selected: selected
    }))));

    var _ref2 = panelProps({
      child: child,
      index: index,
      selected: selected
    }) || {},
        className = _ref2.className,
        others = (0, _objectWithoutProperties2["default"])(_ref2, ["className"]);

    panels.push( /*#__PURE__*/_react["default"].createElement("div", (0, _extends2["default"])({
      key: index,
      role: "tabpanel",
      className: (0, _clsx2["default"])(classes.panel, (_clsx = {}, (0, _defineProperty2["default"])(_clsx, classes.hidden, index !== selected), (0, _defineProperty2["default"])(_clsx, className, true), _clsx))
    }, others), /*#__PURE__*/_react["default"].cloneElement(child, {
      label: null
    })));
  });

  return /*#__PURE__*/_react["default"].createElement("div", {
    className: classes.root
  }, /*#__PURE__*/_react["default"].createElement(_Tabs["default"], (0, _extends2["default"])({
    variant: scrollable ? 'scrollable' : null,
    value: selected,
    onChange: onChangeHandler
  }, tabsProps), tabs), renderPanels(panels));
}

TabPanel.propTypes = {
  /**
   * Override or extend the styles applied to the component. See [CSS API](#css) below for more details.
   */
  classes: _propTypes["default"].object,

  /**
   * Set to false to prevent the tabs from scrolling.
   */
  scrollable: _propTypes["default"].bool,

  /**
   * Selected tab index.
   */
  selected: _propTypes["default"].number,

  /**
   * Called when the selected tab is changed.
   */
  onChange: _propTypes["default"].func,

  /**
   * A function that takes an object containing:
   *
   * - child: The child element
   * - index: The index of the child
   * - selected: The index of the currently selected element
   *
   * ... and returns props for the corresponding Material UI `Tab` element.
   */
  tabProps: _propTypes["default"].func,

  /**
   * A function that takes an object containing:
   *
   * - child: The child element
   * - index: The index of the child
   * - selected: The index of the currently selected element
   *
   * ... and returns props for the corresponding panel `div` element.
   */
  panelProps: _propTypes["default"].func,

  /**
   * Props for the Material UI `Tabs` element.
   */
  tabsProps: _propTypes["default"].object,

  /**
   * A function that takes the panels as an argument and returns a react element to render.
   */
  renderPanels: _propTypes["default"].func
};
TabPanel.defaultProps = {
  scrollable: true,
  selected: 0,
  tabProps: Function.prototype,
  panelProps: Function.prototype,
  renderPanels: function renderPanels(panels) {
    return panels;
  }
};
//# sourceMappingURL=TabPanel.js.map