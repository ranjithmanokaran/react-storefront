{"version":3,"sources":["../../src/plugins/withReactStorefront.js"],"names":["webpack","require","BundleAnalyzerPlugin","ClearRequireCachePlugin","withServiceWorker","module","exports","prefetchQueryParam","connector","nextConfig","usePreact","process","env","preact","serverRuntimeConfig","reactStorefront","target","config","options","resolve","symlinks","alias","react","react$","isServer","console","log","plugins","push","DefinePlugin","JSON","stringify","SERVICE_WORKER","FIREBASE_CONFIG","externals","filter","name","NODE_ENV","rules","test","use","analyze","webpackDevMiddleware","watchOptions","ignored"],"mappings":"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","sourcesContent":["const webpack = require('webpack')\nconst BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin\nconst ClearRequireCachePlugin = require('webpack-clear-require-cache-plugin')\nconst withServiceWorker = require('./withServiceWorker')\n\n/**\n * @param options\n * @param options.prefetchQueryParam If specified, this parameter will be added to the query string of all prefetch requests.\n * @param options.connector The connector package to use.  By default React Storefront's mock connector will be used.\n */\nmodule.exports = ({\n  prefetchQueryParam,\n  connector = 'react-storefront/mock-connector',\n  ...nextConfig\n} = {}) => {\n  const usePreact = process.env.preact === 'true'\n\n  nextConfig.serverRuntimeConfig = {\n    ...nextConfig.serverRuntimeConfig,\n    reactStorefront: { connector },\n  }\n\n  return withServiceWorker({\n    ...nextConfig,\n    target: 'serverless',\n    webpack(config, options) {\n      config.resolve.symlinks = false\n\n      if (usePreact) {\n        config.resolve.alias = {\n          ...config.resolve.alias,\n          react: 'preact/compat',\n          react$: 'preact/compat',\n          'react-dom/test-utils': 'preact/test-utils',\n          'react-dom': 'preact/compat',\n          'react-dom$': 'preact/compat',\n        }\n      }\n\n      if (options.isServer) {\n        console.log(`> Using connector ${connector}`)\n\n        config.resolve.alias = {\n          ...config.resolve.alias,\n          'react-storefront-connector': connector,\n        }\n      }\n\n      config.plugins.push(\n        new webpack.DefinePlugin({\n          'process.env.RSF_PREFETCH_QUERY_PARAM': JSON.stringify(prefetchQueryParam),\n          'process.env.SERVICE_WORKER': JSON.stringify(process.env.SERVICE_WORKER),\n          'process.env.FIREBASE_CONFIG': JSON.stringify(process.env.FIREBASE_CONFIG),\n        }),\n      )\n\n      if (config.externals) {\n        // Making sure the AMP optimizer is bundled\n        config.externals = config.externals.filter(name => name !== '@ampproject/toolbox-optimizer')\n        // These are optional dependencies for the optimizer\n        // which are not used by default\n        config.externals.push('jimp')\n        config.externals.push('probe-image-size')\n      }\n\n      if (process.env.NODE_ENV === 'development') {\n        // This makes it easier to develop apps against a local clone of react-storefront linked with yalc. Here\n        // we ensure that the server build recompiles when any linked dependency changes.\n        config.plugins.push(\n          new ClearRequireCachePlugin([\n            /\\.next\\/server\\/ssr-module-cache.js/,\n            /react-storefront-analytics/,\n            /react-storefront-amp/,\n            /react-storefront\\//,\n          ]),\n        )\n      }\n\n      config.module.rules.push({\n        test: /\\.svg$/,\n        use: ['@svgr/webpack'],\n      })\n\n      if (!options.isServer && process.env.analyze === 'true') {\n        config.plugins.push(new BundleAnalyzerPlugin())\n      }\n\n      if (typeof nextConfig.webpack === 'function') {\n        return nextConfig.webpack(config, options)\n      }\n\n      return config\n    },\n    webpackDevMiddleware(config) {\n      config.watchOptions = {\n        // required to recompile client build when there are changes in node_modules\n        ignored: [],\n      }\n      return config\n    },\n  })\n}\n"],"file":"withReactStorefront.js"}