"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var _webpack = require('webpack');

var BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin;

var ClearRequireCachePlugin = require('webpack-clear-require-cache-plugin');

var withServiceWorker = require('./withServiceWorker');
/**
 * @param options
 * @param options.prefetchQueryParam If specified, this parameter will be added to the query string of all prefetch requests.
 * @param options.connector The connector package to use.  By default React Storefront's mock connector will be used.
 */


module.exports = function () {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      prefetchQueryParam = _ref.prefetchQueryParam,
      _ref$connector = _ref.connector,
      connector = _ref$connector === void 0 ? 'react-storefront/mock-connector' : _ref$connector,
      nextConfig = (0, _objectWithoutProperties2["default"])(_ref, ["prefetchQueryParam", "connector"]);

  var usePreact = process.env.preact === 'true';
  nextConfig.serverRuntimeConfig = _objectSpread(_objectSpread({}, nextConfig.serverRuntimeConfig), {}, {
    reactStorefront: {
      connector: connector
    }
  });
  return withServiceWorker(_objectSpread(_objectSpread({}, nextConfig), {}, {
    target: 'serverless',
    webpack: function webpack(config, options) {
      config.resolve.symlinks = false;

      if (usePreact) {
        config.resolve.alias = _objectSpread(_objectSpread({}, config.resolve.alias), {}, {
          react: 'preact/compat',
          react$: 'preact/compat',
          'react-dom/test-utils': 'preact/test-utils',
          'react-dom': 'preact/compat',
          'react-dom$': 'preact/compat'
        });
      }

      if (options.isServer) {
        console.log("> Using connector ".concat(connector));
        config.resolve.alias = _objectSpread(_objectSpread({}, config.resolve.alias), {}, {
          'react-storefront-connector': connector
        });
      }

      config.plugins.push(new _webpack.DefinePlugin({
        'process.env.RSF_PREFETCH_QUERY_PARAM': JSON.stringify(prefetchQueryParam),
        'process.env.SERVICE_WORKER': JSON.stringify(process.env.SERVICE_WORKER),
        'process.env.FIREBASE_CONFIG': JSON.stringify(process.env.FIREBASE_CONFIG)
      }));

      if (config.externals) {
        // Making sure the AMP optimizer is bundled
        config.externals = config.externals.filter(function (name) {
          return name !== '@ampproject/toolbox-optimizer';
        }); // These are optional dependencies for the optimizer
        // which are not used by default

        config.externals.push('jimp');
        config.externals.push('probe-image-size');
      }

      if (process.env.NODE_ENV === 'development') {
        // This makes it easier to develop apps against a local clone of react-storefront linked with yalc. Here
        // we ensure that the server build recompiles when any linked dependency changes.
        config.plugins.push(new ClearRequireCachePlugin([/\.next\/server\/ssr-module-cache.js/, /react-storefront-analytics/, /react-storefront-amp/, /react-storefront\//]));
      }

      config.module.rules.push({
        test: /\.svg$/,
        use: ['@svgr/webpack']
      });

      if (!options.isServer && process.env.analyze === 'true') {
        config.plugins.push(new BundleAnalyzerPlugin());
      }

      if (typeof nextConfig.webpack === 'function') {
        return nextConfig.webpack(config, options);
      }

      return config;
    },
    webpackDevMiddleware: function webpackDevMiddleware(config) {
      config.watchOptions = {
        // required to recompile client build when there are changes in node_modules
        ignored: []
      };
      return config;
    }
  }));
};
//# sourceMappingURL=withReactStorefront.js.map