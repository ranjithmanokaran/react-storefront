{"version":3,"sources":["../../src/plugins/withServiceWorker.js"],"names":["withOffline","require","join","module","exports","withServiceWorker","config","generateInDevMode","process","env","SERVICE_WORKER","console","log","generateSw","workboxOpts","swDest","swSrc","cwd","manifestTransforms","manifestEntries","manifest","filter","entry","url","includes","map","encodeURI","warnings"],"mappings":";;;;;;;;;;AAAA,IAAMA,WAAW,GAAGC,OAAO,CAAC,cAAD,CAA3B;;eACiBA,OAAO,CAAC,MAAD,C;IAAhBC,I,YAAAA,I;;AAERC,MAAM,CAACC,OAAP,GAAiB,SAASC,iBAAT,CAA2BC,MAA3B,EAAmC;AAClD,MAAMC,iBAAiB,GAAGC,OAAO,CAACC,GAAR,CAAYC,cAAZ,KAA+B,MAAzD;;AAEA,MAAIH,iBAAJ,EAAuB;AACrBI,IAAAA,OAAO,CAACC,GAAR,CAAY,4CAAZ;AACD;;AAED,SAAOZ,WAAW,iCACbM,MADa;AAEhBC,IAAAA,iBAAiB,EAAjBA,iBAFgB;AAGhBM,IAAAA,UAAU,EAAE,KAHI;AAIhBC,IAAAA,WAAW,EAAE;AACXC,MAAAA,MAAM,EAAE,0BADG;AAEXC,MAAAA,KAAK,EAAEd,IAAI,CAACM,OAAO,CAACS,GAAR,EAAD,EAAgB,IAAhB,EAAsB,mBAAtB,CAFA;AAGX;AACA;AACA;AACA;AACAC,MAAAA,kBAAkB,EAAE,CAClB,UAAAC,eAAe,EAAI;AACjBR,QAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACA,YAAMQ,QAAQ,GAAGD,eAAe,CAC7BE,MADc,CACP,UAAAC,KAAK;AAAA,iBAAI,CAACA,KAAK,CAACC,GAAN,CAAUC,QAAV,CAAmB,WAAnB,CAAL;AAAA,SADE,EACoC;AADpC,SAEdC,GAFc,CAEV,UAAAH,KAAK,EAAI;AACZA,UAAAA,KAAK,CAACC,GAAN,GAAYG,SAAS,CAACJ,KAAK,CAACC,GAAP,CAArB;AACA,iBAAOD,KAAP;AACD,SALc,CAAjB;AAMA,eAAO;AAAEF,UAAAA,QAAQ,EAARA,QAAF;AAAYO,UAAAA,QAAQ,EAAE;AAAtB,SAAP;AACD,OAViB;AAPT;AAJG,KAAlB;AAyBD,CAhCD","sourcesContent":["const withOffline = require('next-offline')\nconst { join } = require('path')\n\nmodule.exports = function withServiceWorker(config) {\n  const generateInDevMode = process.env.SERVICE_WORKER === 'true'\n\n  if (generateInDevMode) {\n    console.log('> Using service worker in development mode')\n  }\n\n  return withOffline({\n    ...config,\n    generateInDevMode,\n    generateSw: false,\n    workboxOpts: {\n      swDest: 'static/service-worker.js',\n      swSrc: join(process.cwd(), 'sw', 'service-worker.js'),\n      // The asset names for page chunks contain square brackets, eg [productId].js\n      // Next internally injects these chunks encoded, eg %5BproductId%5D.js\n      // For precaching to work the cache keys need to match the name of the assets\n      // requested, therefore we need to transform the manifest entries with encoding.\n      manifestTransforms: [\n        manifestEntries => {\n          console.log('> Creating service worker...')\n          const manifest = manifestEntries\n            .filter(entry => !entry.url.includes('next/dist')) // these paths fail in development resulting in the service worker not being installed\n            .map(entry => {\n              entry.url = encodeURI(entry.url)\n              return entry\n            })\n          return { manifest, warnings: [] }\n        },\n      ],\n    },\n  })\n}\n"],"file":"withServiceWorker.js"}