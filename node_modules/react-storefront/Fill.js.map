{"version":3,"sources":["../src/Fill.js"],"names":["useStyles","theme","root","position","width","child","top","left","height","Fill","children","className","props","Children","only","classes","paddingTop","propTypes","PropTypes","string"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA,IAAMA,SAAS,GAAG,wBAAW,UAAAC,KAAK;AAAA,SAAK;AACrC;;;AAGAC,IAAAA,IAAI,EAAE;AACJC,MAAAA,QAAQ,EAAE,UADN;AAEJC,MAAAA,KAAK,EAAE;AAFH,KAJ+B;;AAQrC;;;AAGAC,IAAAA,KAAK,EAAE;AACLF,MAAAA,QAAQ,EAAE,UADL;AAELG,MAAAA,GAAG,EAAE,CAFA;AAGLC,MAAAA,IAAI,EAAE,CAHD;AAILH,MAAAA,KAAK,EAAE,MAJF;AAKLI,MAAAA,MAAM,EAAE,MALH;AAML,eAAS;AACPJ,QAAAA,KAAK,EAAE,MADA;AAEPI,QAAAA,MAAM,EAAE;AAFD;AANJ;AAX8B,GAAL;AAAA,CAAhB,CAAlB;AAwBA;;;;;;;;;;;;;AAYe,SAASC,IAAT,OAAyD;AAAA,MAAzCD,MAAyC,QAAzCA,MAAyC;AAAA,MAAjCE,QAAiC,QAAjCA,QAAiC;AAAA,MAAvBC,SAAuB,QAAvBA,SAAuB;AAAA,MAATC,KAAS;AACtEF,EAAAA,QAAQ,GAAGG,gBAASC,IAAT,CAAcJ,QAAd,CAAX;;AAEA,MAAIF,MAAM,IAAI,IAAd,EAAoB;AAClB,WAAOE,QAAP;AACD;;AAED,MAAMK,OAAO,GAAGf,SAAS,EAAzB;AAEA,sBACE;AAAK,IAAA,SAAS,EAAE,sBAAKe,OAAO,CAACb,IAAb,EAAmBS,SAAnB;AAAhB,KAAmDC,KAAnD,gBACE;AAAK,IAAA,KAAK,EAAE;AAAEI,MAAAA,UAAU,EAAER;AAAd;AAAZ,IADF,eAEE;AAAK,IAAA,SAAS,EAAEO,OAAO,CAACV;AAAxB,KAAgCK,QAAhC,CAFF,CADF;AAMD;;AAEDD,IAAI,CAACQ,SAAL,GAAiB;AACf;;;;;AAKAT,EAAAA,MAAM,EAAEU,sBAAUC;AANH,CAAjB","sourcesContent":["import React, { Children } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport clsx from 'clsx'\nimport PropTypes from 'prop-types'\n\nconst useStyles = makeStyles(theme => ({\n  /**\n   * Styles applied to the root element.\n   */\n  root: {\n    position: 'relative',\n    width: '100%',\n  },\n  /**\n   * Styles applied to the wrapper element for the children.\n   */\n  child: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%',\n    '& > *': {\n      width: '100%',\n      height: '100%',\n    },\n  },\n}))\n\n/**\n * This component sizes the height of the child element as a percentage of its width.  It expects\n * only a single child.\n *\n * Example:\n *\n * ```js\n *  <Fill height=\"100%\">\n *    <div>this element's height will be the same as its width.</div>\n *  </Fill>\n * ```\n */\nexport default function Fill({ height, children, className, ...props }) {\n  children = Children.only(children)\n\n  if (height == null) {\n    return children\n  }\n\n  const classes = useStyles()\n\n  return (\n    <div className={clsx(classes.root, className)} {...props}>\n      <div style={{ paddingTop: height }} />\n      <div className={classes.child}>{children}</div>\n    </div>\n  )\n}\n\nFill.propTypes = {\n  /**\n   * The height as a percentage of the width in a css compatible expression.  For example:\n   * `\"100%\"` or `\"calc(100% + 50px)\"`, etc...  If omitted, this component does nothing except render\n   * the provided child.\n   */\n  height: PropTypes.string,\n}\n"],"file":"Fill.js"}