{"version":3,"sources":["../src/Rating.js"],"names":["styles","theme","root","display","color","palette","rating","height","width","filledEmpty","fill","divider","blank","reviewsLabel","marginLeft","useStyles","name","Rating","iconFull","iconHalf","iconEmpty","classes","value","label","reviewCount","className","product","fillEmpty","stars","IconFull","Star","IconHalf","StarHalf","IconEmpty","StarBorder","i","push","propTypes","PropTypes","object","number","func","elementType","bool","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Star, StarBorder, StarHalf } from '@material-ui/icons'\nimport { makeStyles } from '@material-ui/core/styles'\nimport PropTypes from 'prop-types'\nimport clsx from 'clsx'\nimport { Hbox } from './Box'\n\n/**\n * Displays a star rating corresponding to the provided value\n */\nexport const styles = theme => ({\n  /**\n   * Styles applied to the root element.\n   */\n  root: {\n    display: 'flex',\n    '& svg': {\n      color: theme.palette.rating,\n      height: '16px',\n      width: '16px',\n      display: 'block',\n    },\n  },\n  /**\n   * Styles applied to an empty rating icon.\n   */\n  filledEmpty: {\n    fill: theme.palette.divider,\n  },\n  /**\n   * Styles applied to the root element when [`value`](#prop-value) is `0`.\n   */\n  blank: {\n    '& svg': {\n      color: theme.palette.divider,\n    },\n  },\n  /**\n   * Styles applied to the label element.\n   */\n  reviewsLabel: {\n    marginLeft: '3px',\n  },\n})\n\nconst useStyles = makeStyles(styles, { name: 'RSFRating' })\n\nexport default function Rating({\n  iconFull,\n  iconHalf,\n  iconEmpty,\n  classes,\n  value,\n  label,\n  reviewCount,\n  className,\n  product,\n  fillEmpty,\n}) {\n  let stars = []\n\n  if (product) {\n    reviewCount = product.reviewCount\n    value = product.rating\n  }\n\n  classes = useStyles({ classes })\n\n  const IconFull = iconFull || Star\n  const IconHalf = iconHalf || StarHalf\n  const IconEmpty = iconEmpty || StarBorder\n\n  for (let i = 1; i <= 5; i++) {\n    if (value == null || value >= i) {\n      stars.push(<IconFull key={i} />)\n    } else if (value >= i - 0.5) {\n      stars.push(<IconHalf key={i} />)\n    } else if (fillEmpty) {\n      stars.push(<IconFull className={classes.filledEmpty} key={i} />)\n    } else {\n      stars.push(<IconEmpty key={i} />)\n    }\n  }\n\n  return (\n    <Hbox>\n      <div className={clsx(classes.root, className, { [classes.blank]: value == null })}>\n        {stars}\n      </div>\n      {reviewCount ? (\n        <div className={classes.reviewsLabel}>\n          ({reviewCount}\n          {label(reviewCount)})\n        </div>\n      ) : null}\n    </Hbox>\n  )\n}\n\nRating.propTypes = {\n  /**\n   * Override or extend the styles applied to the component. See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * The number of stars to display.  Can be an integer or a float ending in .5.\n   */\n  value: PropTypes.number,\n\n  /**\n   * The number of reviews.\n   */\n  reviewCount: PropTypes.number,\n\n  /**\n   * A function that returns the label displayed to the right of the review count.\n   * For example: `<Rating label={reviewCount => <span> {reviewCount == 1 ? 'review' : 'reviews'}</span>}/>`.\n   * This value used in this example is the default.\n   */\n  label: PropTypes.func,\n\n  /**\n   * Can be used to as an alternative to setting `value` and `reviewCount` individually.\n   */\n  product: PropTypes.object,\n\n  /**\n   * Custom full point icon.\n   */\n  iconFull: PropTypes.elementType,\n\n  /**\n   * Custom half point icon.\n   */\n  iconHalf: PropTypes.elementType,\n\n  /**\n   * Custom empty icon; will override `fillEmpty` icon.\n   */\n  iconEmpty: PropTypes.elementType,\n\n  /**\n   * If `true`, use a filled icon with light gray background for empty icon\n   */\n  fillEmpty: PropTypes.bool,\n}\n\nRating.defaultProps = {\n  label: reviewCount => <span> {reviewCount == 1 ? 'review' : 'reviews'}</span>,\n  fillEmpty: false,\n}\n"],"file":"Rating.js"}