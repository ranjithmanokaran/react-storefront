"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = useSimpleNavigation;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _delegate = _interopRequireDefault(require("delegate"));

var _fetch = _interopRequireDefault(require("../fetch"));

var _react = require("react");

var _router = _interopRequireDefault(require("next/router"));

var _qs = _interopRequireDefault(require("qs"));

var _getAPIURL = _interopRequireDefault(require("../api/getAPIURL"));

/**
 * @private
 * Watches for clicks on HTML anchor tags and performs client side navigation if
 * the URL matches a next route.
 */
function useSimpleNavigation() {
  var routes = (0, _react.useRef)({});
  var nextNavigation = (0, _react.useRef)(false);
  var onNextNavigation = (0, _react.useCallback)(function () {
    nextNavigation.current = true;
  }, []);
  var onNextNavigationEnd = (0, _react.useCallback)(function () {
    nextNavigation.current = false;
  }, []);
  (0, _react.useEffect)(function () {
    function doEffect() {
      return _doEffect.apply(this, arguments);
    }

    function _doEffect() {
      _doEffect = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                (0, _delegate["default"])('a', 'click', function (e) {
                  var delegateTarget = e.delegateTarget;
                  var as = delegateTarget.getAttribute('href');
                  var href = getRoute(as, routes.current); // catch if not next link

                  if (href && !nextNavigation.current) {
                    e.preventDefault();
                    var url = toNextURL(href, as);

                    _router["default"].push(url, as);
                  }
                });
                _context.next = 3;
                return fetchRouteManifest();

              case 3:
                routes.current = _context.sent;

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));
      return _doEffect.apply(this, arguments);
    }

    doEffect();

    _router["default"].events.on('routeChangeStart', onNextNavigation);

    _router["default"].events.on('routeChangeComplete', onNextNavigationEnd);

    return function () {
      return _router["default"].events.off('routeChangeStart', onNextNavigation);
    };
  }, []);
}

function toNextURL(href, as) {
  var url = new URL(as, window.location.protocol + '//' + window.location.hostname);
  return {
    pathname: href,
    query: _qs["default"].parse(url.search, {
      ignoreQueryPrefix: true
    })
  };
}

function fetchRouteManifest() {
  return (0, _fetch["default"])((0, _getAPIURL["default"])('/routes')).then(function (res) {
    return res.json();
  });
}

function getRoute(href, routes) {
  for (var pattern in routes) {
    if (new RegExp(pattern, 'i').test(href)) {
      return routes[pattern].as;
    }
  }

  return null;
}
//# sourceMappingURL=useSimpleNavigation.js.map