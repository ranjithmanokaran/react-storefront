"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = replaceState;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * Replaces the history state in a way that is compatible with next.js. Use this function
 * instead of `history.replaceState` to ensure that next.js uses your new state's URL when going back.
 * @param {Object} state A new state.  If `null`, the existing state will be preserved.
 * @param {String} title A new title for the document, if `null`, the existing title will be preserved.
 * @param {String} url The new URL
 */
function replaceState(state, title, url) {
  if (state == null) {
    state = history.state;
  }

  history.replaceState(_objectSpread(_objectSpread({}, state), {}, {
    as: url
  }), title || document.title, url);
}
//# sourceMappingURL=replaceState.js.map