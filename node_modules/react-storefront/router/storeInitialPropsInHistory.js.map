{"version":3,"sources":["../../src/router/storeInitialPropsInHistory.js"],"names":["storeInitialPropsInHistory","window","replaceState","history","data","title","url","state","call","rsf"],"mappings":";;;;;;;;;;;;;;;AAAA;;;;;AAKe,SAASA,0BAAT,GAAsC;AACnD,MAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AADgB,MAG3CC,YAH2C,GAG1BD,MAAM,CAACE,OAHmB,CAG3CD,YAH2C;;AAKnDC,EAAAA,OAAO,CAACD,YAAR,GAAuB,UAACE,IAAD,EAAOC,KAAP,EAAcC,GAAd,EAAsB;AAAA,mBAC3BH,OAD2B;AAAA,QACrCI,KADqC,YACrCA,KADqC;AAE3C,QAAI,CAACA,KAAL,EAAYA,KAAK,GAAG,EAAR;AACZL,IAAAA,YAAY,CAACM,IAAb,CAAkBL,OAAlB;AAA6BM,MAAAA,GAAG,EAAEF,KAAK,CAACE;AAAxC,OAAgDL,IAAhD,GAAwDC,KAAxD,EAA+DC,GAA/D;AACD,GAJD;AAKD","sourcesContent":["/**\n * Patches `history.pushState` and `history.replaceState` to stores the props of the\n * current main component in `history.state` before navigating.  This allows us to instantly\n * render the main component when the user goes back\n */\nexport default function storeInitialPropsInHistory() {\n  if (typeof window === 'undefined') return\n\n  const { replaceState } = window.history\n\n  history.replaceState = (data, title, url) => {\n    let { state } = history\n    if (!state) state = {}\n    replaceState.call(history, { rsf: state.rsf, ...data }, title, url)\n  }\n}\n"],"file":"storeInitialPropsInHistory.js"}