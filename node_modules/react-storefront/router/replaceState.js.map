{"version":3,"sources":["../../src/router/replaceState.js"],"names":["replaceState","state","title","url","history","as","document"],"mappings":";;;;;;;;;;;;;;;AAAA;;;;;;;AAOe,SAASA,YAAT,CAAsBC,KAAtB,EAA6BC,KAA7B,EAAoCC,GAApC,EAAyC;AACtD,MAAIF,KAAK,IAAI,IAAb,EAAmB;AACjBA,IAAAA,KAAK,GAAGG,OAAO,CAACH,KAAhB;AACD;;AAEDG,EAAAA,OAAO,CAACJ,YAAR,iCAA0BC,KAA1B;AAAiCI,IAAAA,EAAE,EAAEF;AAArC,MAA4CD,KAAK,IAAII,QAAQ,CAACJ,KAA9D,EAAqEC,GAArE;AACD","sourcesContent":["/**\n * Replaces the history state in a way that is compatible with next.js. Use this function\n * instead of `history.replaceState` to ensure that next.js uses your new state's URL when going back.\n * @param {Object} state A new state.  If `null`, the existing state will be preserved.\n * @param {String} title A new title for the document, if `null`, the existing title will be preserved.\n * @param {String} url The new URL\n */\nexport default function replaceState(state, title, url) {\n  if (state == null) {\n    state = history.state\n  }\n\n  history.replaceState({ ...state, as: url }, title || document.title, url)\n}\n"],"file":"replaceState.js"}