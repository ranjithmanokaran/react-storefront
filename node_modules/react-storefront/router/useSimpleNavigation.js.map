{"version":3,"sources":["../../src/router/useSimpleNavigation.js"],"names":["useSimpleNavigation","routes","nextNavigation","onNextNavigation","current","onNextNavigationEnd","doEffect","e","delegateTarget","as","getAttribute","href","getRoute","preventDefault","url","toNextURL","Router","push","fetchRouteManifest","events","on","off","URL","window","location","protocol","hostname","pathname","query","qs","parse","search","ignoreQueryPrefix","then","res","json","pattern","RegExp","test"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;;;;AAKe,SAASA,mBAAT,GAA+B;AAC5C,MAAMC,MAAM,GAAG,mBAAO,EAAP,CAAf;AACA,MAAMC,cAAc,GAAG,mBAAO,KAAP,CAAvB;AAEA,MAAMC,gBAAgB,GAAG,wBAAY,YAAM;AACzCD,IAAAA,cAAc,CAACE,OAAf,GAAyB,IAAzB;AACD,GAFwB,EAEtB,EAFsB,CAAzB;AAIA,MAAMC,mBAAmB,GAAG,wBAAY,YAAM;AAC5CH,IAAAA,cAAc,CAACE,OAAf,GAAyB,KAAzB;AACD,GAF2B,EAEzB,EAFyB,CAA5B;AAIA,wBAAU,YAAM;AAAA,aACCE,QADD;AAAA;AAAA;;AAAA;AAAA,gGACd;AAAA;AAAA;AAAA;AAAA;AACE,0CAAS,GAAT,EAAc,OAAd,EAAuB,UAAAC,CAAC,EAAI;AAAA,sBAClBC,cADkB,GACCD,CADD,CAClBC,cADkB;AAE1B,sBAAMC,EAAE,GAAGD,cAAc,CAACE,YAAf,CAA4B,MAA5B,CAAX;AACA,sBAAMC,IAAI,GAAGC,QAAQ,CAACH,EAAD,EAAKR,MAAM,CAACG,OAAZ,CAArB,CAH0B,CAK1B;;AACA,sBAAIO,IAAI,IAAI,CAACT,cAAc,CAACE,OAA5B,EAAqC;AACnCG,oBAAAA,CAAC,CAACM,cAAF;AACA,wBAAMC,GAAG,GAAGC,SAAS,CAACJ,IAAD,EAAOF,EAAP,CAArB;;AACAO,uCAAOC,IAAP,CAAYH,GAAZ,EAAiBL,EAAjB;AACD;AACF,iBAXD;AADF;AAAA,uBAcyBS,kBAAkB,EAd3C;;AAAA;AAcEjB,gBAAAA,MAAM,CAACG,OAdT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADc;AAAA;AAAA;;AAkBdE,IAAAA,QAAQ;;AACRU,uBAAOG,MAAP,CAAcC,EAAd,CAAiB,kBAAjB,EAAqCjB,gBAArC;;AACAa,uBAAOG,MAAP,CAAcC,EAAd,CAAiB,qBAAjB,EAAwCf,mBAAxC;;AAEA,WAAO;AAAA,aAAMW,mBAAOG,MAAP,CAAcE,GAAd,CAAkB,kBAAlB,EAAsClB,gBAAtC,CAAN;AAAA,KAAP;AACD,GAvBD,EAuBG,EAvBH;AAwBD;;AAED,SAASY,SAAT,CAAmBJ,IAAnB,EAAyBF,EAAzB,EAA6B;AAC3B,MAAMK,GAAG,GAAG,IAAIQ,GAAJ,CAAQb,EAAR,EAAYc,MAAM,CAACC,QAAP,CAAgBC,QAAhB,GAA2B,IAA3B,GAAkCF,MAAM,CAACC,QAAP,CAAgBE,QAA9D,CAAZ;AAEA,SAAO;AACLC,IAAAA,QAAQ,EAAEhB,IADL;AAELiB,IAAAA,KAAK,EAAEC,eAAGC,KAAH,CAAShB,GAAG,CAACiB,MAAb,EAAqB;AAAEC,MAAAA,iBAAiB,EAAE;AAArB,KAArB;AAFF,GAAP;AAID;;AAED,SAASd,kBAAT,GAA8B;AAC5B,SAAO,uBAAM,2BAAU,SAAV,CAAN,EAA4Be,IAA5B,CAAiC,UAAAC,GAAG;AAAA,WAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,GAApC,CAAP;AACD;;AAED,SAASvB,QAAT,CAAkBD,IAAlB,EAAwBV,MAAxB,EAAgC;AAC9B,OAAK,IAAImC,OAAT,IAAoBnC,MAApB,EAA4B;AAC1B,QAAI,IAAIoC,MAAJ,CAAWD,OAAX,EAAoB,GAApB,EAAyBE,IAAzB,CAA8B3B,IAA9B,CAAJ,EAAyC;AACvC,aAAOV,MAAM,CAACmC,OAAD,CAAN,CAAgB3B,EAAvB;AACD;AACF;;AAED,SAAO,IAAP;AACD","sourcesContent":["import delegate from 'delegate'\nimport fetch from '../fetch'\nimport { useEffect, useRef, useCallback } from 'react'\nimport Router from 'next/router'\nimport qs from 'qs'\nimport getAPIURL from '../api/getAPIURL'\n\n/**\n * @private\n * Watches for clicks on HTML anchor tags and performs client side navigation if\n * the URL matches a next route.\n */\nexport default function useSimpleNavigation() {\n  const routes = useRef({})\n  const nextNavigation = useRef(false)\n\n  const onNextNavigation = useCallback(() => {\n    nextNavigation.current = true\n  }, [])\n\n  const onNextNavigationEnd = useCallback(() => {\n    nextNavigation.current = false\n  }, [])\n\n  useEffect(() => {\n    async function doEffect() {\n      delegate('a', 'click', e => {\n        const { delegateTarget } = e\n        const as = delegateTarget.getAttribute('href')\n        const href = getRoute(as, routes.current)\n\n        // catch if not next link\n        if (href && !nextNavigation.current) {\n          e.preventDefault()\n          const url = toNextURL(href, as)\n          Router.push(url, as)\n        }\n      })\n\n      routes.current = await fetchRouteManifest()\n    }\n\n    doEffect()\n    Router.events.on('routeChangeStart', onNextNavigation)\n    Router.events.on('routeChangeComplete', onNextNavigationEnd)\n\n    return () => Router.events.off('routeChangeStart', onNextNavigation)\n  }, [])\n}\n\nfunction toNextURL(href, as) {\n  const url = new URL(as, window.location.protocol + '//' + window.location.hostname)\n\n  return {\n    pathname: href,\n    query: qs.parse(url.search, { ignoreQueryPrefix: true }),\n  }\n}\n\nfunction fetchRouteManifest() {\n  return fetch(getAPIURL('/routes')).then(res => res.json())\n}\n\nfunction getRoute(href, routes) {\n  for (let pattern in routes) {\n    if (new RegExp(pattern, 'i').test(href)) {\n      return routes[pattern].as\n    }\n  }\n\n  return null\n}\n"],"file":"useSimpleNavigation.js"}