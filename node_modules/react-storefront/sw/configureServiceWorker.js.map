{"version":3,"sources":["../../src/sw/configureServiceWorker.js"],"names":["configureServiceWorker","config","self","__WB_MANIFEST","api","cacheAPIRequests","path","maxAgeSeconds","statuses","url","RegExp","origin","nextRouteToRegex","log","CacheFirst","cacheName","plugins","CacheableResponsePlugin","ExpirationPlugin","route","replace","process","env","NODE_ENV","message","console"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0Be,SAASA,sBAAT,CAAgCC,MAAhC,EAAwC;AACrD;AACA;AACA,2CAAiBC,IAAI,CAACC,aAAL,IAAsB,EAAvC;;AAEA,MAAIF,MAAM,CAACG,GAAX,EAAgB;AACdC,IAAAA,gBAAgB,CAACJ,MAAM,CAACG,GAAR,CAAhB;AACD;AACF;AAED;;;;;;AAIA,SAASC,gBAAT,CAA0BD,GAA1B,EAA+B;AAAA,6CACyBA,GADzB;AAAA;;AAAA;AAC7B,wDAA2D;AAAA;AAAA,UAAhDE,IAAgD,eAAhDA,IAAgD;AAAA,UAA1CC,aAA0C,eAA1CA,aAA0C;AAAA,6CAA3BC,QAA2B;AAAA,UAA3BA,QAA2B,qCAAhB,CAAC,GAAD,CAAgB;AACzD,UAAMC,GAAG,GAAG,IAAIC,MAAJ,WAAcR,IAAI,CAACS,MAAnB,SAA4BC,gBAAgB,CAACN,IAAD,CAA5C,GAAsD,GAAtD,CAAZ;AAEAO,MAAAA,GAAG,CAAC,mBAAD,EAAsBP,IAAtB,EAA4BG,GAA5B,CAAH;AAEA,yCACEA,GADF,EACO;AACL,UAAIK,6BAAJ,CAAe;AACbC,QAAAA,SAAS,EAAE,KADE;AAEbC,QAAAA,OAAO,EAAE,CACP,IAAIC,iDAAJ,CAA4B;AAAET,UAAAA,QAAQ,EAARA;AAAF,SAA5B,CADO,EAEP,IAAIU,mCAAJ,CAAqB;AAAEX,UAAAA,aAAa,EAAbA;AAAF,SAArB,CAFO;AAFI,OAAf,CAFF;AAUD;AAhB4B;AAAA;AAAA;AAAA;AAAA;AAiB9B;AAED;;;;;;;AAKA,SAASK,gBAAT,CAA0BO,KAA1B,EAAiC;AAC/B,SAAOA,KAAK,CAACC,OAAN,CAAc,cAAd,EAA8B,OAA9B,IAAyC,YAAhD;AACD;AAED;;;;;;AAIA,SAASP,GAAT,GAAyB;AACvB;AACA,MAAIQ,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AAAA;;AAAA,sCAF7BC,OAE6B;AAF7BA,MAAAA,OAE6B;AAAA;;AACzC,gBAAAC,OAAO,EAACZ,GAAR,kBACE,mCADF,EAEE,6FAFF,SAGKW,OAHL;AAKD;AACF","sourcesContent":["import { registerRoute } from 'workbox-routing'\nimport { skipWaiting, clientsClaim } from 'workbox-core'\nimport { precacheAndRoute } from 'workbox-precaching'\nimport { CacheFirst } from 'workbox-strategies'\nimport { ExpirationPlugin } from 'workbox-expiration'\nimport { CacheableResponsePlugin } from 'workbox-cacheable-response'\n\n/**\n * Configures prefetching and caching of static assets as well as caching of api requests\n * in the service worker.\n *\n * **Example**\n *\n * ```js\n *  import { configureServiceWorker } from 'react-storefront/sw'\n *\n *  const maxAgeSeconds = 60 * 60 // 1 hour\n *\n *  configureServiceWorker({\n *    api: [\n *      { path: '/api/[version]/p/[productId]', maxAgeSeconds },\n *      { path: '/api/[version]/s/[subcategoryId]', maxAgeSeconds },\n *      { path: '/api/[version]/', maxAgeSeconds },\n *    ],\n *  })\n * ```\n *\n * @param {Object} config\n * @param {Object} config.api An array of objects with the following properties:\n * @param {Object} config.api.maxAgeSeconds The time to live in seconds for api requests\n * @param {Object} config.api.paths The api paths to cache\n * @param {Object} config.api.statuses Only responses with these statuses will be cached. Defaults to only caching 200s.\n */\nexport default function configureServiceWorker(config) {\n  skipWaiting()\n  clientsClaim()\n  precacheAndRoute(self.__WB_MANIFEST || [])\n\n  if (config.api) {\n    cacheAPIRequests(config.api)\n  }\n}\n\n/**\n * Creates worbox routes for api routes\n * @param {Object[]} api\n */\nfunction cacheAPIRequests(api) {\n  for (let { path, maxAgeSeconds, statuses = [200] } of api) {\n    const url = new RegExp(`${self.origin}${nextRouteToRegex(path)}`, 'i')\n\n    log('Caching API route', path, url)\n\n    registerRoute(\n      url, // we need to remove the ^ or requests will never match\n      new CacheFirst({\n        cacheName: 'api',\n        plugins: [\n          new CacheableResponsePlugin({ statuses }),\n          new ExpirationPlugin({ maxAgeSeconds }),\n        ],\n      }),\n    )\n  }\n}\n\n/**\n * Converts next clean route syntax to a regular expression\n * @param {String} route A next.js route pattern\n * @return {String}\n */\nfunction nextRouteToRegex(route) {\n  return route.replace(/\\[[^\\]]+\\]/gi, '[^/]+') + '($|\\\\?.*$)'\n}\n\n/**\n * Stylized console.log\n * @param  {...any} message\n */\nfunction log(...message) {\n  // istanbul ignore else\n  if (process.env.NODE_ENV !== 'production') {\n    console.log(\n      '%creact-storefront service-worker',\n      'background: #43a047; color: #ffffff; font-weight:bold; padding: 3px 5px; border-radius: 5px',\n      ...message,\n    )\n  }\n}\n"],"file":"configureServiceWorker.js"}