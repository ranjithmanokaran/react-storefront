"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = configureServiceWorker;

var _workboxRouting = require("workbox-routing");

var _workboxCore = require("workbox-core");

var _workboxPrecaching = require("workbox-precaching");

var _workboxStrategies = require("workbox-strategies");

var _workboxExpiration = require("workbox-expiration");

var _workboxCacheableResponse = require("workbox-cacheable-response");

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/**
 * Configures prefetching and caching of static assets as well as caching of api requests
 * in the service worker.
 *
 * **Example**
 *
 * ```js
 *  import { configureServiceWorker } from 'react-storefront/sw'
 *
 *  const maxAgeSeconds = 60 * 60 // 1 hour
 *
 *  configureServiceWorker({
 *    api: [
 *      { path: '/api/[version]/p/[productId]', maxAgeSeconds },
 *      { path: '/api/[version]/s/[subcategoryId]', maxAgeSeconds },
 *      { path: '/api/[version]/', maxAgeSeconds },
 *    ],
 *  })
 * ```
 *
 * @param {Object} config
 * @param {Object} config.api An array of objects with the following properties:
 * @param {Object} config.api.maxAgeSeconds The time to live in seconds for api requests
 * @param {Object} config.api.paths The api paths to cache
 * @param {Object} config.api.statuses Only responses with these statuses will be cached. Defaults to only caching 200s.
 */
function configureServiceWorker(config) {
  (0, _workboxCore.skipWaiting)();
  (0, _workboxCore.clientsClaim)();
  (0, _workboxPrecaching.precacheAndRoute)(self.__WB_MANIFEST || []);

  if (config.api) {
    cacheAPIRequests(config.api);
  }
}
/**
 * Creates worbox routes for api routes
 * @param {Object[]} api
 */


function cacheAPIRequests(api) {
  var _iterator = _createForOfIteratorHelper(api),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _step$value = _step.value,
          path = _step$value.path,
          maxAgeSeconds = _step$value.maxAgeSeconds,
          _step$value$statuses = _step$value.statuses,
          statuses = _step$value$statuses === void 0 ? [200] : _step$value$statuses;
      var url = new RegExp("".concat(self.origin).concat(nextRouteToRegex(path)), 'i');
      log('Caching API route', path, url);
      (0, _workboxRouting.registerRoute)(url, // we need to remove the ^ or requests will never match
      new _workboxStrategies.CacheFirst({
        cacheName: 'api',
        plugins: [new _workboxCacheableResponse.CacheableResponsePlugin({
          statuses: statuses
        }), new _workboxExpiration.ExpirationPlugin({
          maxAgeSeconds: maxAgeSeconds
        })]
      }));
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
}
/**
 * Converts next clean route syntax to a regular expression
 * @param {String} route A next.js route pattern
 * @return {String}
 */


function nextRouteToRegex(route) {
  return route.replace(/\[[^\]]+\]/gi, '[^/]+') + '($|\\?.*$)';
}
/**
 * Stylized console.log
 * @param  {...any} message
 */


function log() {
  // istanbul ignore else
  if (process.env.NODE_ENV !== 'production') {
    var _console;

    for (var _len = arguments.length, message = new Array(_len), _key = 0; _key < _len; _key++) {
      message[_key] = arguments[_key];
    }

    (_console = console).log.apply(_console, ['%creact-storefront service-worker', 'background: #43a047; color: #ffffff; font-weight:bold; padding: 3px 5px; border-radius: 5px'].concat(message));
  }
}
//# sourceMappingURL=configureServiceWorker.js.map