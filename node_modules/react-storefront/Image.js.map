{"version":3,"sources":["../src/Image.js"],"names":["styles","theme","root","position","display","alignItems","justifyContent","minHeight","minWidth","image","fit","top","left","right","bottom","width","height","contain","objectFit","maxHeight","maxWidth","fill","useStyles","name","Image","lazy","lazyOffset","notFoundSrc","bind","classes","className","aspectRatio","alt","src","amp","optimize","onChange","onSrcChange","onAltChange","value","ImgElement","imgAttributes","lazyLoad","visible","loaded","setLoaded","PWAContext","hydrating","primaryNotFound","setPrimaryNotFound","ref","img","current","complete","naturalWidth","result","paddingTop","undefined","propTypes","PropTypes","string","number","bool","oneOf","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, useContext } from 'react'\nimport PropTypes from 'prop-types'\nimport clsx from 'clsx'\nimport VisibilitySensor from 'react-visibility-sensor'\nimport { makeStyles } from '@material-ui/core/styles'\nimport PWAContext from './PWAContext'\n\nexport const styles = theme => ({\n  /**\n   * Styles applied to the root element.\n   */\n  root: {\n    position: 'relative',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    // Without a minimum height and width, the container will not fire\n    // the visibility change\n    minHeight: 1,\n    minWidth: 1,\n  },\n  /**\n   * Styles applied to the image element.\n   */\n  image: {},\n  /**\n   * Styles applied to the image element when [`aspectRatio`](#prop-aspectRatio) is defined.\n   */\n  fit: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    display: 'block',\n    width: '100%',\n    height: '100%',\n  },\n  /**\n   * Styles applied to the root element when [`contain`](#prop-contain) is `true`.\n   */\n  contain: {\n    '& img': {\n      objectFit: 'contain',\n      maxHeight: '100%',\n      maxWidth: '100%',\n    },\n  },\n  /**\n   * Styles applied to the root element when [`fill`](#prop-fill) is `true`.\n   */\n  fill: {\n    width: '100%',\n    height: '100%',\n    '& img': {\n      display: 'block',\n      objectFit: 'contain',\n      maxHeight: '100%',\n      maxWidth: '100%',\n      width: '100%',\n      height: '100%',\n    },\n  },\n})\n\nconst useStyles = makeStyles(styles, { name: 'RSFImage' })\n\n/**\n * Displays an image that can be lazy loaded and made to auto-scale to fit the parent element\n * by setting the `fill` prop, or grow/shrink while maintaining a given aspect ratio\n * by setting the `aspectRatio` prop.\n */\nexport default function Image({\n  lazy,\n  lazyOffset,\n  notFoundSrc,\n  height,\n  width,\n  fill,\n  bind,\n  contain,\n  classes,\n  className,\n  aspectRatio,\n  alt,\n  src,\n  amp,\n  optimize,\n  onChange,\n  onSrcChange,\n  onAltChange,\n  value,\n  ImgElement,\n  ...imgAttributes\n}) {\n  function lazyLoad(visible) {\n    if (!loaded && visible) {\n      setLoaded(true)\n    }\n  }\n\n  classes = useStyles({ classes })\n\n  const { hydrating } = useContext(PWAContext) || {}\n  const [loaded, setLoaded] = useState(lazy === false || (lazy === 'ssr' && !hydrating))\n  const [primaryNotFound, setPrimaryNotFound] = useState(false)\n  const ref = useRef()\n\n  useEffect(() => {\n    const img = ref.current\n    if (img && img.complete && img.naturalWidth === 0) {\n      setPrimaryNotFound(true)\n    }\n  }, [])\n\n  if (src == null) return null\n\n  contain = contain || aspectRatio\n\n  if (primaryNotFound && notFoundSrc) {\n    src = notFoundSrc\n  }\n\n  let result = (\n    <div\n      className={clsx(className, {\n        [classes.root]: true,\n        [classes.contain]: contain,\n        [classes.fill]: fill,\n      })}\n    >\n      {aspectRatio && <div style={{ paddingTop: `${aspectRatio * 100}%` }} />}\n      {loaded && (\n        <ImgElement\n          ref={ref}\n          src={src}\n          key={src}\n          height={height}\n          width={width}\n          alt={alt}\n          className={clsx({\n            [classes.image]: true,\n            [classes.fit]: aspectRatio != null,\n          })}\n          {...imgAttributes}\n          // prevent render \"onerror\" as a DOM prop in case of amp-img tag\n          onError={\n            ImgElement !== 'amp-img'\n              ? () => setPrimaryNotFound(true)\n              : /* istanbul ignore next */ undefined\n          }\n        />\n      )}\n    </div>\n  )\n\n  result = (\n    <VisibilitySensor\n      active={!loaded}\n      onChange={lazyLoad}\n      partialVisibility\n      offset={{ top: -lazyOffset, bottom: -lazyOffset }}\n    >\n      {result}\n    </VisibilitySensor>\n  )\n\n  return result\n}\n\nImage.propTypes = {\n  /**\n   * The URL for the image.\n   */\n  src: PropTypes.string,\n\n  /**\n   * The URL of the image to use in case the primary image fails to load.\n   */\n  notFoundSrc: PropTypes.string,\n\n  /**\n   * The ratio of height/width as a float.  For example: `1` when the height and width match,\n   * `0.5` when height is half of the width.\n   */\n  aspectRatio: PropTypes.number,\n\n  /**\n   * Set to `true` to apply object-fit:contain to the image so that it automatically\n   * fits within the element's height and width.\n   */\n  contain: PropTypes.bool,\n\n  /**\n   * The same as `contain`, except images are stretched to fill the element's height and width.\n   */\n  fill: PropTypes.bool,\n\n  /**\n   * Set to `true` to wait until the image enters the viewport before loading it. Set to `\"ssr\"` to\n   * only lazy load images during server side rendering.\n   */\n  lazy: PropTypes.oneOf(['ssr', true, false]),\n\n  /**\n   * Sets the minimum amount of pixels the image can be scrolled out of view before it\n   * is lazy loaded.  You must set `lazy` in order for this setting to take effect.\n   */\n  lazyOffset: PropTypes.number,\n}\n\nImage.defaultProps = {\n  contain: false,\n  fill: false,\n  lazy: false,\n  lazyOffset: 100,\n  ImgElement: 'img',\n}\n"],"file":"Image.js"}