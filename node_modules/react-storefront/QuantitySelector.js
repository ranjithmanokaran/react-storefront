"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = QuantitySelector;
exports.styles = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _Add = _interopRequireDefault(require("@material-ui/icons/Add"));

var _Remove = _interopRequireDefault(require("@material-ui/icons/Remove"));

var _IconButton = _interopRequireDefault(require("@material-ui/core/IconButton"));

var _styles = require("@material-ui/core/styles");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _clsx = _interopRequireDefault(require("clsx"));

var styles = function styles(theme) {
  return {
    /**
     * Styles applied to the root element.
     */
    root: {
      backgroundColor: theme.palette.divider,
      border: 'none',
      width: '110px',
      padding: 0
    },

    /**
     * Styles applied to the icon elements.
     */
    icon: {
      fontSize: '1.3125rem',
      position: 'relative'
    },

    /**
     * Styles applied to the icon button elements.
     */
    button: {
      height: '36px',
      width: '36px',
      padding: 0
    },

    /**
     * Styles applied to the subtract icon button element.
     */
    subtract: {
      marginRight: theme.spacing(-4.5)
    },

    /**
     * Styles applied to the add icon button element.
     */
    add: {
      marginLeft: theme.spacing(-4.5)
    },

    /**
     * Styles applied to the text input element.
     */
    input: {
      width: 100,
      color: theme.palette.text.primary,
      backgroundColor: theme.palette.grey[200],
      textAlign: 'center',
      padding: theme.spacing(1, 0, 1, 0),
      border: 'none',
      fontSize: theme.spacing(2),
      outline: 'none',
      '&::before': {
        display: 'none'
      }
    }
  };
};

exports.styles = styles;
var useStyles = (0, _styles.makeStyles)(styles, {
  name: 'RSFQuantitySelector'
});
/**
 * A quantity selector with plus and minus buttons.
 */

function QuantitySelector(_ref) {
  var name = _ref.name,
      classes = _ref.classes,
      addIcon = _ref.addIcon,
      addButtonProps = _ref.addButtonProps,
      subtractIcon = _ref.subtractIcon,
      subtractButtonProps = _ref.subtractButtonProps,
      value = _ref.value,
      minValue = _ref.minValue,
      maxValue = _ref.maxValue,
      onChange = _ref.onChange,
      inputProps = _ref.inputProps,
      ariaLabel = _ref.ariaLabel;
  classes = useStyles({
    classes: classes
  });
  var _classes = classes,
      quantitySelector = _classes.quantitySelector,
      icon = _classes.icon,
      button = _classes.button,
      inputClasses = (0, _objectWithoutProperties2["default"])(_classes, ["quantitySelector", "icon", "button"]);
  if (!value) value = 1;

  function handleChange(value) {
    if (value >= minValue && value <= maxValue) {
      onChange(value);
    }
  }

  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(_IconButton["default"], (0, _extends2["default"])({
    size: "small",
    classes: {
      root: button
    },
    className: classes.subtract,
    onClick: function onClick() {
      return handleChange(value - 1);
    },
    "aria-label": "add one ".concat(ariaLabel)
  }, subtractButtonProps), subtractIcon || /*#__PURE__*/_react["default"].createElement(_Remove["default"], {
    classes: {
      root: icon
    }
  })), /*#__PURE__*/_react["default"].createElement("input", (0, _extends2["default"])({
    onChange: handleChange,
    value: value,
    name: name
  }, {
    'aria-label': ariaLabel
  }, {
    className: (0, _clsx["default"])([classes.input, inputClasses])
  }, inputProps, {
    readOnly: true
  })), /*#__PURE__*/_react["default"].createElement(_IconButton["default"], (0, _extends2["default"])({
    size: "small",
    classes: {
      root: button
    },
    className: classes.add,
    onClick: function onClick() {
      return handleChange(value + 1);
    },
    "aria-label": "subtract one ".concat(ariaLabel)
  }, addButtonProps), addIcon || /*#__PURE__*/_react["default"].createElement(_Add["default"], {
    classes: {
      root: icon
    }
  })));
}

QuantitySelector.propTypes = {
  /**
   * The name to apply to the input when rendering AMP.
   */
  name: _propTypes["default"].string,

  /**
   * Override or extend the styles applied to the component. See [CSS API](#css) below for more details.
   */
  classes: _propTypes["default"].object,

  /**
   * The plus icon.
   */
  addIcon: _propTypes["default"].element,

  /**
   * The minus icon.
   */
  subtractIcon: _propTypes["default"].element,

  /**
   * The current value.
   */
  value: _propTypes["default"].number,

  /**
   * The minimum value.
   */
  minValue: _propTypes["default"].number,

  /**
   * The maximum value.
   */
  maxValue: _propTypes["default"].number,

  /**
   * Called when the value is changed.  The new value is passed as the only argument
   */
  onChange: _propTypes["default"].func,

  /**
   * The accessibility label.  Add and subtract button `aria-label` values are derived from this as
   * `"add one {ariaLabel}"` and `"subtract one {ariaLabel}"`.
   */
  ariaLabel: _propTypes["default"].string
};
QuantitySelector.defaultProps = {
  name: 'quantity',
  onChange: Function.prototype,
  addButtonProps: {},
  subtractButtonProps: {},
  inputProps: {},
  minValue: 1,
  maxValue: 100,
  ariaLabel: 'quantity'
};
//# sourceMappingURL=QuantitySelector.js.map