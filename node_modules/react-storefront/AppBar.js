"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = AppBar;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _styles = require("@material-ui/core/styles");

var _AppBar = _interopRequireDefault(require("@material-ui/core/AppBar"));

var _Toolbar = _interopRequireDefault(require("@material-ui/core/Toolbar"));

var _useScrollTrigger = _interopRequireDefault(require("@material-ui/core/useScrollTrigger"));

var _Slide = _interopRequireDefault(require("@material-ui/core/Slide"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _PWAContext = _interopRequireDefault(require("./PWAContext"));

var _clsx2 = _interopRequireDefault(require("clsx"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var useStyles = (0, _styles.makeStyles)(function (theme) {
  return {
    /**
     * Styles applied to the root element.
     */
    root: {
      boxSizing: 'border-box',
      backgroundColor: theme.palette.background["default"],
      boxShadow: 'none',
      borderBottom: "1px solid ".concat(theme.palette.divider),
      zIndex: theme.zIndex.modal + 10,
      height: theme.headerHeight,
      display: 'flex',
      flexDirection: 'column',
      alignItems: 'stretch'
    },
    relative: {
      position: 'relative'
    },

    /**
     * Styles applied to the spacer that fills the height behind the floating toolbar.
     */
    spacer: {
      boxSizing: 'border-box',
      height: theme.headerHeight
    },

    /**
     * Styles applied to the `Toolbar` element.
     */
    toolbar: {
      justifyContent: 'space-between',
      alignItems: 'center',
      flex: 1
    },

    /**
     * Styles applied to the offline warning element.
     */
    offline: {
      textAlign: 'center',
      backgroundColor: '#f34c4c',
      zIndex: 999999,
      width: '100vw',
      color: 'white'
    }
  };
});

function AppBar(_ref) {
  var _clsx;

  var children = _ref.children,
      style = _ref.style,
      variant = _ref.variant,
      fixed = _ref.fixed,
      offlineWarning = _ref.offlineWarning,
      classes = _ref.classes;

  if (fixed) {
    variant = 'fixed';
  }

  var trigger = (0, _useScrollTrigger["default"])();
  classes = useStyles({
    classes: classes
  });

  var _useContext = (0, _react.useContext)(_PWAContext["default"]),
      offline = _useContext.offline;

  var appBar = /*#__PURE__*/_react["default"].createElement(_AppBar["default"], {
    className: (0, _clsx2["default"])((_clsx = {}, (0, _defineProperty2["default"])(_clsx, classes.root, true), (0, _defineProperty2["default"])(_clsx, classes.relative, variant === 'relative'), _clsx)),
    style: _objectSpread({}, style)
  }, /*#__PURE__*/_react["default"].createElement(_Toolbar["default"], {
    disableGutters: true,
    className: classes.toolbar
  }, children));

  if (variant === 'hide') {
    appBar = /*#__PURE__*/_react["default"].createElement(_Slide["default"], {
      appear: false,
      "in": !trigger
    }, appBar);
  }

  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, (variant === 'hide' || variant === 'fixed') && /*#__PURE__*/_react["default"].createElement("div", {
    className: classes.spacer
  }), offline && /*#__PURE__*/_react["default"].createElement("div", {
    className: classes.offline
  }, offlineWarning), appBar);
}

AppBar.propTypes = {
  /**
   * Override or extend the styles applied to the component. See [CSS API](#css) below for more details.
   */
  classes: _propTypes["default"].object,

  /**
   * Affixes the AppBar to the top of the viewport. This prop is deprecated.
   * Use `variant="fixed"` instead.
   * @deprecated
   */
  fixed: _propTypes["default"].bool,

  /**
   * String or Element to render within the offline warning container at the top of the app.
   */
  offlineWarning: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].element]),

  /**
   * * relative - The AppBar stays at the top of the page.
   * * fixed - The AppBar stays at the top of the viewport.
   * * hide - The same as fixed, but the app bar automatically hides when the user scrolls down.
   */
  variant: _propTypes["default"].oneOf(['relative', 'fixed', 'hide'])
};
AppBar.defaultProps = {
  offlineWarning: 'Your device lost its internet connection.',
  variant: 'hide',
  fixed: false
};
//# sourceMappingURL=AppBar.js.map