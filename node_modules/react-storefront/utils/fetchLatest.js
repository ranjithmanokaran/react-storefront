"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fetchLatest = fetchLatest;
exports.StaleResponseError = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _wrapNativeSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/wrapNativeSuper"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * Creates a fetch function with an internal incrementing request counter that ensures that out of order
 * responses result in a `StaleResponseError`.
 *
 * Example usage:
 *
 * ```js
 * import { fetchLatest, StaleResponseError } from 'react-storefront/fetchLatest'
 * import originalFetch from 'fetch'
 *
 * const fetch = fetchLatest(originalFetch)
 *
 * try {
 *   const response = await fetch('/some/url')
 * } catch (e) {
 *   if (!StaleResponseError.is(e)) {
 *     throw e // just ignore stale responses, rethrow all other errors
 *   }
 * }
 * ```
 * @param {Function} fetch An implementation of the standard browser fetch.
 * @return {Function}
 */
function fetchLatest(fetch) {
  var nextId = 0;
  var controller;

  var abort = function abort() {
    controller && controller.abort();

    if (typeof AbortController !== 'undefined') {
      return controller = new AbortController();
    } else {
      return {
        signal: null
      };
    }
  };

  return function (url, options) {
    var id = ++nextId;
    var signal = abort().signal;
    return fetch(url, _objectSpread(_objectSpread({}, options), {}, {
      signal: signal
    })).then(function (response) {
      if (id !== nextId) {
        throw new StaleResponseError();
      }

      return response;
    })["catch"](function (error) {
      // For browsers that support AbortController, ensure that the behavior is the same as browsers that don't -
      // StaleResponseError should be thrown in either case
      if (error.name === 'AbortError') {
        throw new StaleResponseError();
      } else {
        throw error;
      }
    });
  };
}
/**
 * Thrown when an out of order response is received from `fetchLatest`.
 */


var StaleResponseError = /*#__PURE__*/function (_Error) {
  (0, _inherits2["default"])(StaleResponseError, _Error);

  var _super = _createSuper(StaleResponseError);

  function StaleResponseError() {
    var _this;

    (0, _classCallCheck2["default"])(this, StaleResponseError);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "name", 'StaleResponseError');
    return _this;
  }

  return StaleResponseError;
}( /*#__PURE__*/(0, _wrapNativeSuper2["default"])(Error));

exports.StaleResponseError = StaleResponseError;
(0, _defineProperty2["default"])(StaleResponseError, "is", function (e) {
  return e.name === 'StaleResponseError';
});
//# sourceMappingURL=fetchLatest.js.map