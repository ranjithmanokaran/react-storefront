{"version":3,"sources":["../../src/utils/lazyLoadImages.js"],"names":["lazyLoadImages","element","lazySrcAttribute","lazyImages","querySelectorAll","length","lazyImageObserver","load","img","src","getAttribute","onload","removeAttribute","removeEventListener","addEventListener","setAttribute","observerHandler","entries","self","entry","isIntersecting","target","unobserve","window","IntersectionObserver","observe","e"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;AAUe,SAASA,cAAT,CAAwBC,OAAxB,EAAyE;AAAA,iFAAJ,EAAI;AAAA,mCAAtCC,gBAAsC;AAAA,MAAtCA,gBAAsC,sCAAnB,UAAmB;;AACtF,MAAI,CAACD,OAAL,EAAc;AACd,MAAME,UAAU,uCAAOF,OAAO,CAACG,gBAAR,eAAgCF,gBAAhC,OAAP,CAAhB;AACA,MAAI,CAACC,UAAU,CAACE,MAAhB,EAAwB;AAExB,MAAIC,iBAAJ;;AAEA,MAAMC,IAAI,GAAG,SAAPA,IAAO,CAAAC,GAAG,EAAI;AAClB,QAAMC,GAAG,GAAGD,GAAG,CAACE,YAAJ,CAAiBR,gBAAjB,CAAZ;;AACA,QAAMS,MAAM,GAAG,SAATA,MAAS,GAAM;AACnBH,MAAAA,GAAG,CAACI,eAAJ,CAAoBV,gBAApB;AACAM,MAAAA,GAAG,CAACK,mBAAJ,CAAwB,MAAxB,EAAgCF,MAAhC;AACD,KAHD;;AAIAH,IAAAA,GAAG,CAACM,gBAAJ,CAAqB,MAArB,EAA6BH,MAA7B;AACAH,IAAAA,GAAG,CAACO,YAAJ,CAAiB,KAAjB,EAAwBN,GAAxB;AACD,GARD;;AAUA,MAAMO,eAAe,GAAG,SAAlBA,eAAkB,CAASC,OAAT,EAAkBC,IAAlB,EAAwB;AAAA,+CAC5BD,OAD4B;AAAA;;AAAA;AAC9C,0DAA2B;AAAA,YAAlBE,KAAkB;;AACzB,YAAIA,KAAK,CAACC,cAAV,EAA0B;AACxBb,UAAAA,IAAI,CAACY,KAAK,CAACE,MAAP,CAAJ,CADwB,CAExB;;AACA,cAAIH,IAAJ,EAAU;AACRA,YAAAA,IAAI,CAACI,SAAL,CAAeH,KAAK,CAACE,MAArB;AACD;AACF;AACF;AAT6C;AAAA;AAAA;AAAA;AAAA;AAU/C,GAVD;;AAYA,MAAI;AACFf,IAAAA,iBAAiB,GAAG,IAAIiB,MAAM,CAACC,oBAAX,CAAgCR,eAAhC,CAApB;;AADE,gDAGcb,UAHd;AAAA;;AAAA;AAGF,6DAA4B;AAAA,YAAnBK,GAAmB;AAC1BF,QAAAA,iBAAiB,CAACmB,OAAlB,CAA0BjB,GAA1B;AACD;AALC;AAAA;AAAA;AAAA;AAAA;;AAOF,WAAOF,iBAAP;AACD,GARD,CAQE,OAAOoB,CAAP,EAAU;AACV;AADU,gDAEMvB,UAFN;AAAA;;AAAA;AAEV,6DAA4B;AAAA,YAAnBK,IAAmB;AAC1BD,QAAAA,IAAI,CAACC,IAAD,CAAJ;AACD;AAJS;AAAA;AAAA;AAAA;AAAA;AAKX;AACF","sourcesContent":["/**\n * Observes the visibility of all `img` elements inside the specified element\n * that match the specified selector. When an image becomes visible, the `data-src`\n * attribute is copied to `src`.\n *\n * See https://developers.google.com/web/fundamentals/performance/lazy-loading-guidance/images-and-video/\n * @param {DOMElement} element The img element to lazy load\n * @param {Object} options\n * @param {Object} options.lazySrcAttribute The attribute containing the image URL. Defaults to `data-src`.\n */\nexport default function lazyLoadImages(element, { lazySrcAttribute = 'data-src' } = {}) {\n  if (!element) return\n  const lazyImages = [...element.querySelectorAll(`img[${lazySrcAttribute}]`)]\n  if (!lazyImages.length) return\n\n  let lazyImageObserver\n\n  const load = img => {\n    const src = img.getAttribute(lazySrcAttribute)\n    const onload = () => {\n      img.removeAttribute(lazySrcAttribute)\n      img.removeEventListener('load', onload)\n    }\n    img.addEventListener('load', onload)\n    img.setAttribute('src', src)\n  }\n\n  const observerHandler = function(entries, self) {\n    for (let entry of entries) {\n      if (entry.isIntersecting) {\n        load(entry.target)\n        // the image is now in place, stop watching\n        if (self) {\n          self.unobserve(entry.target)\n        }\n      }\n    }\n  }\n\n  try {\n    lazyImageObserver = new window.IntersectionObserver(observerHandler)\n\n    for (let img of lazyImages) {\n      lazyImageObserver.observe(img)\n    }\n\n    return lazyImageObserver\n  } catch (e) {\n    // eagerly load images when we don't have the observer\n    for (let img of lazyImages) {\n      load(img)\n    }\n  }\n}\n"],"file":"lazyLoadImages.js"}