{"version":3,"sources":["../../src/utils/useDebounce.js"],"names":["useDebounce","value","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout"],"mappings":";;;;;;;;;;;AAAA;;AAEe,SAASA,WAAT,CAAqBC,KAArB,EAA4BC,KAA5B,EAAmC;AAChD;AADgD,kBAEJ,qBAASD,KAAT,CAFI;AAAA;AAAA,MAEzCE,cAFyC;AAAA,MAEzBC,iBAFyB;;AAIhD,wBACE,YAAM;AACJ;AACA,QAAMC,OAAO,GAAGC,UAAU,CAAC,YAAM;AAC/BF,MAAAA,iBAAiB,CAACH,KAAD,CAAjB;AACD,KAFyB,EAEvBC,KAFuB,CAA1B,CAFI,CAMJ;AACA;AACA;;AACA,WAAO,YAAM;AACXK,MAAAA,YAAY,CAACF,OAAD,CAAZ;AACD,KAFD;AAGD,GAbH,EAcE,CAACJ,KAAD,EAAQC,KAAR,CAdF,CAckB;AAdlB;AAiBA,SAAOC,cAAP;AACD","sourcesContent":["import { useEffect, useState } from 'react'\n\nexport default function useDebounce(value, delay) {\n  // State and setters for debounced value\n  const [debouncedValue, setDebouncedValue] = useState(value)\n\n  useEffect(\n    () => {\n      // Update debounced value after delay\n      const handler = setTimeout(() => {\n        setDebouncedValue(value)\n      }, delay)\n\n      // Cancel the timeout if value changes (also on delay change or unmount)\n      // This is how we prevent debounced value from updating if value is changed ...\n      // .. within the delay period. Timeout gets cleared and restarted.\n      return () => {\n        clearTimeout(handler)\n      }\n    },\n    [value, delay], // Only re-call effect if value or delay changes\n  )\n\n  return debouncedValue\n}\n"],"file":"useDebounce.js"}