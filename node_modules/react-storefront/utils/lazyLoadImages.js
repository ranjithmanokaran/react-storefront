"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = lazyLoadImages;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/**
 * Observes the visibility of all `img` elements inside the specified element
 * that match the specified selector. When an image becomes visible, the `data-src`
 * attribute is copied to `src`.
 *
 * See https://developers.google.com/web/fundamentals/performance/lazy-loading-guidance/images-and-video/
 * @param {DOMElement} element The img element to lazy load
 * @param {Object} options
 * @param {Object} options.lazySrcAttribute The attribute containing the image URL. Defaults to `data-src`.
 */
function lazyLoadImages(element) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$lazySrcAttribute = _ref.lazySrcAttribute,
      lazySrcAttribute = _ref$lazySrcAttribute === void 0 ? 'data-src' : _ref$lazySrcAttribute;

  if (!element) return;
  var lazyImages = (0, _toConsumableArray2["default"])(element.querySelectorAll("img[".concat(lazySrcAttribute, "]")));
  if (!lazyImages.length) return;
  var lazyImageObserver;

  var load = function load(img) {
    var src = img.getAttribute(lazySrcAttribute);

    var onload = function onload() {
      img.removeAttribute(lazySrcAttribute);
      img.removeEventListener('load', onload);
    };

    img.addEventListener('load', onload);
    img.setAttribute('src', src);
  };

  var observerHandler = function observerHandler(entries, self) {
    var _iterator = _createForOfIteratorHelper(entries),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var entry = _step.value;

        if (entry.isIntersecting) {
          load(entry.target); // the image is now in place, stop watching

          if (self) {
            self.unobserve(entry.target);
          }
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  };

  try {
    lazyImageObserver = new window.IntersectionObserver(observerHandler);

    var _iterator2 = _createForOfIteratorHelper(lazyImages),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var img = _step2.value;
        lazyImageObserver.observe(img);
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }

    return lazyImageObserver;
  } catch (e) {
    // eagerly load images when we don't have the observer
    var _iterator3 = _createForOfIteratorHelper(lazyImages),
        _step3;

    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var _img = _step3.value;
        load(_img);
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }
  }
}
//# sourceMappingURL=lazyLoadImages.js.map