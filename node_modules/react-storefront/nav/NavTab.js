"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _Link = _interopRequireDefault(require("../link/Link"));

var _styles = require("@material-ui/core/styles");

var _Hidden = _interopRequireDefault(require("@material-ui/core/Hidden"));

var _Fade = _interopRequireDefault(require("@material-ui/core/Fade"));

var _Tab = _interopRequireDefault(require("@material-ui/core/Tab"));

var _Popover = _interopRequireDefault(require("@material-ui/core/Popover"));

var _Paper = _interopRequireDefault(require("@material-ui/core/Paper"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _router = _interopRequireDefault(require("next/router"));

var styles = function styles(theme) {
  return {
    /**
     * Styles applied to the Popover element for desktop users.
     */
    popover: {
      pointerEvents: 'none',
      maxHeight: '80%'
    },

    /**
     * Styles applied to the `Tab` element.
     */
    tab: {
      paddingLeft: theme.spacing(2),
      paddingRight: theme.spacing(2)
    },

    /**
     * Styles applied to the root [`Link`](/apiReference/link/Link) element.
     */
    link: {
      textDecoration: 'none',
      color: 'inherit',
      fontWeight: 300
    },

    /**
     * Styles applied to the root element of the `Tab`'s `TouchRippleProps` classes.
     */
    ripple: {
      zIndex: 2
    },

    /**
     * Styles applied to the Popover element's `Paper` element for desktop users.
     */
    paper: {
      pointerEvents: 'all',
      paddingTop: 2,
      // we add 2 pixels of transparent padding and move the menu up two pixels to cover the tab indicator
      marginTop: -2,
      // so that the user doesn't temporarily mouse over the indicator when moving between the tab and the menu, causing the menu to flicker.
      background: 'transparent',
      boxShadow: '0px 5px 5px -3px rgba(0,0,0,0.2), 0px 8px 10px 1px rgba(0,0,0,0.14)'
    },

    /**
     * Styles applied to the Popover element's `Paper` element for desktop users.
     */
    innerPaper: {
      borderTop: "1px solid ".concat(theme.palette.divider)
    }
  };
};

var useStyles = (0, _styles.makeStyles)(styles, {
  name: 'RSFNavTab'
});
/**
 * A single navigational tab, which links to another page in the app based on the `as` and `href` props.
 * Children are displayed in a menu that is shown on mouse over on desktop devices.
 *
 * Example:
 *
 * ```js
 *  <NavTab href="/c/[categoryId]" as="/c/shirts" label="Shirts">
 *    <div style={{ padding: 20 }}>
 *      <Link href="/s/[subcategoryId]" as="/s/long-sleeve-shirts">Long Sleeve Shirts</Link>
 *      <Link href="/s/[subcategoryId]" as="/s/turtlenecks">Turtlenecks</Link>
 *      <Link href="/s/[subcategoryId]" as="/s/tees">Tee Shirts</Link>
 *    </div>
 *  </NavTab>
 * ```
 *
 * Accessibility:
 *
 * This component supports keyboard navigation.  The user can open the menu by pressing the enter key when the `NavTab` is focused.
 */

function NavTab(_ref) {
  var classes = _ref.classes,
      href = _ref.href,
      as = _ref.as,
      prefetch = _ref.prefetch,
      children = _ref.children,
      props = (0, _objectWithoutProperties2["default"])(_ref, ["classes", "href", "as", "prefetch", "children"]);
  classes = useStyles({
    classes: classes
  });

  var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      overTab = _useState2[0],
      setOverTab = _useState2[1];

  var _useState3 = (0, _react.useState)(false),
      _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
      overMenu = _useState4[0],
      setOverMenu = _useState4[1];

  var _useState5 = (0, _react.useState)(null),
      _useState6 = (0, _slicedToArray2["default"])(_useState5, 2),
      anchorEl = _useState6[0],
      setAnchorEl = _useState6[1];

  var _useState7 = (0, _react.useState)(false),
      _useState8 = (0, _slicedToArray2["default"])(_useState7, 2),
      focused = _useState8[0],
      setFocused = _useState8[1];

  var showMenu = (0, _react.useCallback)(function (event) {
    setOverTab(true);
    setAnchorEl(event.currentTarget);
  }, []); // We use setTimeout here to delay the tab and menu exit events give time for the user to enter
  // the tab or menu so that the menu doesn't flash when the user is transitioning between tab and menu.

  var hideMenu = (0, _react.useCallback)(function () {
    return setTimeout(function () {
      return setOverTab(false);
    });
  }, []);
  var leaveMenu = (0, _react.useCallback)(function () {
    return setTimeout(function () {
      return setOverMenu(false);
    });
  }, []);
  var enterMenu = (0, _react.useCallback)(function () {
    return setOverMenu(true);
  }, []);
  var menuItemBlurPending = (0, _react.useRef)(false); // accessibility: open the menu when the user presses enter with the tab focused

  var handleEnterKeyDown = (0, _react.useCallback)(function (e) {
    if (e.key === 'Enter') {
      e.preventDefault();
      setAnchorEl(e.currentTarget);
      setFocused(true);
    }
  }, []); // Keep track of when an item in the menu is focused.

  var handleMenuItemFocus = (0, _react.useCallback)(function () {
    // When tabbing through menu items, the current one will blur before the next one focuses.
    // So we need to let the event loop finish one cycle to see if another item in the menu receives focus before
    // determining that the menu has lost focus and should be closed.
    menuItemBlurPending.current = false;
  }, []); // When a menu item loses focus, we close the menu if another menu item doesn't immediately gain focus

  var handleMenuItemBlur = (0, _react.useCallback)(function () {
    menuItemBlurPending.current = true;
    setTimeout(function () {
      if (menuItemBlurPending.current) {
        setFocused(false);
      }
    });
  }, []);
  var open = overTab || overMenu || focused; // close the menu when the user navigates to a new page

  (0, _react.useEffect)(function () {
    var onHistoryChange = function onHistoryChange() {
      return handleMenuItemBlur();
    };

    var unsubscribe = function unsubscribe() {
      return _router["default"].events.off('routeChangeStart', onHistoryChange);
    };

    if (open) {
      _router["default"].events.on('routeChangeStart', onHistoryChange);
    } else {
      unsubscribe();
    }

    return unsubscribe;
  }, [open]);
  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(_Link["default"], {
    className: classes.link,
    href: href,
    as: as,
    onClick: hideMenu // Does not work in dev, because next consumes focus in production everything is good
    ,
    onMouseEnter: showMenu,
    onMouseLeave: hideMenu,
    prefetch: prefetch
  }, /*#__PURE__*/_react["default"].createElement(_Tab["default"], (0, _extends2["default"])({
    onKeyDown: handleEnterKeyDown,
    classes: {
      root: classes.tab
    },
    "aria-haspopup": children != null,
    "aria-expanded": open
  }, props, {
    TouchRippleProps: {
      classes: {
        root: classes.ripple
      }
    }
  }))), !children ? null : /*#__PURE__*/_react["default"].createElement(_Hidden["default"], {
    xsDown: true
  }, /*#__PURE__*/_react["default"].createElement(_Popover["default"], {
    open: open,
    className: classes.popover,
    anchorEl: anchorEl,
    anchorOrigin: {
      vertical: 'bottom',
      horizontal: 'center'
    },
    TransitionComponent: _Fade["default"],
    transformOrigin: {
      vertical: 'top',
      horizontal: 'center'
    },
    PaperProps: {
      onMouseEnter: enterMenu,
      onMouseLeave: leaveMenu,
      onClick: leaveMenu,
      square: true,
      className: classes.paper
    }
  }, /*#__PURE__*/_react["default"].createElement(_Paper["default"], {
    className: classes.innerPaper,
    onBlurCapture: handleMenuItemBlur,
    onFocusCapture: handleMenuItemFocus,
    square: true
  }, children))));
}

NavTab.propTypes = {
  /**
   * The link path
   */
  as: _propTypes["default"].string.isRequired,

  /**
   * The next.js route pattern
   */
  href: _propTypes["default"].string.isRequired,

  /**
   * Override or extend the styles applied to the component. See [CSS API](#css) below for more details.
   */
  classes: _propTypes["default"].object
};

var _default = /*#__PURE__*/_react["default"].memo(NavTab);

exports["default"] = _default;
//# sourceMappingURL=NavTab.js.map