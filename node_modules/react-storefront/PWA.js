"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = PWA;
exports.styles = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _PWAContext = _interopRequireDefault(require("./PWAContext"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _ErrorBoundary = _interopRequireDefault(require("./ErrorBoundary"));

var _styles = require("@material-ui/core/styles");

var _router = _interopRequireDefault(require("next/router"));

var _LinkContextProvider = _interopRequireDefault(require("./link/LinkContextProvider"));

var _useSimpleNavigation = _interopRequireDefault(require("./router/useSimpleNavigation"));

require("./hooks/useTraceUpdate");

require("./profile");

var styles = function styles(theme) {
  return {
    '@global': {
      body: {
        '-webkit-tap-highlight-color': 'transparent'
      },
      a: {
        color: theme.palette.primary.main,
        textDecoration: 'underline'
      }
    }
  };
};

exports.styles = styles;
var useStyles = (0, _styles.makeStyles)(styles, {
  name: 'RSFPWA'
});

function PWA(_ref) {
  var children = _ref.children,
      errorReporter = _ref.errorReporter;
  useStyles();
  var thumbnail = (0, _react.useRef)(null);

  var _useState = (0, _react.useState)(typeof navigator !== 'undefined' && !navigator.onLine),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      offline = _useState2[0],
      setOffline = _useState2[1];

  var context = (0, _react.useMemo)(function () {
    return {
      thumbnail: thumbnail,
      offline: offline
    };
  }, [offline]); // enable client-side navigation when the user clicks a simple HTML anchor element

  (0, _useSimpleNavigation["default"])();
  (0, _react.useEffect)(function () {
    context.hydrating = false;

    var handleOnline = function handleOnline() {
      return setOffline(false);
    };

    var handleOffline = function handleOffline() {
      return setOffline(true);
    };

    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);
    return function () {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, []);
  return /*#__PURE__*/_react["default"].createElement(_PWAContext["default"].Provider, {
    value: context
  }, /*#__PURE__*/_react["default"].createElement(_LinkContextProvider["default"], null, /*#__PURE__*/_react["default"].createElement(_ErrorBoundary["default"], {
    onError: errorReporter
  }, children)));
}

PWA.propTypes = {
  /**
   * A function to be called whenever an error occurs.  Use this to report errors
   * to a service like Airbrake or Rollbar.
   */
  errorReporter: _propTypes["default"].func
};
//# sourceMappingURL=PWA.js.map