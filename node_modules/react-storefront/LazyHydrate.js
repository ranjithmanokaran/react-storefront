"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getRegistryCount = getRegistryCount;
exports.LazyStyles = LazyStyles;
exports["default"] = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _useIntersectionObserver = _interopRequireDefault(require("./hooks/useIntersectionObserver"));

var _styles = require("@material-ui/core/styles");

var _jss = require("jss");

var _router = _interopRequireDefault(require("next/router"));

var _isBrowser = _interopRequireDefault(require("./utils/isBrowser"));

var _minifyStyles = _interopRequireDefault(require("./utils/minifyStyles"));

var _amp = require("next/amp");

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var fuiEvents = ['mouseover', 'touchstart', 'scroll'];
var touchEvents = ['touchstart', 'mouseover'];
var eventOptions = {
  once: true,
  capture: true,
  passive: true
};
var registries = []; // Only used for testing

function getRegistryCount() {
  return registries.length;
}

if ((0, _isBrowser["default"])()) {
  window.__lazyHydrateNavigated = false;
}
/*
  This component renders the server side rendered stylesheets for the
  lazy hydrated components. Once they become hydrated, these stylesheets
  will be removed.
*/


function LazyStyles() {
  /* istanbul ignore next */
  if ((0, _amp.useAmp)()) return null;
  var styles = null;

  try {
    styles = /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, registries.map(function (registry) {
      function applyScope(sheet) {
        var _iterator = _createForOfIteratorHelper(sheet.rules.index),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var rule = _step.value;

            if (rule.type === 'conditional') {
              applyScope(rule);
            } else {
              rule.selectorText = "#".concat(registry.id, " ").concat(rule.selectorText);
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      } // Apply these styles only to the wrapped component


      var _iterator2 = _createForOfIteratorHelper(registry.registry),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var sheet = _step2.value;
          applyScope(sheet);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      return /*#__PURE__*/_react["default"].createElement("style", {
        key: registry.id,
        id: registry.id,
        dangerouslySetInnerHTML: {
          __html: (0, _minifyStyles["default"])(registry.toString())
        }
      });
    }));
  } finally {
    // Clear registeries so we do not leak memory
    registries = [];
  }

  return styles;
}

function LazyStylesProvider(_ref) {
  var id = _ref.id,
      children = _ref.children;
  var generateClassName = (0, _styles.createGenerateClassName)({
    seed: id
  });
  var registry = new _jss.SheetsRegistry();
  registry.id = id;
  registries.push(registry);
  return /*#__PURE__*/_react["default"].createElement(_styles.StylesProvider, {
    sheetsManager: new Map(),
    serverGenerateClassName: generateClassName,
    sheetsRegistry: registry
  }, children);
}

_router["default"].events.on('routeChangeStart', function () {
  window.__lazyHydrateNavigated = true;
});

function LazyHydrateInstance(_ref2) {
  var id = _ref2.id,
      className = _ref2.className,
      ssrOnly = _ref2.ssrOnly,
      children = _ref2.children,
      on = _ref2.on,
      props = (0, _objectWithoutProperties2["default"])(_ref2, ["id", "className", "ssrOnly", "children", "on"]);

  function isHydrated() {
    if ((0, _isBrowser["default"])()) {
      // If rendering after client side navigation
      if (window.__lazyHydrateNavigated) return true; // return true

      if (ssrOnly) return false;
      return !!props.hydrated;
    } else {
      return true;
    }
  }

  var childRef = (0, _react.useRef)(null);

  var _useState = (0, _react.useState)(isHydrated()),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      hydrated = _useState2[0],
      setHydrated = _useState2[1];

  function hydrate() {
    if (!hydrated) {
      setHydrated(true);
      removeSSRStyles();
    }
  }

  function removeSSRStyles() {
    // Remove the server side generated stylesheet
    var stylesheet = window.document.getElementById(id);

    if (stylesheet) {
      stylesheet.remove();
    }
  } // hydrate if the hydrated prop is changed to true


  (0, _react.useEffect)(function () {
    if (props.hydrated) {
      hydrate();
    }
  }, [props.hydrated, ssrOnly]);

  if (on === 'visible') {
    (0, _useIntersectionObserver["default"])( // As root node does not have any box model, it cannot intersect.
    function () {
      return childRef.current.children[0];
    }, function (visible, disconnect) {
      if (visible) {
        hydrate();
        disconnect();
      }
    }, [], // Fallback to eager hydration

    /* istanbul ignore next */
    function () {
      return hydrate();
    });
  }

  (0, _react.useEffect)(function () {
    if (hydrated) return;

    var handler = function handler() {
      hydrate();
      clearEventListeners();
    };

    var clearEventListeners = function clearEventListeners() {
      if (on === 'touch') {
        touchEvents.forEach(function (type) {
          childRef.current.removeEventListener(type, handler, eventOptions);
        });
      } else if (on === 'fui') {
        fuiEvents.forEach(function (type) {
          window.removeEventListener(type, handler, eventOptions);
        });
      }
    };

    var onUnmount = function onUnmount() {
      // remove the SSR styles since the next time this component renders it will already be hydrated
      removeSSRStyles();
      clearEventListeners();
    };

    if (on === 'fui') {
      fuiEvents.forEach(function (type) {
        return window.addEventListener(type, handler, eventOptions);
      });
    } else if (on === 'touch') {
      touchEvents.forEach(function (type) {
        return childRef.current.addEventListener(type, handler, eventOptions);
      });
    }

    return onUnmount;
  }, [on]);

  if (hydrated) {
    return /*#__PURE__*/_react["default"].createElement("div", {
      ref: childRef,
      id: id,
      className: className,
      style: {
        display: 'contents'
      }
    }, children);
  } else {
    return /*#__PURE__*/_react["default"].createElement("div", {
      ref: childRef,
      id: id,
      className: className,
      style: {
        display: 'contents'
      },
      suppressHydrationWarning: true,
      dangerouslySetInnerHTML: {
        __html: ''
      }
    });
  }
}
/**
 * LazyHydrate a component based on a specified trigger
 *
 * Example usage:
 *
 *  <LazyHydrate id="foo">
 *    <div>some expensive component</div>
 *  </LazyHydrate>
 *
 */


function LazyHydrate(_ref3) {
  var children = _ref3.children,
      props = (0, _objectWithoutProperties2["default"])(_ref3, ["children"]);

  /* istanbul ignore next */
  if ((0, _amp.useAmp)()) return children;
  return /*#__PURE__*/_react["default"].createElement(LazyHydrateInstance, props, (0, _isBrowser["default"])() ? children : /*#__PURE__*/_react["default"].createElement(LazyStylesProvider, props, children));
}

LazyHydrate.defaultProps = {
  on: 'visible'
};
LazyHydrate.propTypes = {
  // Identification of component
  id: _propTypes["default"].string.isRequired,
  // Control the hydration of the component externally with this prop
  hydrated: _propTypes["default"].bool,
  // Force component to never hydrate
  ssrOnly: _propTypes["default"].bool,

  /* 
    Event to trigger hydration
    eventOptions
      - `visible` triggers hydration when component comes into the viewport
      - `touch` triggers hydration on touchstart or mouseover
      - `fui` (default) triggers hydration when user first interacts with page
  */
  on: _propTypes["default"].oneOf(['visible', 'touch', 'fui'])
};
var _default = LazyHydrate;
exports["default"] = _default;
//# sourceMappingURL=LazyHydrate.js.map