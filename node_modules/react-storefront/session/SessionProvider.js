"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = SessionProvider;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _SessionContext = _interopRequireDefault(require("./SessionContext"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _fetch = _interopRequireDefault(require("../fetch"));

var _get = _interopRequireDefault(require("lodash/get"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var initialState = {
  signedIn: false,
  cart: {
    items: []
  }
};
/**
 * Fetches user session data from a specific URL and provides it to descendant components via `SessionContext`.
 *
 * User and session data such as the number of items in the cart, the user's name, and email should always be
 * fetched when the app mounts, not in `getInitialProps`, otherwise the SSR result would not be cacheable
 * since it would contain user-specific data.
 */

function SessionProvider(_ref) {
  var url = _ref.url,
      children = _ref.children;

  var _useState = (0, _react.useState)(initialState),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      session = _useState2[0],
      setSession = _useState2[1];

  var context = (0, _react.useMemo)(function () {
    return {
      session: session,
      actions: {
        /**
         * Signs an existing user in
         * @param {String} email The user's email
         * @param {String} password The user's password
         */
        signIn: function signIn(_ref2) {
          return (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
            var email, password, response, result;
            return _regenerator["default"].wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    email = _ref2.email, password = _ref2.password;
                    _context.next = 3;
                    return (0, _fetch["default"])('/api/signIn', {
                      method: 'post',
                      body: JSON.stringify({
                        email: email,
                        password: password
                      })
                    });

                  case 3:
                    response = _context.sent;
                    _context.next = 6;
                    return response.json();

                  case 6:
                    result = _context.sent;

                    if (!response.ok) {
                      _context.next = 11;
                      break;
                    }

                    setSession(_objectSpread(_objectSpread({}, session), result));
                    _context.next = 12;
                    break;

                  case 11:
                    throw new Error((0, _get["default"])(result, 'error', 'An error occurred during sign in'));

                  case 12:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          }))();
        },

        /**
         * Signs the user out
         */
        signOut: function signOut() {
          return (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2() {
            var response, result;
            return _regenerator["default"].wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    _context2.next = 2;
                    return (0, _fetch["default"])('/api/signOut', {
                      method: 'post'
                    });

                  case 2:
                    response = _context2.sent;
                    _context2.next = 5;
                    return response.json();

                  case 5:
                    result = _context2.sent;

                    if (!response.ok) {
                      _context2.next = 10;
                      break;
                    }

                    setSession(_objectSpread(_objectSpread({}, session), result));
                    _context2.next = 11;
                    break;

                  case 10:
                    throw new Error((0, _get["default"])(result, 'error', 'An error occurred during sign out'));

                  case 11:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2);
          }))();
        },

        /**
         * Signs the user up for a new account
         * @param {Object} options
         * @param {String} firstName The user's first name
         * @param {String} lastName The user's last name
         * @param {String} email The user's email address
         * @param {String} password The user's password
         * @param {Object} ...others Additional data to submit to api/signUp
         */
        signUp: function signUp(_ref3) {
          return (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3() {
            var firstName, lastName, email, password, others, response, result;
            return _regenerator["default"].wrap(function _callee3$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    firstName = _ref3.firstName, lastName = _ref3.lastName, email = _ref3.email, password = _ref3.password, others = (0, _objectWithoutProperties2["default"])(_ref3, ["firstName", "lastName", "email", "password"]);
                    _context3.next = 3;
                    return (0, _fetch["default"])('/api/signUp', {
                      method: 'post',
                      body: JSON.stringify(_objectSpread({
                        firstName: firstName,
                        lastName: lastName,
                        email: email,
                        password: password
                      }, others))
                    });

                  case 3:
                    response = _context3.sent;
                    _context3.next = 6;
                    return response.json();

                  case 6:
                    result = _context3.sent;

                    if (!response.ok) {
                      _context3.next = 11;
                      break;
                    }

                    setSession(_objectSpread(_objectSpread({}, session), result));
                    _context3.next = 12;
                    break;

                  case 11:
                    throw new Error((0, _get["default"])(result, 'error', 'An error occurred during sign up'));

                  case 12:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee3);
          }))();
        },

        /**
         * Adds items to the cart
         * @param {Object} product Product data object
         * @param {Number} quantity The quantity to add to the cart
         * @param {Object} otherParams Additional data to submit to api/addToCart
         */
        addToCart: function addToCart(_ref4) {
          return (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4() {
            var product, quantity, otherParams, response, result;
            return _regenerator["default"].wrap(function _callee4$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    product = _ref4.product, quantity = _ref4.quantity, otherParams = (0, _objectWithoutProperties2["default"])(_ref4, ["product", "quantity"]);
                    _context4.next = 3;
                    return (0, _fetch["default"])('/api/cart/add', {
                      method: 'post',
                      headers: {
                        'Content-Type': 'application/json'
                      },
                      body: JSON.stringify(_objectSpread({
                        product: product,
                        quantity: quantity
                      }, otherParams))
                    });

                  case 3:
                    response = _context4.sent;
                    _context4.next = 6;
                    return response.json();

                  case 6:
                    result = _context4.sent;

                    if (!response.ok) {
                      _context4.next = 11;
                      break;
                    }

                    setSession(_objectSpread(_objectSpread({}, session), result));
                    _context4.next = 12;
                    break;

                  case 11:
                    throw new Error((0, _get["default"])(result, 'error', 'An unknown error occurred while attempting to add the item to your cart.'));

                  case 12:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee4);
          }))();
        },

        /**
         * Updates the items in the cart. Use this function to update the quantity of a product
         * in the cart or remove a product from the cart.
         * @param {Object} item Cart item to be updated
         * @param {number} quantity Expected quantity value
         * @param {Object} otherParams Additional data to submit to api/cart/update
         */
        updateCart: function updateCart(_ref5) {
          return (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee5() {
            var item, quantity, otherParams, response, result;
            return _regenerator["default"].wrap(function _callee5$(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    item = _ref5.item, quantity = _ref5.quantity, otherParams = (0, _objectWithoutProperties2["default"])(_ref5, ["item", "quantity"]);
                    _context5.next = 3;
                    return (0, _fetch["default"])('/api/cart/update', {
                      method: 'post',
                      headers: {
                        'Content-Type': 'application/json'
                      },
                      body: JSON.stringify(_objectSpread({
                        item: item,
                        quantity: quantity
                      }, otherParams))
                    });

                  case 3:
                    response = _context5.sent;
                    _context5.next = 6;
                    return response.json();

                  case 6:
                    result = _context5.sent;

                    if (!response.ok) {
                      _context5.next = 11;
                      break;
                    }

                    setSession(_objectSpread(_objectSpread({}, session), result));
                    _context5.next = 12;
                    break;

                  case 11:
                    throw new Error((0, _get["default"])(result, 'error', 'An unknown error occurred while making changes to your cart.'));

                  case 12:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee5);
          }))();
        },

        /**
         * Removes item in the cart.
         * @param {Object} item Cart item to be updated
         * @param {Object} otherParams Additional data to submit to /api/cart/remove
         */
        removeCartItem: function removeCartItem(_ref6) {
          return (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee6() {
            var item, otherParams, response, result;
            return _regenerator["default"].wrap(function _callee6$(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    item = _ref6.item, otherParams = (0, _objectWithoutProperties2["default"])(_ref6, ["item"]);
                    _context6.next = 3;
                    return (0, _fetch["default"])('/api/cart/remove', {
                      method: 'post',
                      headers: {
                        'Content-Type': 'application/json'
                      },
                      body: JSON.stringify(_objectSpread({
                        item: item
                      }, otherParams))
                    });

                  case 3:
                    response = _context6.sent;
                    _context6.next = 6;
                    return response.json();

                  case 6:
                    result = _context6.sent;

                    if (!response.ok) {
                      _context6.next = 11;
                      break;
                    }

                    setSession(_objectSpread(_objectSpread({}, session), result));
                    _context6.next = 12;
                    break;

                  case 11:
                    throw new Error((0, _get["default"])(result, 'error', 'An unknown error occurred while removing item from your cart.'));

                  case 12:
                  case "end":
                    return _context6.stop();
                }
              }
            }, _callee6);
          }))();
        }
      }
    };
  }, [session]);
  (0, _react.useEffect)(function () {
    function fetchSession() {
      return _fetchSession.apply(this, arguments);
    }

    function _fetchSession() {
      _fetchSession = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee7() {
        var response, result;
        return _regenerator["default"].wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return (0, _fetch["default"])(url);

              case 2:
                response = _context7.sent;
                _context7.next = 5;
                return response.json();

              case 5:
                result = _context7.sent;
                setSession(result);

              case 7:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }));
      return _fetchSession.apply(this, arguments);
    }

    if (url) fetchSession();
  }, [url]);
  return /*#__PURE__*/_react["default"].createElement(_SessionContext["default"].Provider, {
    value: context
  }, children);
}

SessionProvider.propTypes = {
  /**
   * A URL to fetch when the app mounts which establishes a user session and returns user and cart data
   * to be made available via `react-storefront/session/SessionContext`.
   */
  url: _propTypes["default"].string
};
//# sourceMappingURL=SessionProvider.js.map