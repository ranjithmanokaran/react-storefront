{"version":3,"sources":["../../src/session/SessionProvider.js"],"names":["initialState","signedIn","cart","items","SessionProvider","url","children","session","setSession","context","actions","signIn","email","password","method","body","JSON","stringify","response","json","result","ok","Error","signOut","signUp","firstName","lastName","others","addToCart","product","quantity","otherParams","headers","updateCart","item","removeCartItem","fetchSession","propTypes","PropTypes","string"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useMemo } from 'react'\nimport SessionContext from './SessionContext'\nimport PropTypes from 'prop-types'\nimport fetch from '../fetch'\nimport get from 'lodash/get'\n\nconst initialState = {\n  signedIn: false,\n  cart: {\n    items: [],\n  },\n}\n\n/**\n * Fetches user session data from a specific URL and provides it to descendant components via `SessionContext`.\n *\n * User and session data such as the number of items in the cart, the user's name, and email should always be\n * fetched when the app mounts, not in `getInitialProps`, otherwise the SSR result would not be cacheable\n * since it would contain user-specific data.\n */\nexport default function SessionProvider({ url, children }) {\n  const [session, setSession] = useState(initialState)\n\n  const context = useMemo(() => {\n    return {\n      session,\n      actions: {\n        /**\n         * Signs an existing user in\n         * @param {String} email The user's email\n         * @param {String} password The user's password\n         */\n        async signIn({ email, password }) {\n          const response = await fetch('/api/signIn', {\n            method: 'post',\n            body: JSON.stringify({\n              email,\n              password,\n            }),\n          })\n          const result = await response.json()\n\n          if (response.ok) {\n            setSession({ ...session, ...result })\n          } else {\n            throw new Error(get(result, 'error', 'An error occurred during sign in'))\n          }\n        },\n\n        /**\n         * Signs the user out\n         */\n        async signOut() {\n          const response = await fetch('/api/signOut', { method: 'post' })\n          const result = await response.json()\n\n          if (response.ok) {\n            setSession({ ...session, ...result })\n          } else {\n            throw new Error(get(result, 'error', 'An error occurred during sign out'))\n          }\n        },\n\n        /**\n         * Signs the user up for a new account\n         * @param {Object} options\n         * @param {String} firstName The user's first name\n         * @param {String} lastName The user's last name\n         * @param {String} email The user's email address\n         * @param {String} password The user's password\n         * @param {Object} ...others Additional data to submit to api/signUp\n         */\n        async signUp({ firstName, lastName, email, password, ...others }) {\n          const response = await fetch('/api/signUp', {\n            method: 'post',\n            body: JSON.stringify({\n              firstName,\n              lastName,\n              email,\n              password,\n              ...others,\n            }),\n          })\n\n          const result = await response.json()\n\n          if (response.ok) {\n            setSession({ ...session, ...result })\n          } else {\n            throw new Error(get(result, 'error', 'An error occurred during sign up'))\n          }\n        },\n\n        /**\n         * Adds items to the cart\n         * @param {Object} product Product data object\n         * @param {Number} quantity The quantity to add to the cart\n         * @param {Object} otherParams Additional data to submit to api/addToCart\n         */\n        async addToCart({ product, quantity, ...otherParams }) {\n          const response = await fetch('/api/cart/add', {\n            method: 'post',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n              product,\n              quantity,\n              ...otherParams,\n            }),\n          })\n\n          const result = await response.json()\n\n          if (response.ok) {\n            setSession({ ...session, ...result })\n          } else {\n            throw new Error(\n              get(\n                result,\n                'error',\n                'An unknown error occurred while attempting to add the item to your cart.',\n              ),\n            )\n          }\n        },\n\n        /**\n         * Updates the items in the cart. Use this function to update the quantity of a product\n         * in the cart or remove a product from the cart.\n         * @param {Object} item Cart item to be updated\n         * @param {number} quantity Expected quantity value\n         * @param {Object} otherParams Additional data to submit to api/cart/update\n         */\n        async updateCart({ item, quantity, ...otherParams }) {\n          const response = await fetch('/api/cart/update', {\n            method: 'post',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ item, quantity, ...otherParams }),\n          })\n\n          const result = await response.json()\n\n          if (response.ok) {\n            setSession({ ...session, ...result })\n          } else {\n            throw new Error(\n              get(result, 'error', 'An unknown error occurred while making changes to your cart.'),\n            )\n          }\n        },\n\n        /**\n         * Removes item in the cart.\n         * @param {Object} item Cart item to be updated\n         * @param {Object} otherParams Additional data to submit to /api/cart/remove\n         */\n        async removeCartItem({ item, ...otherParams }) {\n          const response = await fetch('/api/cart/remove', {\n            method: 'post',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ item, ...otherParams }),\n          })\n\n          const result = await response.json()\n\n          if (response.ok) {\n            setSession({ ...session, ...result })\n          } else {\n            throw new Error(\n              get(result, 'error', 'An unknown error occurred while removing item from your cart.'),\n            )\n          }\n        },\n      },\n    }\n  }, [session])\n\n  useEffect(() => {\n    async function fetchSession() {\n      const response = await fetch(url)\n      const result = await response.json()\n      setSession(result)\n    }\n\n    if (url) fetchSession()\n  }, [url])\n\n  return <SessionContext.Provider value={context}>{children}</SessionContext.Provider>\n}\n\nSessionProvider.propTypes = {\n  /**\n   * A URL to fetch when the app mounts which establishes a user session and returns user and cart data\n   * to be made available via `react-storefront/session/SessionContext`.\n   */\n  url: PropTypes.string,\n}\n"],"file":"SessionProvider.js"}