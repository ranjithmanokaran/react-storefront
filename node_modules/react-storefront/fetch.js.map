{"version":3,"sources":["../src/fetch.js"],"names":["getURL","request","url","URL","window","location","href","originalFetch","fetch","rsfVersionedFetch","init","parsed","toString","Request","XMLHttpRequest","originalOpen","prototype","open","rsfVersionedOpen","method","others","call","require"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA;;;;;AAKA,SAASA,MAAT,CAAgBC,OAAhB,EAAyB;AACvB,MAAIC,GAAG,GAAGD,OAAO,CAACC,GAAlB;;AAEA,MAAI,OAAOD,OAAP,KAAmB,QAAvB,EAAiC;AAC/BC,IAAAA,GAAG,GAAGD,OAAN;AACD;;AAED,SAAO,IAAIE,GAAJ,CAAQD,GAAR,EAAaE,MAAM,CAACC,QAAP,CAAgBC,IAA7B,CAAP;AACD,C,CAED;AACA;;AACA;;;AACA,IAAI,OAAOF,MAAP,KAAkB,WAAtB,EAAmC;AACjC,MAAMG,aAAa,GAAGH,MAAM,CAACI,KAA7B;;AAEAJ,EAAAA,MAAM,CAACI,KAAP,GAAe,SAASC,iBAAT,CAA2BP,GAA3B,EAAgCQ,IAAhC,EAAsC;AACnD,QAAMC,MAAM,GAAGX,MAAM,CAACE,GAAD,CAArB;;AAEA,QAAI,CAAC,8BAAaS,MAAb,CAAL,EAA2B;AACzB,aAAOJ,aAAa,CAACL,GAAD,EAAMQ,IAAN,CAApB;AACD;;AAED,QAAI,OAAOR,GAAP,KAAe,QAAnB,EAA6B;AAC3BA,MAAAA,GAAG,GAAG,4BAAWS,MAAX,EAAmBC,QAAnB,EAAN;AACD,KAFD,MAEO;AACL;AACAV,MAAAA,GAAG,GAAG,IAAIW,OAAJ,CAAY,4BAAWF,MAAX,EAAmBC,QAAnB,EAAZ,EAA2CV,GAA3C,CAAN;AACD;;AAED,WAAOK,aAAa,CAACL,GAAD,EAAMQ,IAAN,CAApB;AACD,GAfD;AAgBD;AAED;;;AACA,IAAI,OAAOI,cAAP,KAA0B,WAA9B,EAA2C;AACzC,MAAMC,YAAY,GAAGD,cAAc,CAACE,SAAf,CAAyBC,IAA9C;;AAEAH,EAAAA,cAAc,CAACE,SAAf,CAAyBC,IAAzB,GAAgC,SAASC,gBAAT,CAA0BC,MAA1B,EAAkCjB,GAAlC,EAAkD;AAChF,QAAMS,MAAM,GAAGX,MAAM,CAACE,GAAD,CAArB;;AADgF,sCAARkB,MAAQ;AAARA,MAAAA,MAAQ;AAAA;;AAGhF,QAAI,8BAAaT,MAAb,CAAJ,EAA0B;AACxB,aAAOI,YAAY,CAACM,IAAb,OAAAN,YAAY,GAAM,IAAN,EAAYI,MAAZ,EAAoB,4BAAWR,MAAX,EAAmBC,QAAnB,EAApB,SAAsDQ,MAAtD,EAAnB;AACD,KAFD,MAEO;AACL,aAAOL,YAAY,CAACM,IAAb,OAAAN,YAAY,GAAM,IAAN,EAAYI,MAAZ,EAAoBjB,GAApB,SAA4BkB,MAA5B,EAAnB;AACD;AACF,GARD;AASD;AAED;;;;;;;eAKeE,OAAO,CAAC,oBAAD,C","sourcesContent":["import addVersion from './api/addVersion'\nimport isSameOrigin from './utils/isSameOrigin'\n\n/**\n * Returns the parsed URL for the specified request\n * @param {Request|String} request A request instance or a URL string\n * @return {URL}\n */\nfunction getURL(request) {\n  let url = request.url\n\n  if (typeof request === 'string') {\n    url = request\n  }\n\n  return new URL(url, window.location.href)\n}\n\n// Here we patch fetch and XMLHttpRequest to always add version parameter to api calls so that cached results\n// from previous versions of the app aren't served to new versions.\n/* istanbul ignore else */\nif (typeof window !== 'undefined') {\n  const originalFetch = window.fetch\n\n  window.fetch = function rsfVersionedFetch(url, init) {\n    const parsed = getURL(url)\n\n    if (!isSameOrigin(parsed)) {\n      return originalFetch(url, init)\n    }\n\n    if (typeof url === 'string') {\n      url = addVersion(parsed).toString()\n    } else {\n      // the first param can be a request object\n      url = new Request(addVersion(parsed).toString(), url)\n    }\n\n    return originalFetch(url, init)\n  }\n}\n\n/* istanbul ignore else */\nif (typeof XMLHttpRequest !== 'undefined') {\n  const originalOpen = XMLHttpRequest.prototype.open\n\n  XMLHttpRequest.prototype.open = function rsfVersionedOpen(method, url, ...others) {\n    const parsed = getURL(url)\n\n    if (isSameOrigin(parsed)) {\n      return originalOpen.call(this, method, addVersion(parsed).toString(), ...others)\n    } else {\n      return originalOpen.call(this, method, url, ...others)\n    }\n  }\n}\n\n/**\n * An isomorphic implementation of the fetch API. You should always use this to fetch data on both the client and server.\n * When making requests to /api routes, ?__v__={next_build_id} will always be added to ensure that cached results\n * from previous versions of the app aren't served to new versions.\n */\nexport default require('isomorphic-unfetch')\n"],"file":"fetch.js"}